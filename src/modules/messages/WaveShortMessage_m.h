//
// Generated file, do not edit! Created by nedtool 4.6 from modules/messages/WaveShortMessage.msg.
//

#ifndef _WAVESHORTMESSAGE_M_H_
#define _WAVESHORTMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "Coord.h"
// }}

/**
 * Class generated from <tt>modules/messages/WaveShortMessage.msg:27</tt> by nedtool.
 * <pre>
 * packet WaveShortMessage
 * {
 *     // Version of the Wave Short Message
 *     int wsmVersion = 0;
 *     // Determine which security mechanism was used
 *     int securityType = 0;
 *     // Channel Number on which this packet was sent
 *     int channelNumber;
 *     // Data rate with which this packet was sent
 *     int dataRate = 1;
 *     // Power Level with which this packet was sent
 *     int priority = 3;
 *     // Unique number to identify the service
 *     int psid = 0;
 *     // Provider Service Context
 *     string psc = "Service with some Data";
 *     // Length of Wave Short Message
 *     int wsmLength;
 *     // Data of Wave Short Message
 *     string wsmData = "Some Data";
 * 
 *     // not sure, but I think is like a port number or identification of an application
 *     int serial = 0;
 *     Coord senderPos;
 *     simtime_t timestamp = 0;
 * 
 *     // int senderAddress = 0;
 *     // int recipientAddress = -1;
 * 
 *     // Epidemic changes
 *     // Set the Address of the sender;
 *     unsigned int senderAddress = 0;
 *     // Set the Address of the recipient. 268435455 means broadcast, the conversion of OxFFFFFFF to int;
 *     unsigned int recipientAddress = 268435455;
 * 
 *     string senderAddressString;
 *     string recipientAddressString;
 * 
 *     // Add for Epidemic
 *     // Set the source which generate the message, e.g., car[0], car[1] etc.
 *     string source;
 *     // Set the target which the message will be delivered, e.g., rsu[0], rsu[1] etc.
 *     string target;
 *     // Set if this is a summary vector or not. true value means summaryvector
 *     bool summaryVector = false;
 *     // Set if this is a request vector or not. true value means requestvector
 *     bool requestMessages = false;
 *     // Unique global message identification
 *     string globalMessageIdentificaton;
 *     // Unique local message identification
 *     string localMessageIdentificaton;
 *     // Hop Count works like TTL in the IP packets. -1 means that this variable has not being used
 *     unsigned int hopCount = 0;
 *     // Determine if a message has been successfully received or not. False is default value assigned to it
 *     bool ackRequest = false;
 * 
 *     //Add Minicurso_UFPI - Send ID da pista e velocidade
 *     //Current ID of the road, e. g., 1ato2b
 *     string roadId = "";
 *     // Speed of vehicle in the moment which send a message WSM, wsm->setSenderSpeed(traci->getSpeed());
 *     double senderSpeed = 0.0;
 * 
 *     // MFCV
 *     // Category of vehicle (1 to 10): 1 is bus, 2 is cab, ... need to complete 
 *     unsigned short category = 0;
 *     // Path history of the vehicle, calculated from time to time
 *     //string pathHistory;
 *     // Radius of Gyration of the vehicle, calculated from time to time.
 *     // The vehicle send yours Radius of Gyration to another vehicles 
 *     //double radius_of_Gyration;
 * 
 *     // test Jonh
 *     unsigned short heading;
 *     // targetPost
 *     Coord TargetPos;
 *     Coord senderPosBack;
 * }
 * </pre>
 */
class WaveShortMessage : public ::cPacket
{
  protected:
    int wsmVersion_var;
    int securityType_var;
    int channelNumber_var;
    int dataRate_var;
    int priority_var;
    int psid_var;
    opp_string psc_var;
    int wsmLength_var;
    opp_string wsmData_var;
    int serial_var;
    Coord senderPos_var;
    simtime_t timestamp_var;
    unsigned int senderAddress_var;
    unsigned int recipientAddress_var;
    opp_string senderAddressString_var;
    opp_string recipientAddressString_var;
    opp_string source_var;
    opp_string target_var;
    bool summaryVector_var;
    bool requestMessages_var;
    opp_string globalMessageIdentificaton_var;
    opp_string localMessageIdentificaton_var;
    unsigned int hopCount_var;
    bool ackRequest_var;
    opp_string roadId_var;
    double senderSpeed_var;
    unsigned short category_var;
    unsigned short heading_var;
    Coord TargetPos_var;
    Coord senderPosBack_var;

  private:
    void copy(const WaveShortMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaveShortMessage&);

  public:
    WaveShortMessage(const char *name=NULL, int kind=0);
    WaveShortMessage(const WaveShortMessage& other);
    virtual ~WaveShortMessage();
    WaveShortMessage& operator=(const WaveShortMessage& other);
    virtual WaveShortMessage *dup() const {return new WaveShortMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getWsmVersion() const;
    virtual void setWsmVersion(int wsmVersion);
    virtual int getSecurityType() const;
    virtual void setSecurityType(int securityType);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual int getDataRate() const;
    virtual void setDataRate(int dataRate);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual int getPsid() const;
    virtual void setPsid(int psid);
    virtual const char * getPsc() const;
    virtual void setPsc(const char * psc);
    virtual int getWsmLength() const;
    virtual void setWsmLength(int wsmLength);
    virtual const char * getWsmData() const;
    virtual void setWsmData(const char * wsmData);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual Coord& getSenderPos();
    virtual const Coord& getSenderPos() const {return const_cast<WaveShortMessage*>(this)->getSenderPos();}
    virtual void setSenderPos(const Coord& senderPos);
    virtual simtime_t getTimestamp() const;
    virtual void setTimestamp(simtime_t timestamp);
    virtual unsigned int getSenderAddress() const;
    virtual void setSenderAddress(unsigned int senderAddress);
    virtual unsigned int getRecipientAddress() const;
    virtual void setRecipientAddress(unsigned int recipientAddress);
    virtual const char * getSenderAddressString() const;
    virtual void setSenderAddressString(const char * senderAddressString);
    virtual const char * getRecipientAddressString() const;
    virtual void setRecipientAddressString(const char * recipientAddressString);
    virtual const char * getSource() const;
    virtual void setSource(const char * source);
    virtual const char * getTarget() const;
    virtual void setTarget(const char * target);
    virtual bool getSummaryVector() const;
    virtual void setSummaryVector(bool summaryVector);
    virtual bool getRequestMessages() const;
    virtual void setRequestMessages(bool requestMessages);
    virtual const char * getGlobalMessageIdentificaton() const;
    virtual void setGlobalMessageIdentificaton(const char * globalMessageIdentificaton);
    virtual const char * getLocalMessageIdentificaton() const;
    virtual void setLocalMessageIdentificaton(const char * localMessageIdentificaton);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual bool getAckRequest() const;
    virtual void setAckRequest(bool ackRequest);
    virtual const char * getRoadId() const;
    virtual void setRoadId(const char * roadId);
    virtual double getSenderSpeed() const;
    virtual void setSenderSpeed(double senderSpeed);
    virtual unsigned short getCategory() const;
    virtual void setCategory(unsigned short category);
    virtual unsigned short getHeading() const;
    virtual void setHeading(unsigned short heading);
    virtual Coord& getTargetPos();
    virtual const Coord& getTargetPos() const {return const_cast<WaveShortMessage*>(this)->getTargetPos();}
    virtual void setTargetPos(const Coord& TargetPos);
    virtual Coord& getSenderPosBack();
    virtual const Coord& getSenderPosBack() const {return const_cast<WaveShortMessage*>(this)->getSenderPosBack();}
    virtual void setSenderPosBack(const Coord& senderPosBack);
};

inline void doPacking(cCommBuffer *b, WaveShortMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WaveShortMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _WAVESHORTMESSAGE_M_H_

