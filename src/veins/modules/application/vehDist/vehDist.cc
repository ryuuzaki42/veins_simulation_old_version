// Copyright (C) 2015-2016 João Batista <joao.b@usp.br>

#include "veins/modules/application/vehDist/vehDist.h"

using Veins::TraCIMobilityAccess;

Define_Module(vehDist);

void vehDist::initialize(int stage) {
    BaseWaveApplLayer::initialize_default_veins_TraCI(stage);
    if (stage == 0) { // traci - mobility, traci->getComand - traci, new traciVehice
        mobility = TraCIMobilityAccess().get(getParentModule());
        traci = mobility->getCommandInterface();
        traciVehicle = mobility->getVehicleCommandInterface();

        vehInitializeVariablesVehDistVeh();
    }
}

void vehDist::vehInitializeVariablesVehDistVeh() {
    vehCreateUpdateRateTimeToSendEvent(); // Create Event to update the rateTimeToSend (Only VehDist)

    vehInitializeValuesVehDist(traciVehicle->getTypeId(), mobility->getPositionAt(simTime() + 0.1)); // The same for Epidemic and VehDist

    vehCreateEventTrySendBeaconMessage(); // Create one Event to try send messages in buffer (Only VehDist)
}

void vehDist::onBeaconStatus(WaveShortMessage* wsm) {
    unordered_map <string, WaveShortMessage>::iterator itStatusNeighbors = beaconStatusNeighbors.find(wsm->getSource());
    if (itStatusNeighbors != beaconStatusNeighbors.end()) { // Update the beaconStatus
        itStatusNeighbors->second = *wsm;
    } else {
        if (beaconStatusNeighbors.size() > SbeaconStatusBufferSize) {
            removeOldestInputBeaconStatus();
        }
        beaconStatusNeighbors.insert(make_pair(wsm->getSource(), *wsm));
        sendMessageToOneNeighborTarget(wsm->getSource()); // Look in buffer it has messages for this new vehNeighbor
    }
    //printBeaconNeighbors();
}

void vehDist::onBeaconMessage(WaveShortMessage* wsm) {
    if (source.compare(wsm->getRecipientAddressTemporary()) == 0) { // Verify if this is the recipient of the message
        saveMessagesOnFile(wsm, fileMessagesUnicast);

        // Real scenario
        //if (source.compare(wsm->getTarget()) == 0) { // Message to this vehicle
            //
        //} else {

        // test if message has been delivered to the target before.
        // TODO Alguma diferença no resultado final de mensagens recebidas?
        if (messagesDelivered.empty() || (find(messagesDelivered.begin(), messagesDelivered.end(), wsm->getGlobalMessageIdentificaton()) == messagesDelivered.end())) {

          bool insert = sendOneNewMessageToOneNeighborTarget(*wsm); // Look in neigborStatus buffer if has the target of this message
            //bool insert = true;
            if (insert) {
                if (wsm->getHopCount() >= 0) {
                    if (messagesBufferVehDist.empty() || messagesBufferVehDist.find(wsm->getGlobalMessageIdentificaton()) == messagesBufferVehDist.end()) { //verify if the message isn't in the buffer
                        cout << source << " saving message from " << wsm->getSenderAddressTemporary() << " with Id: " << wsm->getGlobalMessageIdentificaton() << " at: " << simTime() << endl;
                        string wsmDataTmp = wsm->getWsmData();
                        if (wsmDataTmp.size() < 42) { // WSMData generated by car[x] and carry by [ T, P
                            wsmDataTmp += " and carry by (";
                        } else {
                            wsmDataTmp += ", ";
                        }
                        wsmDataTmp += vehCategory;
                        wsm->setWsmData(wsmDataTmp.c_str());

                        if (messagesBufferVehDist.size() > SbeaconMessageBufferSize) {
                            removeOldestInputBeaconMessage();
                        }

                        messagesBufferVehDist.insert(make_pair(wsm->getGlobalMessageIdentificaton(), *wsm)); // Add the message in the vehicle buffer
                        msgBufferUse++;
                        messagesOrderReceivedVehDist.push_back(wsm->getGlobalMessageIdentificaton());

                        colorCarryMessageVehDist(messagesBufferVehDist);
                        printMessagesBuffer();
                    } else {
                        cout << source << " message is on the buffer at: " << simTime() << endl;
                    }
                } else { // wsm->getHopCount() < 0
                    cout << "Error: received message with hopCount < 0, hopCount: " << wsm->getHopCount() << " at: " << simTime() << endl;
                    exit(2);
                }
            }
        } else {
            cout << source << " message with Id: " << wsm->getGlobalMessageIdentificaton() << " from " << wsm->getSenderAddressTemporary() << " has been delivered to the target before" << endl;
        }
    }/*else { // Message to another vehicle
        cout << "Saving broadcast message from: " << wsm->getSenderAddressTemporary() << " to " << source << endl;
        saveMessagesOnFile(wsm, fileMessagesNameBroadcast);
    }*/
    //printMessagesBuffer();
}

void vehDist::sendWSM(WaveShortMessage* wsm) {
    bool isParking = mobility->getParkingState();
    if (isParking && !SvehSendWhileParking) {
        return;
    }

    sendDelayedDown(wsm, individualOffset);
}

void vehDist::removeOldestInputBeaconMessage() {
    //printMessagesBuffer();

    if (!messagesBufferVehDist.empty()) {
        unsigned short int typeRemoved = 0;
        unordered_map <string, WaveShortMessage>::iterator itMessage = messagesBufferVehDist.begin();
        simtime_t minTime = itMessage->second.getTimestamp();
        string idMessage = itMessage->first;
        itMessage++;

        for (; itMessage != messagesBufferVehDist.end(); itMessage++) {
            if (minTime > itMessage->second.getTimestamp()) {
                minTime = itMessage->second.getTimestamp();
                idMessage = itMessage->first;
            }
        }

        if (simTime() > (minTime + SttlBeaconMessage)) {
            cout << source << " remove one message (" << idMessage << ") by time, minTime: " << minTime << " at: " << simTime();
            cout << " ttlBeaconMessage: " << SttlBeaconMessage << endl;
            typeRemoved = 3; // by ttl (1 buffer, 2 copy, 3 time)
        } else if (messagesBufferVehDist.size() > SbeaconMessageBufferSize) {
            //cout << source << " remove one message (" << idMessage << ") by space, MessageBuffer.size(): " << messagesBuffer.size();
            //cout << " at: " << simTime() << " vehDist::beaconMessageBufferSize: " << vehDist::beaconMessageBufferSize << endl;
            typeRemoved = 1; // by buffer (1 buffer, 2 copy, 3 time)
        }

        if (typeRemoved != 0) {
            insertMessageDropVeh(idMessage, typeRemoved, messagesBufferVehDist[idMessage].getTimestamp()); // Removed by the value of tyRemoved (1 buffer, 2 copy, 3 time)
            messagesBufferVehDist.erase(idMessage);
            auto itMsg = find(messagesOrderReceivedVehDist.begin(), messagesOrderReceivedVehDist.end(), idMessage);
            messagesOrderReceivedVehDist.erase(itMsg);

            //colorCarryMessageVehDist(messagesBufferVehDist);
            removeOldestInputBeaconMessage();
        }
    } /*else {
        cout << "messagesBuffer from " << source << " is empty now" << endl;
    }*/
}

void vehDist::removeOldestInputBeaconStatus() {
    //printBeaconStatusNeighbors();

    if (!beaconStatusNeighbors.empty()) {
        unordered_map <string, WaveShortMessage>::iterator itBeaconStatus;
        itBeaconStatus = beaconStatusNeighbors.begin();
        simtime_t minTime = itBeaconStatus->second.getTimestamp();
        string idBeacon = itBeaconStatus->first;
        itBeaconStatus++;

        for (; itBeaconStatus != beaconStatusNeighbors.end(); itBeaconStatus++) {
            if (minTime > itBeaconStatus->second.getTimestamp()) {
                minTime = itBeaconStatus->second.getTimestamp();
                idBeacon = itBeaconStatus->first;
            }
        }

        if (simTime() > (minTime + SttlBeaconStatus)) {
            //cout << source << " remove one beaconStatus (" << idBeacon << ") by time, minTime: " << minTime << " at: " << simTime();
            //cout << " ttlBeaconStatus: " << ttlBeaconStatus << endl;
            beaconStatusNeighbors.erase(idBeacon);
            removeOldestInputBeaconStatus();
        } else if (beaconStatusNeighbors.size() > SbeaconStatusBufferSize) {
            //cout << source << " remove one beaconStatus (" << idBeacon << ") by space, beaconStatusNeighbors.size(): " << beaconStatusNeighbors.size();
            //cout << " at: " << simTime() << " beaconMessageBufferSize: " << beaconMessageBufferSize << endl;
            beaconStatusNeighbors.erase(idBeacon);
            removeOldestInputBeaconStatus();
        }
    } /*else {
        cout << "beaconStatusNeighbors from " << source << " is empty now" << endl;
    }*/
}

void vehDist::sendBeaconMessage() {
    cout << source << " try to send message at: " << simTime() << endl;
//############################################################# run many times
    removeOldestInputBeaconStatus();
    removeOldestInputBeaconMessage();

//    unordered_map<string, WaveShortMessage>::iterator itbeaconStatus;
//    for (itbeaconStatus = beaconStatusNeighbors.begin(); itbeaconStatus != beaconStatusNeighbors.end(); itbeaconStatus++){
//        sendMessageNeighborsTarget(itbeaconStatus->second.getSource()); // Look in buffer it has messages for this new vehicle neighbor
//    }
//############################################################# run many times

    if (messageToSend >= messagesOrderReceivedVehDist.size() || messagesOrderReceivedVehDist.empty()) {
        messageToSend = 0;
    }

    //printMessagesBuffer();
    trySendBeaconMessage();
    //printMessagesBuffer();
    messageToSend++; // Move to next message

    if (!SuseRateTimeToSend){
        cout << source << " schedule useRateTimeToSend: false at: " << simTime() << " to: " << (simTime() + 1);
        scheduleAt((simTime() + par("normalTimeSendMessage").doubleValue()), sendBeaconMessageEvt);
    } else {
        if (messageToSend >= messagesOrderReceivedVehDist.size() || messagesOrderReceivedVehDist.empty()) {
            if (simTime() > timeToFinishLastStartSend) {
                scheduleAt((simTime() + double(rateTimeToSend)/1000), sendBeaconMessageEvt);
                cout << source << " 1_schedule at: " << simTime() << " to: " << (simTime() + double(rateTimeToSend)/1000);
            } else {
                scheduleAt(timeToFinishLastStartSend, sendBeaconMessageEvt);
                cout << source << " 2_schedule at: " << simTime() << " to: " << timeToFinishLastStartSend;
            }

            timeToFinishLastStartSend += double(rateTimeToSendLimitTime)/1000;
        } else {
            scheduleAt((simTime() + double(rateTimeToSend)/1000), sendBeaconMessageEvt);
            cout << source << " 3_schedule at: " << simTime() << " to: " << (simTime() + double(rateTimeToSend)/1000) << " rateTimeToSend: " << rateTimeToSend;
        }
        cout << " timeToFinishLastStartSend: " << timeToFinishLastStartSend << endl;
        cout << "                               " << source << " expSendbyDSCR: " << SexpSendbyDSCR << " at: " << simTime() << endl << endl;
    }
}

void vehDist::trySendBeaconMessage() {
    if (!messagesBufferVehDist.empty()) {
        cout << source << " messagesBuffer with "<< messagesBufferVehDist.size() << " message(s) at " << simTime() << endl;
        // Test with hopCount 0, send only

        if (!beaconStatusNeighbors.empty()) {
            //printBeaconStatusNeighbors();

            // Test to send RSU
            // Assumimos o mesmo Range (rsu e veh)

            string idMessage, rcvId;
            idMessage = messagesOrderReceivedVehDist[messageToSend];
            if (messagesBufferVehDist[idMessage].getHopCount() > 0) {
                rcvId = neighborWithShortestDistanceToTarge(idMessage);
            } else {
                rcvId = neighborWithShortestDistanceToTargeOnlyDelivery(idMessage);
            }

            string catVeh;
            if (source.compare(rcvId) != 0) {
                unordered_map <string, WaveShortMessage>::iterator itBeaconN;
                itBeaconN = beaconStatusNeighbors.find(rcvId);
                catVeh = itBeaconN->second.getCategory();

                cout << source << " chose the vehicle " << rcvId << " in the exp " << SexpSendbyDSCR << " to be a next hop to the " << idMessage << " message" << endl;
                cout << "    " << source << " send message to " << rcvId << " with category " << catVeh << " at "<< simTime() << endl;
                cout << "    MessageToSend: " << messageToSend << endl;
                cout << "    MessageID: " << idMessage << endl;
                cout << "    Source: " << messagesBufferVehDist[idMessage].getSource() << endl;
                cout << "    Message content: " << messagesBufferVehDist[idMessage].getWsmData() << endl;
                cout << "    Target: " << messagesBufferVehDist[idMessage].getTarget() << endl;
                cout << "    Timestamp: " << messagesBufferVehDist[idMessage].getTimestamp() << endl;
                cout << "    HopCount: " << messagesBufferVehDist[idMessage].getHopCount() << endl << endl;

                sendWSM(updateBeaconMessageWSM(messagesBufferVehDist[idMessage].dup(), rcvId));
                ScountMsgPacketSend++;

                if (!SallowMessageCopy) {
                    cout << source << " send the message " << idMessage << " and removing (message copy not allow) at "  << simTime() << endl;

                    insertMessageDropVeh(idMessage, 2, messagesBufferVehDist[idMessage].getTimestamp()); // Removed by the value of tyRemoved (1 buffer, 2 copy, 3 time)

                    messagesBufferVehDist.erase(idMessage);
                    messageToSend--;

                    auto it = find(messagesOrderReceivedVehDist.begin(), messagesOrderReceivedVehDist.end(), idMessage);
                    messagesOrderReceivedVehDist.erase(it);
                    colorCarryMessageVehDist(messagesBufferVehDist);
                }

                if (SuseMessagesSendLog) {
                    if (messagesSendLog.empty()) {
                        messagesSendLog.insert(make_pair(idMessage, rcvId));
                    } else {
                        messagesSendLog[idMessage] += ", " + rcvId;
                    }
                }

            } else {
                cout << source << " not send any message" << endl << endl;
            }
        } else {
            cout << source << " beaconNeighbors on sendDataMessage is empty now" << endl << endl;
        }
    } /*else {
        cout << source << " messagesBuffer is empty at " << simTime() << endl;
    }*/
}

string vehDist::choseCategory_RandomNumber1to100(unsigned short int percentP, string vehIdP, string vehIdT) {
    unsigned short int valRand = rand() % 100 + 1;
    cout << "valRand " << valRand;
    if (valRand <= percentP) {
        cout << " return vehIdP" << endl;
        return vehIdP;
    } else { // valRand > percentP
        cout << " return vehIdT" << endl;
        return vehIdT;
    }
}

string vehDist::neighborWithShortestDistanceToTargeOnlyDelivery(string idMessage) {
    unordered_map <string, WaveShortMessage>::iterator itBeaconNeighbors;

    for (itBeaconNeighbors = beaconStatusNeighbors.begin(); itBeaconNeighbors != beaconStatusNeighbors.end(); itBeaconNeighbors++) {
        if (strcmp(itBeaconNeighbors->second.getSource(), messagesBufferVehDist[idMessage].getTarget()) == 0) {
            cout << source << " found target, message " << idMessage << " target " << messagesBufferVehDist[idMessage].getTarget() << " at " << simTime() << endl;
            return itBeaconNeighbors->second.getSource();
        }
    }
    return source;
}
string vehDist::neighborWithShortestDistanceToTarge(string idMessage) {
    string category;
    shortestDistance sD;
    unsigned short int MeetCatT, MeetCatP;
    double neighborDistanceBefore, neighborDistanceNow;
    unordered_map <string, shortestDistance> vehShortestDistanceToTarget;
    unordered_map <string, shortestDistance>::iterator itShortestDistance;
    unordered_map <string, WaveShortMessage>::iterator itBeaconNeighbors;

    MeetCatT = MeetCatP = 0;
    bool insert;

    cout << "Meet with neighbors " << beaconStatusNeighbors.size() << " options to a send" << idMessage << " message" << endl;
    for (itBeaconNeighbors = beaconStatusNeighbors.begin(); itBeaconNeighbors != beaconStatusNeighbors.end(); itBeaconNeighbors++) {
        if (strcmp(itBeaconNeighbors->second.getSource(), messagesBufferVehDist[idMessage].getTarget()) == 0) {
             cout << source << " found target, message " << idMessage << " target " << messagesBufferVehDist[idMessage].getTarget() << endl;

             return itBeaconNeighbors->second.getSource();
        } else {
            if (!messagesSendLog.empty() && (messagesSendLog[idMessage].find(itBeaconNeighbors->first) != std::string::npos)) {
                cout << source << " has been send a message " << idMessage << " to " << itBeaconNeighbors->first << endl;
            } else {
                neighborDistanceBefore = traci->getDistance(itBeaconNeighbors->second.getSenderPosPrevious(), messagesBufferVehDist[idMessage].getTargetPos(), false);
                neighborDistanceNow = traci->getDistance(itBeaconNeighbors->second.getSenderPos(), messagesBufferVehDist[idMessage].getTargetPos(), false);
                cout << "    1337 " << itBeaconNeighbors->first << "DistB: " << neighborDistanceBefore << " DistN: " << neighborDistanceNow << endl;

                if (SusePathHistory) { // True will check if the vehicle is closing to target (message target destination)
                    insert = false;

                    if (neighborDistanceBefore > neighborDistanceNow) { // Test if is closing to target
                        insert = true;
                    } /*else {
                        cout << itBeaconNeighbors->first << " going to another direction" << endl;
                    }*/
                } else {
                    insert = true;
                }

//                if (!SallowMessageCopy || !SusePathHistory) {
//                    double thisVehDistanceNow = traci->getDistance(curPosition, messagesBufferVehDist[idMessage].getTargetPos(), false);
//                    if (neighborDistanceNow > thisVehDistanceNow) { // Test if is closing to target
//                        insert = false;
//                    }
//                }

                if (insert) {
                    sD.categoryVeh = itBeaconNeighbors->second.getCategory();
                    sD.distanceToTargetNow = neighborDistanceNow;
                    sD.distanceToTargetBefore = neighborDistanceBefore;
                    sD.senderPos = Coord(itBeaconNeighbors->second.getSenderPos());
                    sD.speedVeh = itBeaconNeighbors->second.getSenderSpeed();
                    sD.rateTimeToSendVeh = itBeaconNeighbors->second.getRateTimeToSend();

                    if (sD.categoryVeh.compare("T") == 0) {
                        sD.distanceToTargetCategory = sD.distanceToTargetNow + sD.distanceToTargetNow * 0.1;
                        MeetCatT = 1;
                    } else if (sD.categoryVeh.compare("P") == 0) {
                        sD.distanceToTargetCategory = sD.distanceToTargetNow + sD.distanceToTargetNow * 0.3;
                        MeetCatP =1;
                    } else {
                        cout << "Error category unknown" << endl;
                        exit(3);
                    }

                    sD.decisionValueDistanceSpeed = sD.distanceToTargetNow - (sD.speedVeh);
                    sD.decisionValueDistanceRateTimeToSend = sD.distanceToTargetNow + (double(sD.rateTimeToSendVeh)/100);
                    sD.decisionValueDistanceSpeedRateTimeToSend = sD.distanceToTargetNow - (sD.speedVeh) + (double(sD.rateTimeToSendVeh)/100);

                    // Distance = [0 - 125] - 720 m
                    // vehicle Speed = 0 - (16.67/25) - 84 m/s
                    // rateTimeToSend = 100 to 5000 ms
                    // DecisonValueDS = distance - speed
                    // DecisonValueDSCR = distance - speed + rateTimeToSend/100 (0.1 * 10)

                    vehShortestDistanceToTarget.insert(make_pair(itBeaconNeighbors->first, sD));
                }
            }
        }
    }

    if (!vehShortestDistanceToTarget.empty()) {
        if ((MeetCatP == 1) && (MeetCatT == 1)) {
            ScountTwoCategoryN++;
            cout << endl << "Meet of vehicles of two categories" << endl;
        } else if ((MeetCatP == 1) || (MeetCatT == 1)) {
            ScountMeetN++;
        }
        cout << "Meet with " << vehShortestDistanceToTarget.size() << " options to a send" << idMessage << " message" << endl;

        cout << endl << "Source vehicle information" << endl;
        cout << "    Id(veh): " << source << endl;
        cout << "    Message Id: " << messagesBufferVehDist[idMessage].getGlobalMessageIdentificaton() << endl;
        cout << "    Category: " << vehCategory << endl;
        cout << "    Distance: " << traci->getDistance(curPosition, messagesBufferVehDist[idMessage].getTargetPos(), false) << endl;
        cout << "    Speed: " << mobility->getSpeed() << endl;
        cout << "    Position: " << mobility->getCurrentPosition() << endl;
        cout << "    RateTimeToSend: " << rateTimeToSend << endl;

        cout << endl << endl << "Printing vehShortestDistanceToTarget to " << source << " at " << simTime() << endl << endl;
        for (itShortestDistance = vehShortestDistanceToTarget.begin(); itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
            cout << "    Id(veh): " << itShortestDistance->first << endl;
            cout << "    Position: " << itShortestDistance->second.senderPos << endl;
            cout << "    Category: " << itShortestDistance->second.categoryVeh << endl;
            cout << "    DistanceBefore: " << itShortestDistance->second.distanceToTargetBefore << endl;
            cout << "    DistanceNow:    " << itShortestDistance->second.distanceToTargetNow << endl;
            cout << "    Speed: " << itShortestDistance->second.speedVeh << endl;
            cout << "    RateTimeToSend: " << itShortestDistance->second.rateTimeToSendVeh << endl;
            cout << "    DistanceCategory: " << itShortestDistance->second.distanceToTargetCategory << endl;
            cout << "    DecisionValueDistanceSpeed: " << itShortestDistance->second.decisionValueDistanceSpeed << endl;
            cout << "    decisionValueDistanceRateTimeToSend: " << itShortestDistance->second.decisionValueDistanceRateTimeToSend << endl;
            cout << "    DecisionValueDistanceSpeedRateTimeToSend: " << itShortestDistance->second.decisionValueDistanceSpeedRateTimeToSend << endl << endl;
        }
    } else {
        cout << endl << "vehShortestDistanceToTarget to " << source << " at " << simTime() << " vehShortestDistanceToTarget is empty" << endl << endl;
    }

    if (SusePathHistory) {
        if (vehShortestDistanceToTarget.empty()) {
            cout << source << " select the more closest to target to take good use of this meet. ";

            itBeaconNeighbors = beaconStatusNeighbors.begin();
            string vehId = itBeaconNeighbors->first;
            double shortDist = traci->getDistance(itBeaconNeighbors->second.getSenderPos(), messagesBufferVehDist[idMessage].getTargetPos(), false);
            itBeaconNeighbors++;

            for (; itBeaconNeighbors != beaconStatusNeighbors.end(); itBeaconNeighbors++) {
                neighborDistanceNow = traci->getDistance(itBeaconNeighbors->second.getSenderPos(), messagesBufferVehDist[idMessage].getTargetPos(), false);

                if (shortDist > neighborDistanceNow) {
                    shortDist = neighborDistanceNow;
                    vehId = itBeaconNeighbors->first;
                }
            }

            cout << "The vehicle more closest is " << vehId << endl;
            ScountMeetN++;
            return vehId;
        }
    }

    string vehId = source;
    if (!vehShortestDistanceToTarget.empty()) {
        switch (SexpSendbyDSCR) {
            case 1:
                vehId = chosenByDistance(vehShortestDistanceToTarget);
                break;
            case 12:
                vehId = chosenByDistance_Speed(vehShortestDistanceToTarget);
                break;
            case 13:
                vehId = chosenByDistance_CategoryA(vehShortestDistanceToTarget, SpercentP);
                //vehId = chosenByDistance_CategoryB(vehShortestDistanceToTarget, SpercentP);
                break;
            case 14:
                vehId = chosenByDistance_RateTimeToSend(vehShortestDistanceToTarget);
                break;
            case 123:
                vehId = chosenByDistance_Speed_Category(vehShortestDistanceToTarget, SpercentP);
                break;
////######################################################################################################
//            case 124:
//                vehId = chosenByDistance_Speed_RateTimeToSend(vehShortestDistanceToTarget, SpercentP);
//                break;
//            case 134:
//                vehId = chosenByDistance_Category_RateTimeToSend(vehShortestDistanceToTarget, SpercentP);
//                break;
////######################################################################################################
            case 1234:
                vehId = chosenByDistance_Speed_Category_RateTimeToSend(vehShortestDistanceToTarget, SpercentP);
                break;
            default:
                cout << "Error! expSendbyDSCR: " << SexpSendbyDSCR << "not defined, class in vehDist.cc";
                DBG << "Error! expSendbyDSCR: " << SexpSendbyDSCR << "not defined, class in vehDist.cc";
                exit(1);
            }
    }

    return vehId;
}

string vehDist::chosenByDistance(unordered_map <string, shortestDistance> vehShortestDistanceToTarget) {
    unordered_map <string, shortestDistance>::iterator itShortestDistance;
    double distanceToTarget, shortestDistanceToTarget;

    string vehId = source;
    shortestDistanceToTarget = DBL_MAX;
    for (itShortestDistance = vehShortestDistanceToTarget.begin(); itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
        distanceToTarget = itShortestDistance->second.distanceToTargetNow;
        if (shortestDistanceToTarget > distanceToTarget) {
            shortestDistanceToTarget = distanceToTarget;
            vehId = itShortestDistance->first;
        }
    }
    return vehId;
}

string vehDist::chosenByDistance_Speed(unordered_map <string, shortestDistance> vehShortestDistanceToTarget) {
    unordered_map <string, shortestDistance>::iterator itShortestDistance;
    double distanceSpeedValue, shortestDistanceSpeedValue;

    string vehId = source;
    shortestDistanceSpeedValue = DBL_MAX;
    for (itShortestDistance = vehShortestDistanceToTarget.begin(); itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
        distanceSpeedValue = itShortestDistance->second.decisionValueDistanceSpeed;
        if (shortestDistanceSpeedValue > distanceSpeedValue) {
            shortestDistanceSpeedValue = distanceSpeedValue;
            vehId = itShortestDistance->first;
        }
    }
    return vehId;
}

string vehDist::chosenByDistance_CategoryA(unordered_map <string, shortestDistance> vehShortestDistanceToTarget, int percentP) {
    unordered_map <string, shortestDistance>::iterator itShortestDistance;
    double distanceToTarget, shortestDistanceT, shortestDistanceP;
    string category, vehIdP, vehIdT;

    vehIdP = vehIdT = source;
    shortestDistanceP = shortestDistanceT = DBL_MAX;
    for (itShortestDistance = vehShortestDistanceToTarget.begin(); itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
        category = itShortestDistance->second.categoryVeh;
        distanceToTarget = itShortestDistance->second.distanceToTargetNow;
        if (category.compare("P") == 0) {
            if (shortestDistanceP > distanceToTarget) {
                shortestDistanceP = distanceToTarget;
                vehIdP = itShortestDistance->first;
            }
        } else if (category.compare("T") == 0) {
            if (shortestDistanceT > distanceToTarget) {
                shortestDistanceT = distanceToTarget;
                vehIdT = itShortestDistance->first;
            }
        }
    }

    if (shortestDistanceP == DBL_MAX) {
        return vehIdT;
    } else if (shortestDistanceT == DBL_MAX) {
        return vehIdP;
    }

    if (int(shortestDistanceT) > int(shortestDistanceP)) {
        ScountMeetPshortestT++;
        return choseCategory_RandomNumber1to100(percentP, vehIdP, vehIdT);
    } else {
        return vehIdT;
    }
}

string vehDist::chosenByDistance_CategoryB(unordered_map <string, shortestDistance> vehShortestDistanceToTarget, int percentP) {
    string vehId = source;
    double distanceToTargetCategory, shortestDistanceCategory;
    shortestDistanceCategory = DBL_MAX;

    unordered_map <string, shortestDistance>::iterator itShortestDistance = vehShortestDistanceToTarget.begin();
    for (; itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
        distanceToTargetCategory = itShortestDistance->second.distanceToTargetCategory;

        if (shortestDistanceCategory > distanceToTargetCategory) {
            shortestDistanceCategory = distanceToTargetCategory;
            vehId = itShortestDistance->first;
        }
    }
    return vehId;
}

string vehDist::chosenByDistance_RateTimeToSend(unordered_map <string, shortestDistance> vehShortestDistanceToTarget) {
    unordered_map <string, shortestDistance>::iterator itShortestDistance;
    double distanceRateTimeToSendValue, shortestDistanceRateTimeToSendValue;
    string vehId = source;

    shortestDistanceRateTimeToSendValue = DBL_MAX;
    for (itShortestDistance = vehShortestDistanceToTarget.begin(); itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
        distanceRateTimeToSendValue = itShortestDistance->second.decisionValueDistanceRateTimeToSend;
        if (shortestDistanceRateTimeToSendValue > distanceRateTimeToSendValue) {
            shortestDistanceRateTimeToSendValue = distanceRateTimeToSendValue;
            vehId = itShortestDistance->first;
        }
    }
    return vehId;
}

string vehDist::chosenByDistance_Speed_Category(unordered_map <string, shortestDistance> vehShortestDistanceToTarget, int percentP) {
    unordered_map <string, shortestDistance>::iterator itShortestDistance;
    double distanceSpeedValue, shortestDistanceT, shortestDistanceP;
    string category, vehIdP, vehIdT;

    vehIdP = vehIdT = source;
    shortestDistanceP = shortestDistanceT = DBL_MAX;
    for (itShortestDistance = vehShortestDistanceToTarget.begin(); itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
        category = itShortestDistance->second.categoryVeh;
        distanceSpeedValue = itShortestDistance->second.decisionValueDistanceSpeed;
        if (category.compare("P") == 0) {
            if (shortestDistanceP > distanceSpeedValue) {
                shortestDistanceP = distanceSpeedValue;
                vehIdP = itShortestDistance->first;
            }
        } else if (category.compare("T") == 0) {
            if (shortestDistanceT > distanceSpeedValue) {
                shortestDistanceT = distanceSpeedValue;
                vehIdT = itShortestDistance->first;
            }
        }
    }

    if (shortestDistanceP == DBL_MAX) {
        return vehIdT;
    } else if (shortestDistanceT == DBL_MAX) {
        return vehIdP;
    }

    if (int(shortestDistanceT) > int(shortestDistanceP)) {
        ScountMeetPshortestT++;
        return choseCategory_RandomNumber1to100(percentP, vehIdP, vehIdT);
    } else {
        return vehIdT;
    }
}

string vehDist::chosenByDistance_Speed_Category_RateTimeToSend(unordered_map <string, shortestDistance> vehShortestDistanceToTarget, int percentP) {
    unordered_map <string, shortestDistance>::iterator itShortestDistance;
    double valueDSCR, shortestDistanceT, shortestDistanceP;
    string category, vehIdP, vehIdT;

    vehIdP = vehIdT = source;
    shortestDistanceP = shortestDistanceT = DBL_MAX;
    for (itShortestDistance = vehShortestDistanceToTarget.begin(); itShortestDistance != vehShortestDistanceToTarget.end(); itShortestDistance++) {
        category = itShortestDistance->second.categoryVeh;
        valueDSCR = itShortestDistance->second.decisionValueDistanceSpeedRateTimeToSend;
        if (category.compare("P") == 0) {
            if (shortestDistanceP > valueDSCR) {
                shortestDistanceP = valueDSCR;
                vehIdP = itShortestDistance->first;
            }
        } else if (category.compare("T") == 0) {
            if (shortestDistanceT > valueDSCR) {
                shortestDistanceT = valueDSCR;
                vehIdT = itShortestDistance->first;
            }
        }
    }

    if (shortestDistanceP == DBL_MAX) {
        return vehIdT;
    } else if (shortestDistanceT == DBL_MAX) {
        return vehIdP;
    }

    if (int(shortestDistanceT) > int(shortestDistanceP)) {
        ScountMeetPshortestT++;
        return choseCategory_RandomNumber1to100(percentP, vehIdP, vehIdT);
    } else {
        return vehIdT;
    }
}

void vehDist:: finish() {
    toFinishVeh();
}

void vehDist::sendMessageToOneNeighborTarget(string beaconSource) {
    unsigned short int countMessage = messagesBufferVehDist.size();
    unordered_map <string, WaveShortMessage>::iterator itMessage = messagesBufferVehDist.begin();
    string idMessage;
    while (countMessage > 0) {
        if (beaconSource.compare(itMessage->second.getTarget()) == 0) {
            idMessage = itMessage->second.getGlobalMessageIdentificaton();
            cout << source << " sending MessageToOneNeighborTarget: " << idMessage << " to: " << beaconSource << " and removing from messagesBuffer" << endl;

            sendWSM(updateBeaconMessageWSM(itMessage->second.dup(), beaconSource));
            ScountMsgPacketSend++;
            messagesDelivered.push_back(idMessage);

            if (countMessage == 1) {
                countMessage = 0;
            } else {
                countMessage--;
                itMessage++;
            }

            messagesBufferVehDist.erase(idMessage);
            auto it = find(messagesOrderReceivedVehDist.begin(), messagesOrderReceivedVehDist.end(), idMessage);
            if (it != messagesOrderReceivedVehDist.end()) {
                messagesOrderReceivedVehDist.erase(it);
            } else {
                cout << source <<  "Error in messagesOrderReceived, need to have the same entries as messagesBuffer" << endl;
                exit(1);
            }
            colorCarryMessageVehDist(messagesBufferVehDist);
        } else {
            countMessage--;
            itMessage++;
        }
    }
}

bool vehDist::sendOneNewMessageToOneNeighborTarget(WaveShortMessage wsm) { // Will use or not?
    unordered_map <string, WaveShortMessage>::iterator itBeaconStatus = beaconStatusNeighbors.begin();
    string targetMessage = wsm.getTarget();

    while (itBeaconStatus != beaconStatusNeighbors.end()) {
        if (targetMessage.compare(itBeaconStatus->first) == 0) { // Test if this neighbor is the target of the last message received
            cout << source << " sending OneNewMessageToOneNeighborTarget: " << wsm.getGlobalMessageIdentificaton() << " to: " << itBeaconStatus->first << endl;

            //exit(14);
            sendWSM(updateBeaconMessageWSM(wsm.dup(), itBeaconStatus->first));
            ScountMsgPacketSend++;
            messagesDelivered.push_back(wsm.getGlobalMessageIdentificaton());

            return false;
        } else { // Just go to next vehicle neighbors
            itBeaconStatus++;
        }
    }
    return true;
}

void vehDist::handleLowerMsg(cMessage* msg) {
    WaveShortMessage* wsm = dynamic_cast<WaveShortMessage*>(msg);
    ASSERT(wsm);

    if (wsm->getType() == 1) {
        onBeaconStatus(wsm);
    } else if (wsm->getType() == 2) {
        onBeaconMessage(wsm);
    } else {
        DBG << "unknown message (" << wsm->getName() << ") received" << endl;
        cout << "unknown message (" << wsm->getName() << ") received" << endl;
        exit(22);
    }

    delete(msg);
}

void vehDist::vehCreateUpdateRateTimeToSendEvent() {
    rateTimeToSend = 2500; //100 // Send in: 100 ms
    //rateTimeToSend = 100; //100 // Send in: 100 ms
    rateTimeToSendDistanceControl = 10; // Equal to 10 m in 1 s
    rateTimeToSendLimitTime = par("beaconMessageInterval").longValue(); // #5
    rateTimeToSendLimitTime = rateTimeToSendLimitTime * 1000; // #5000 // Limit that rateTimeToSend can be (one message by 5000 ms), value must be (bufferMessage limit) * rateTimeToSend, in this case 50 * 100 = 5000
    rateTimeToSendUpdateTime = 1; // Will update every 1 s

    sendUpdateRateTimeToSendVeh = new cMessage("Event update rateTimeToSend vehicle", SendEvtUpdateRateTimeToSendVeh);
    //cout << source << " at: " << simTime() << " schedule created UpdateRateTimeToSend to: "<< (simTime() + rateTimeToSendUpdateTime) << endl;

    scheduleAt((simTime() + rateTimeToSendUpdateTime), sendUpdateRateTimeToSendVeh);
}

void vehDist::vehCreateEventTrySendBeaconMessage() {
    if (sendData) {
        sendBeaconMessageEvt = new cMessage("Event send beacon message", SendEvtBeaconMessage);
        timeToFinishLastStartSend = simTime() + vehOffSet;
        messageToSend = 0; // messagesOrderReceived.front();
        //cout << source << " at: "<< simTime() << " schedule created SendBeaconMessage to: "<< timeToFinishLastStartSend << endl;
        scheduleAt(timeToFinishLastStartSend, sendBeaconMessageEvt);
        timeToFinishLastStartSend += double(rateTimeToSendLimitTime)/1000; // /1000 because works with s instead ms
    }
}

WaveShortMessage* vehDist::prepareBeaconStatusWSM(string name, int lengthBits, t_channel channel, int priority, int serial) {
    WaveShortMessage* wsm = new WaveShortMessage(name.c_str());
    wsm->setType(1); // Beacon of Status
    wsm->addBitLength(headerLength);
    wsm->addBitLength(lengthBits);
    switch (channel) {
        case type_SCH: // Will be rewritten at Mac1609_4 to actual Service Channel. This is just so no controlInfo is needed
            wsm->setChannelNumber(Channels::SCH1);
            break;
        case type_CCH:
            wsm->setChannelNumber(Channels::CCH);
            break;
    }
    wsm->setPsid(0);
    wsm->setPriority(priority);
    wsm->setWsmVersion(1);
    wsm->setSerial(serial);
    wsm->setTimestamp(simTime());
    wsm->setSource(source.c_str());

    // beaconStatus don't need
    //wsm->setRecipientAddressTemporary();  // => "BROADCAST"
    //wsm->setSenderAddressTemporary(source);
    //wsm->setTarget(); // => "BROADCAST"

    wsm->setSenderSpeed(mobility->getSpeed());
    wsm->setCategory(vehCategory.c_str());
    wsm->setSenderPos(curPosition);
    if (simTime() < StimeToUpdatePosition) {
        wsm->setSenderPosPrevious(mobility->getPositionAt(0.1));
    } else {
        wsm->setSenderPosPrevious(mobility->getPositionAt(simTime() - StimeToUpdatePosition));
    }
    wsm->setRateTimeToSend(rateTimeToSend);

//    wsm->setHeading(getVehHeading4()); //wsm->setHeading(getVehHeading8()); // heading 1 to 4 or 1 to 8
//    wsm->setRoadId(mobility->getRoadId().c_str());

    DBG << "Creating BeaconStatus with Priority " << priority << " at Applayer at " << wsm->getTimestamp() << endl;
    return wsm;
}

WaveShortMessage* vehDist::updateBeaconMessageWSM(WaveShortMessage* wsm, string rcvId) {
    wsm->setSenderAddressTemporary(source.c_str());
    wsm->setRecipientAddressTemporary(rcvId.c_str());
    wsm->setCategory(vehCategory.c_str());
    wsm->setHopCount(wsm->getHopCount() -1);

//    wsm->setRoadId(mobility->getRoadId().c_str());
//    wsm->setSenderSpeed(mobility->getSpeed());
//    wsm->setSenderPos(curPosition);
//    if (simTime() < vehDist::timeToUpdatePosition) {
//        wsm->setSenderPosPrevious(mobility->getPositionAt(0.1));
//    } else {
//        wsm->setSenderPosPrevious(mobility->getPositionAt(simTime() - vehDist::timeToUpdatePosition));
//    }
//    wsm->setHeading(getVehHeading4()); //wsm->setHeading(getVehHeading8());

    return wsm;
}

void vehDist::handleSelfMsg(cMessage* msg) {
    switch (msg->getKind()) {
        case SEND_BEACON_EVT: {
            sendWSM(prepareBeaconStatusWSM("beaconStatus", beaconLengthBits, type_CCH, beaconPriority, -1));
            scheduleAt((simTime() + par("beaconInterval").doubleValue()), sendBeaconEvt);
            break;
        }
        case SendEvtBeaconMessage: {
            sendBeaconMessage();
            break;
        }
        case SendEvtUpdateRateTimeToSendVeh: {
            vehUpdateRateTimeToSend();
            scheduleAt((simTime() + rateTimeToSendUpdateTime), sendUpdateRateTimeToSendVeh);
            break;
        }
        case SendEvtGenerateBeaconMessage: {
            vehGenerateBeaconMessageAfterBeginVeh();
            scheduleAt((simTime() + par("timeGenerateBeaconMessage").doubleValue()), sendGenerateBeaconMessageEvt);
            break;
        }
        default: {
            if (msg) {
                DBG << "APP: Error: Got Self Message of unknown kind! Name: " << msg->getName() << endl;
            }
            break;
        }
    }
}

void vehDist::vehUpdateRateTimeToSend() {
    //cout << source << " rateTimeToSend: " << rateTimeToSend;
    unsigned short int distance = traci->getDistance(mobility->getPositionAt(simTime() - rateTimeToSendUpdateTime), curPosition, false);

    if (distance >= rateTimeToSendDistanceControl) {
        if(rateTimeToSend > 100) { // Inferior limit
            rateTimeToSend -= 100;
        }
    } else {
        if (rateTimeToSend < rateTimeToSendLimitTime) { // Upper limit
            rateTimeToSend += 100;
        }
    }
    //cout << " updated to: " << rateTimeToSend << " at: " << simTime() << " by: " <<  distance << " traveled [" << mobility->getPositionAt(simTime() - rateTimeToSendUpdateTime) << " " << curPosition << "]" << endl;
}

void vehDist::printMessagesBuffer() {
    if (!messagesBufferVehDist.empty()) {
        cout << endl << "messagesBuffer from " << source << " at: " << simTime() << " position: " << curPosition << endl;
        unordered_map <string, WaveShortMessage>::iterator itMessage;
        for (itMessage = messagesBufferVehDist.begin(); itMessage != messagesBufferVehDist.end(); itMessage++) {
            cout << "    Id(message): " << itMessage->second.getGlobalMessageIdentificaton() << endl;
            cout << "    WsmData: " << itMessage->second.getWsmData() << endl;
            cout << "    Source: " << itMessage->second.getSource() << endl;
            cout << "    Target: " << itMessage->second.getTarget() << endl;
            cout << "    Timestamp: " << itMessage->second.getTimestamp() << endl;
            cout << "    HopCount: " << itMessage->second.getHopCount() << endl << endl << endl;
        }
    } else {
        cout << endl << "messagesBuffer from " << source << " is empty now: " << simTime() << " position: " << curPosition << endl << endl;
    }
}

void vehDist::printBeaconStatusNeighbors() {
    if (!beaconStatusNeighbors.empty()) {
        cout << endl << "beaconStatusNeighbors from " << source << " at: " << simTime() << " position: " << curPosition << endl;
        unordered_map <string, WaveShortMessage>::iterator itBeaconStatus;
        for (itBeaconStatus = beaconStatusNeighbors.begin(); itBeaconStatus != beaconStatusNeighbors.end(); itBeaconStatus++) {
            cout << "    Id(vehicle): " << itBeaconStatus->first << endl;
            cout << "    PositionPrevious: " << itBeaconStatus->second.getSenderPosPrevious() << endl;
            cout << "    Position: " << itBeaconStatus->second.getSenderPos() << endl;
            cout << "    Speed: " << itBeaconStatus->second.getSenderSpeed() << endl;
            cout << "    Category: " << itBeaconStatus->second.getCategory() << endl;
            cout << "    RoadId: " << itBeaconStatus->second.getRoadId() << endl;
            cout << "    Heading: " << itBeaconStatus->second.getHeading() << endl;
            cout << "    Timestamp: " << itBeaconStatus->second.getTimestamp() << endl;
            cout << "    RateTimeToSend: " << itBeaconStatus->second.getRateTimeToSend() << endl << endl;
        }
    } else {
        cout << endl << "beaconStatusNeighbors from " << source << " is empty now: " << simTime() << " position: " << curPosition << endl;
    }
}

//##############################################################################################################
void vehDist::onData(WaveShortMessage* wsm) {
}

void vehDist::onBeacon(WaveShortMessage* wsm) {
}

// Not used ###############################################################
unsigned short int vehDist::getVehHeading4() {
    // marcospaiva.com.br/images/rosa_dos_ventos%2002.GIF
    // marcospaiva.com.br/localizacao.htm

    double angle;
    if (mobility->getAngleRad() < 0) { // radians are negative, so degrees negative
        angle = (((mobility->getAngleRad() + 2 * M_PI ) * 180)/ M_PI);
    } else { // radians are positive, so degrees positive
        angle = ((mobility->getAngleRad() * 180) / M_PI);
    }

    if ((angle >= 315 && angle < 360) || (angle >= 0 && angle < 45)) {
        return 1; // L or E => 0º
    } else if (angle >= 45 && angle < 135) {
        return 2; // N => 90º
    } else if (angle >= 135  && angle < 225) {
        return 3; // O or W => 180º
    } else if (angle >= 225  && angle < 315) {
        return 4; // S => 270º
    } else {
        return 9; // Error
    }
}

unsigned short int vehDist::getVehHeading8() {
    // marcospaiva.com.br/images/rosa_dos_ventos%2002.GIF
    // marcospaiva.com.br/localizacao.htm

    double angle;
    if (mobility->getAngleRad() < 0) { // radians are negative, so degrees negative
        angle = (((mobility->getAngleRad() + 2 * M_PI ) * 180)/ M_PI);
    } else { // radians are positive, so degrees positive
        angle = ((mobility->getAngleRad() * 180) / M_PI);
    }

    if ((angle >= 337.5 && angle < 360) || (angle >= 0 && angle < 22.5)) {
        return 1; // L or E => 0º
    } else if (angle >= 22.5 && angle < 67.5) {
        return 2; // NE => 45º
    } else if (angle >= 67.5  && angle < 112.5) {
        return 3; // N => 90º
    } else if (angle >= 112.5  && angle < 157.5) {
        return 4; // NO => 135º
    } else if (angle >= 157.5  && angle < 202.5) {
        return 5; // O or W => 180º
    } else if (angle >= 202.5  && angle < 247.5) {
        return 6; // SO => 225º
    } else if (angle >= 247.5  && angle < 292.5) {
        return 7; // S => 270º
    } else if (angle >= 292.5  && angle < 337.5) {
        return 8; // SE => 315º
    } else {
        return 9; // Error
    }
}
