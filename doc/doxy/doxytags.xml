<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AddressingInterface.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_addressing_interface_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <class kind="class">AddressingInterface</class>
  </compound>
  <compound kind="file">
    <name>AirFrame11p_m.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/messages/</path>
    <filename>_air_frame11p__m_8h</filename>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <class kind="class">AirFrame11p</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_air_frame11p__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_air_frame11p__m_8h.html</anchorfile>
      <anchor>ad83af586f31c7445fbdf5fb40dcb7e09</anchor>
      <arglist>(cCommBuffer *b, AirFrame11p &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_air_frame11p__m_8h.html</anchorfile>
      <anchor>adc2eade05254bb9a90ee73fbb8993808</anchor>
      <arglist>(cCommBuffer *b, AirFrame11p &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AirFrame_m.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/messages/</path>
    <filename>_air_frame__m_8h</filename>
    <includes id="_signal___8h" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <class kind="class">Veins::AirFrame</class>
    <namespace>Veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_air_frame__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a3b3f2a57b7ea45d25c3621ae72dcacb7</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a2bbc3cd13c02338fcad7ebdf40d8e3df</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnalogueModel.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_analogue_model_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">AnalogueModel</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>AnnotationDummy.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/world/annotations/</path>
    <filename>_annotation_dummy_8cc</filename>
    <includes id="_annotation_dummy_8h" name="AnnotationDummy.h" local="yes" imported="no">modules/world/annotations/AnnotationDummy.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_annotation_dummy_8cc.html</anchorfile>
      <anchor>a283c46f51f18045ade96818209f2d2c2</anchor>
      <arglist>(AnnotationDummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnnotationDummy.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/world/annotations/</path>
    <filename>_annotation_dummy_8h</filename>
    <class kind="class">Veins::AnnotationDummy</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>AnnotationManager.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/world/annotations/</path>
    <filename>_annotation_manager_8cc</filename>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">modules/mobility/traci/TraCICommandInterface.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_annotation_manager_8cc.html</anchorfile>
      <anchor>a075fb1a6f33ec60ba9be734670f79c05</anchor>
      <arglist>(Veins::AnnotationManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnnotationManager.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/world/annotations/</path>
    <filename>_annotation_manager_8h</filename>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">Veins::AnnotationManager</class>
    <class kind="class">Veins::AnnotationManager::Annotation</class>
    <class kind="class">Veins::AnnotationManager::Point</class>
    <class kind="class">Veins::AnnotationManager::Line</class>
    <class kind="class">Veins::AnnotationManager::Polygon</class>
    <class kind="class">Veins::AnnotationManager::Group</class>
    <class kind="class">Veins::AnnotationManagerAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>asserts.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>asserts_8cc</filename>
    <includes id="asserts_8h" name="asserts.h" local="yes" imported="no">asserts.h</includes>
    <member kind="function">
      <type>void</type>
      <name>fail</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>a1f8628faeb4388876f8ab45607c6f8ca</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pass</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>aec687a334481a5bcfddc105436a6bd06</anchor>
      <arglist>(std::string msg, bool hidePassed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTrue</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>a91eb1f57eb654c3ac5a16d199b89c26a</anchor>
      <arglist>(std::string msg, bool value, bool hidePassed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertFalse</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>aebcb1171586edc207f337d2f73fba5b7</anchor>
      <arglist>(std::string msg, bool value)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>haltOnFails</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>aeb737c1e6c8fe37c0bbda18ed4ec9c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>displayPassed</name>
      <anchorfile>asserts_8cc.html</anchorfile>
      <anchor>ac1023727041c5d5af91a5de139fda9db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>asserts.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>asserts_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>fail</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a16993092edc0ffcced4de614d2acc074</anchor>
      <arglist>(std::string msg, T expected, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fail</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a1f8628faeb4388876f8ab45607c6f8ca</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pass</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>aee2041a905a32ba514ff25b90a20ce4e</anchor>
      <arglist>(std::string msg, bool hidePassed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTrue</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>afce42beebc712b8f8a0aa98c3b6818a9</anchor>
      <arglist>(std::string msg, bool value, bool hidePassed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertFalse</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>aebcb1171586edc207f337d2f73fba5b7</anchor>
      <arglist>(std::string msg, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertClose</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a49894dc35526035a4ce26b9ab593102e</anchor>
      <arglist>(std::string msg, T target, T actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertEqual</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a600bdbb498d1f3c97126ce600fd5e48c</anchor>
      <arglist>(std::string msg, T target, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertEqualSilent</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>ae2c31f2691cef4d630fa732ccd528024</anchor>
      <arglist>(std::string msg, T target, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertNotEqual</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a38bf3c92a02acd42ddbccd053dabe2e6</anchor>
      <arglist>(std::string msg, T target, T2 actual)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>a73ae7e986e8c63298610d330578f5b74</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>haltOnFails</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>aeb737c1e6c8fe37c0bbda18ed4ec9c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>displayPassed</name>
      <anchorfile>asserts_8h.html</anchorfile>
      <anchor>ac1023727041c5d5af91a5de139fda9db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_appl_layer_8cc</filename>
    <includes id="_base_appl_layer_8h" name="BaseApplLayer.h" local="yes" imported="no">BaseApplLayer.h</includes>
    <includes id="_passed_message_8h" name="PassedMessage.h" local="yes" imported="no">PassedMessage.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseApplLayer.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_appl_layer_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="yes" imported="no">BaseLayer.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <class kind="class">BaseApplLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseBattery.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_battery_8cc</filename>
    <includes id="_base_battery_8h" name="BaseBattery.h" local="yes" imported="no">BaseBattery.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseBattery.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_battery_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_base_module_8h" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <includes id="_host_state_8h" name="HostState.h" local="yes" imported="no">HostState.h</includes>
    <class kind="class">DrawAmount</class>
    <class kind="class">BaseBattery</class>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_base_connection_manager_8cc</filename>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <includes id="_nic_entry_debug_8h" name="NicEntryDebug.h" local="yes" imported="no">NicEntryDebug.h</includes>
    <includes id="_nic_entry_direct_8h" name="NicEntryDirect.h" local="yes" imported="no">NicEntryDirect.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ccEV</name>
      <anchorfile>_base_connection_manager_8cc.html</anchorfile>
      <anchor>a4b2119ae4d85523b374e820916ee091b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseConnectionManager.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_base_connection_manager_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_nic_entry_8h" name="NicEntry.h" local="yes" imported="no">NicEntry.h</includes>
    <class kind="class">BaseConnectionManager</class>
    <class kind="class">BaseConnectionManager::GridCoord</class>
    <class kind="class">BaseConnectionManager::CoordSet</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>BaseDecider.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_base_decider_8cc</filename>
    <includes id="_base_decider_8h" name="BaseDecider.h" local="yes" imported="no">BaseDecider.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseDecider.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_base_decider_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">Decider.h</includes>
    <class kind="class">BaseDecider</class>
    <class kind="struct">BaseDecider::CSRInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>deciderEV</name>
      <anchorfile>_base_decider_8h.html</anchorfile>
      <anchor>a3200db65721ee02e265524d66a4cf7c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseLayer.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_layer_8cc</filename>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="yes" imported="no">BaseLayer.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseLayer.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_layer_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="_passed_message_8h" name="PassedMessage.h" local="yes" imported="no">PassedMessage.h</includes>
    <class kind="class">BaseLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_mac_layer_8cc</filename>
    <includes id="_base_mac_layer_8h" name="BaseMacLayer.h" local="yes" imported="no">BaseMacLayer.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <includes id="_signal___8h" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <includes id="_mac_to_phy_interface_8h" name="MacToPhyInterface.h" local="yes" imported="no">MacToPhyInterface.h</includes>
    <includes id="_mac_to_netw_control_info_8h" name="MacToNetwControlInfo.h" local="yes" imported="no">MacToNetwControlInfo.h</includes>
    <includes id="_netw_to_mac_control_info_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">NetwToMacControlInfo.h</includes>
    <includes id="_mac_to_phy_control_info_8h" name="MacToPhyControlInfo.h" local="yes" imported="no">MacToPhyControlInfo.h</includes>
    <includes id="_addressing_interface_8h" name="AddressingInterface.h" local="yes" imported="no">AddressingInterface.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">base/connectionManager/ChannelAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_mac_pkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">MacPkt_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_mac_layer_8cc.html</anchorfile>
      <anchor>a248c3a8421f876d37fe7256ac9dcf05b</anchor>
      <arglist>(BaseMacLayer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMacLayer.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_mac_layer_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="yes" imported="no">BaseLayer.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <includes id="_mapping_base_8h" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
    <class kind="class">BaseMacLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseMobility.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_mobility_8cc</filename>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">BaseMobility.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <includes id="_border_msg__m_8h" name="BorderMsg_m.h" local="yes" imported="no">BorderMsg_m.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_mobility_8cc.html</anchorfile>
      <anchor>a1bc235751df246807bf46bb477c2143f</anchor>
      <arglist>(BaseMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseMobility.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_mobility_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="_move_8h" name="Move.h" local="yes" imported="no">Move.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <class kind="class">BaseMobility</class>
  </compound>
  <compound kind="file">
    <name>BaseModule.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_module_8cc</filename>
    <includes id="_base_module_8h" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseModule.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_module_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_host_state_8h" name="HostState.h" local="yes" imported="no">HostState.h</includes>
    <class kind="class">BaseModule</class>
    <member kind="define">
      <type>#define</type>
      <name>debugEV_clear</name>
      <anchorfile>_base_module_8h.html</anchorfile>
      <anchor>a796951f07c5764fcd52e9abd0b5deb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>_base_module_8h.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>coreEV_clear</name>
      <anchorfile>_base_module_8h.html</anchorfile>
      <anchor>adba225dfeaaba955392001ec4f3401a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>coreEV</name>
      <anchorfile>_base_module_8h.html</anchorfile>
      <anchor>a27f667d27591f62ecf86a99a79ea8f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_base_phy_layer_8cc</filename>
    <includes id="_base_phy_layer_8h" name="BasePhyLayer.h" local="yes" imported="no">BasePhyLayer.h</includes>
    <includes id="_mac_to_phy_control_info_8h" name="MacToPhyControlInfo.h" local="yes" imported="no">MacToPhyControlInfo.h</includes>
    <includes id="_phy_to_mac_control_info_8h" name="PhyToMacControlInfo.h" local="yes" imported="no">PhyToMacControlInfo.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">Decider.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_phy_layer_8cc.html</anchorfile>
      <anchor>a4532f68b81888efac03a569bc88db971</anchor>
      <arglist>(BasePhyLayer)</arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>NoMobiltyPos</name>
      <anchorfile>_base_phy_layer_8cc.html</anchorfile>
      <anchor>a3b33055234260612784d5d3792a1d7da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePhyLayer.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_base_phy_layer_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">base/connectionManager/ChannelAccess.h</includes>
    <includes id="_decider_to_phy_interface_8h" name="DeciderToPhyInterface.h" local="yes" imported="no">DeciderToPhyInterface.h</includes>
    <includes id="_mac_to_phy_interface_8h" name="MacToPhyInterface.h" local="yes" imported="no">MacToPhyInterface.h</includes>
    <includes id="_channel_info_8h" name="ChannelInfo.h" local="yes" imported="no">ChannelInfo.h</includes>
    <class kind="class">BasePhyLayer</class>
  </compound>
  <compound kind="file">
    <name>BaseWaveApplLayer.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/ieee80211p/</path>
    <filename>_base_wave_appl_layer_8cc</filename>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseWaveApplLayer.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/ieee80211p/</path>
    <filename>_base_wave_appl_layer_8h</filename>
    <includes id="_base_appl_layer_8h" name="BaseApplLayer.h" local="no" imported="no">BaseApplLayer.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="no" imported="no">Consts80211p.h</includes>
    <includes id="_wave_short_message__m_8h" name="WaveShortMessage_m.h" local="no" imported="no">WaveShortMessage_m.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">base/connectionManager/ChannelAccess.h</includes>
    <includes id="_wave_app_to_mac1609__4_interface_8h" name="WaveAppToMac1609_4Interface.h" local="no" imported="no">WaveAppToMac1609_4Interface.h</includes>
    <class kind="class">BaseWaveApplLayer</class>
    <member kind="define">
      <type>#define</type>
      <name>BROADCAST</name>
      <anchorfile>_base_wave_appl_layer_8h.html</anchorfile>
      <anchor>ac286e1243ab6be2c950c277e5e1377f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DBG</name>
      <anchorfile>_base_wave_appl_layer_8h.html</anchorfile>
      <anchor>a49606be7356624568932ec81c0d429f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_world_utility_8cc</filename>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_base_world_utility_8cc.html</anchorfile>
      <anchor>a040c09d94eb71afa68e5d70312454ec3</anchor>
      <arglist>(BaseWorldUtility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseWorldUtility.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_base_world_utility_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">BaseWorldUtility</class>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_battery_access_8cc</filename>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>_battery_access_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_base_module_8h" name="BaseModule.h" local="yes" imported="no">BaseModule.h</includes>
    <includes id="_base_battery_8h" name="BaseBattery.h" local="yes" imported="no">BaseBattery.h</includes>
    <class kind="class">Veins::BatteryAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>BorderMsg_m.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/messages/</path>
    <filename>_border_msg__m_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">BorderMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_border_msg__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_border_msg__m_8h.html</anchorfile>
      <anchor>a22d334b7616278a3df52bb1d909385b8</anchor>
      <arglist>(cCommBuffer *b, BorderMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_border_msg__m_8h.html</anchorfile>
      <anchor>af8a744ea926c5d85163001062af00b8f</anchor>
      <arglist>(cCommBuffer *b, BorderMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BreakpointPathlossModel.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_breakpoint_pathloss_model_8cc</filename>
    <includes id="_breakpoint_pathloss_model_8h" name="BreakpointPathlossModel.h" local="yes" imported="no">BreakpointPathlossModel.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>_breakpoint_pathloss_model_8cc.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BreakpointPathlossModel.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_breakpoint_pathloss_model_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <class kind="class">BreakpointPathlossModel</class>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_channel_access_8cc</filename>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">base/connectionManager/ChannelAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelAccess.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_channel_access_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_battery_access_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="yes" imported="no">BaseMobility.h</includes>
    <class kind="class">Veins::ChannelAccess</class>
    <namespace>Veins</namespace>
    <member kind="typedef">
      <type>AccessModuleWrap&lt; BaseMobility &gt;</type>
      <name>ChannelMobilityAccessType</name>
      <anchorfile>_channel_access_8h.html</anchorfile>
      <anchor>ad43d252a035fb04d7edeae30f510a8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelMobilityAccessType::wrapType *</type>
      <name>ChannelMobilityPtrType</name>
      <anchorfile>_channel_access_8h.html</anchorfile>
      <anchor>a9706b5abb35f3e8d5583c9eba6f286e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_channel_info_8cc</filename>
    <includes id="_channel_info_8h" name="ChannelInfo.h" local="yes" imported="no">ChannelInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelInfo.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_channel_info_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <class kind="class">ChannelInfo</class>
    <class kind="class">ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">ChannelInfo::IntersectionIterator</class>
  </compound>
  <compound kind="file">
    <name>ChannelSenseRequest_m.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/messages/</path>
    <filename>_channel_sense_request__m_8h</filename>
    <includes id="_channel_state_8h" name="ChannelState.h" local="yes" imported="no">ChannelState.h</includes>
    <class kind="class">ChannelSenseRequest</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_channel_sense_request__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SenseMode</name>
      <anchorfile>_channel_sense_request__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_IDLE</name>
      <anchorfile>_channel_sense_request__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5fa104e205ceb06dd05f20252442da97f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_BUSY</name>
      <anchorfile>_channel_sense_request__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5fa483617bed0c86dfe6c89bace979c6774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTIL_TIMEOUT</name>
      <anchorfile>_channel_sense_request__m_8h.html</anchorfile>
      <anchor>a0b90c56247d6abd23f8babaa3c467f5faf06f2d91002adf222ab423eec3e45a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_channel_sense_request__m_8h.html</anchorfile>
      <anchor>a2000434ac71682a384856e8f28c660b6</anchor>
      <arglist>(cCommBuffer *b, ChannelSenseRequest &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_channel_sense_request__m_8h.html</anchorfile>
      <anchor>af79196c44695c51ecb2ee8e8a3b8dc6e</anchor>
      <arglist>(cCommBuffer *b, ChannelSenseRequest &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChannelState.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_channel_state_8cc</filename>
    <includes id="_channel_state_8h" name="ChannelState.h" local="yes" imported="no">ChannelState.h</includes>
  </compound>
  <compound kind="file">
    <name>ChannelState.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_channel_state_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <class kind="class">ChannelState</class>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_connection_manager_8cc</filename>
    <includes id="_connection_manager_8h" name="ConnectionManager.h" local="yes" imported="no">ConnectionManager.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ccEV</name>
      <anchorfile>_connection_manager_8cc.html</anchorfile>
      <anchor>a4b2119ae4d85523b374e820916ee091b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_connection_manager_8cc.html</anchorfile>
      <anchor>a7713f40391ce1dfc9b8330a6f4c13f90</anchor>
      <arglist>(ConnectionManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectionManager.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_connection_manager_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <class kind="class">ConnectionManager</class>
  </compound>
  <compound kind="file">
    <name>Consts80211p.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/utility/</path>
    <filename>_consts80211p_8h</filename>
    <namespace>Channels</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ChannelNumber</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CRIT_SOL</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcab12b043ef121a55f7798b8d88f3435ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH1</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca4cd9253ed42cb3f1acfcc858a800bec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH2</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca33e2709732ed8a9d5d26e0671d465dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CCH</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca5b15c7f06aa1608e57faa584bfed0974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH3</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcacde39da5e71b24a5f2930033049547ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH4</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca3f6fadf251397cd3ffe1b485d7f91cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HPPS</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca9719348cf725d818dfdd2f2bdbe849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>t_channel</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>adf9b7633e9be0abbe2a94e0e2b8de074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>type_CCH</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>adf9b7633e9be0abbe2a94e0e2b8de074a1b0214f354aaccb8651c8f6ff9d70a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>type_SCH</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>adf9b7633e9be0abbe2a94e0e2b8de074ae92afaf1085abce97f5950ea2d9f9514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>NUM_BITRATES_80211P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a9e847835119bc119bcd8f511881acfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BITRATES_80211P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>ad7efe05e7712579c09308e0b40f1abf9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>N_DBPS_80211P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a39cc05d8f2f6f6ea50c1b1276d637ad9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>T_SYM_80211P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a4f275fa377c7436a45af7b7740e81d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_TOTAL_LENGTH</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a75705ba4279984f5988a2d8212b65f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PREAMBLE_DURATION</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>ab06ac4fa34e971e108d21a82c513a970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_PLCPSIGNAL_DURATION</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>ad1f3844c5afe572fc3184129aa4804ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_PLCPSIGNAL_LENGTH</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a01440d3776a55604719ceca39dfcc998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHY_HDR_PSDU_HEADER_LENGTH</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a2d3f83aac8c4e34f1120511c1338b20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHY_HDR_BANDWIDTH</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a2336ceaf1e76cee3f17c8368bebe5d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SLOTLENGTH_11P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a57411d164eea157170298f09ff1d38ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SIFS_11P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a5955b96e024a202edb9979d259545ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>RADIODELAY_11P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a0dde96ba4b7be427d0454328da52bdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMIN_11P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a6184b83da22de091e54fb8aaedefde7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>CWMAX_11P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>ab6759d76a19c23aa6d45798752abbf72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>SWITCHING_INTERVAL_11P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>ad3933c8b54b76e8b7f78f12668eb4883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimTime</type>
      <name>GUARD_INTERVAL_11P</name>
      <anchorfile>_consts80211p_8h.html</anchorfile>
      <anchor>a6dece903cd8ff198a8d8188c9a487bce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coord.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/inet/</path>
    <filename>_coord_8cc</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
  </compound>
  <compound kind="file">
    <name>Coord.h</name>
    <path>/media/sda4/prog/veins-3.0/src/inet/</path>
    <filename>_coord_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <class kind="class">Coord</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_coord_8h.html</anchorfile>
      <anchor>a8c1991dbbe58ef68597baf656b5d726e</anchor>
      <arglist>(std::ostream &amp;os, const Coord &amp;coord)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.in.py</name>
    <path>/media/sda4/prog/veins-3.0/src/scripts/</path>
    <filename>debug_8in_8py</filename>
    <namespace>debug</namespace>
    <member kind="function">
      <type>def</type>
      <name>relpath</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>a126e33a9c30781a294de4f7ced8b43a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_libs</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>aa470b527584549f9d1a8306e98b72ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_neds</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>a369de672f620ada372eb34e6e6599d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>lib_flags</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>a0e8cfe6792c7a649455486ffa9488da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>ned_flags</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>af698897781e39e06ce4040bf40e28fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>prefix</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>ae8a882429b0065cf1d46a8985f218025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>cmdline</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>abfa92bec292237ea4cc1df93291db0a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decider.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_decider_8cc</filename>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">Decider.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_decider_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_decider_to_phy_interface_8h" name="DeciderToPhyInterface.h" local="yes" imported="no">DeciderToPhyInterface.h</includes>
    <includes id="_channel_sense_request__m_8h" name="ChannelSenseRequest_m.h" local="yes" imported="no">ChannelSenseRequest_m.h</includes>
    <includes id="_channel_state_8h" name="ChannelState.h" local="yes" imported="no">ChannelState.h</includes>
    <class kind="class">DeciderResult</class>
    <class kind="class">Decider</class>
  </compound>
  <compound kind="file">
    <name>Decider80211p.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_decider80211p_8cc</filename>
    <includes id="_decider80211p_8h" name="Decider80211p.h" local="no" imported="no">Decider80211p.h</includes>
    <includes id="_decider_result80211_8h" name="DeciderResult80211.h" local="no" imported="no">DeciderResult80211.h</includes>
    <includes id="_mac80211_pkt__m_8h" name="Mac80211Pkt_m.h" local="no" imported="no">Mac80211Pkt_m.h</includes>
    <includes id="_signal___8h" name="Signal_.h" local="no" imported="no">Signal_.h</includes>
    <includes id="_air_frame11p__m_8h" name="AirFrame11p_m.h" local="no" imported="no">AirFrame11p_m.h</includes>
  </compound>
  <compound kind="file">
    <name>Decider80211p.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_decider80211p_8h</filename>
    <includes id="_base_decider_8h" name="BaseDecider.h" local="no" imported="no">BaseDecider.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="no" imported="no">Consts80211p.h</includes>
    <includes id="_mac80211p_to_phy11p_interface_8h" name="Mac80211pToPhy11pInterface.h" local="no" imported="no">Mac80211pToPhy11pInterface.h</includes>
    <includes id="_decider80211p_to_phy80211p_interface_8h" name="Decider80211pToPhy80211pInterface.h" local="no" imported="no">Decider80211pToPhy80211pInterface.h</includes>
    <class kind="class">Decider80211p</class>
    <member kind="define">
      <type>#define</type>
      <name>DBG_D11P</name>
      <anchorfile>_decider80211p_8h.html</anchorfile>
      <anchor>a5b7f92e5571f898a742f73f8aa6dbf13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decider80211pToPhy80211pInterface.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_decider80211p_to_phy80211p_interface_8h</filename>
    <class kind="class">Decider80211pToPhy80211pInterface</class>
  </compound>
  <compound kind="file">
    <name>DeciderResult80211.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_decider_result80211_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">Decider.h</includes>
    <class kind="class">DeciderResult80211</class>
  </compound>
  <compound kind="file">
    <name>DeciderToPhyInterface.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_decider_to_phy_interface_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <class kind="class">DeciderToPhyInterface</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>default_veins_TraCI.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/default_veins_TraCI/</path>
    <filename>default__veins___tra_c_i_8cc</filename>
    <includes id="default__veins___tra_c_i_8h" name="default_veins_TraCI.h" local="yes" imported="no">application/default_veins_TraCI/default_veins_TraCI.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>default__veins___tra_c_i_8cc.html</anchorfile>
      <anchor>ac8e3fbca705c8c0029174d626f1c181a</anchor>
      <arglist>(default_veins_TraCI)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_veins_TraCI.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/default_veins_TraCI/</path>
    <filename>default__veins___tra_c_i_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">default_veins_TraCI</class>
    <member kind="define">
      <type>#define</type>
      <name>efault_veins_TraCI_H</name>
      <anchorfile>default__veins___tra_c_i_8h.html</anchorfile>
      <anchor>afe0e1cfe5d9072f737f2e08c2aea4636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_veins_TraCI_RSU.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/default_veins_TraCI/</path>
    <filename>default__veins___tra_c_i___r_s_u_8cc</filename>
    <includes id="default__veins___tra_c_i___r_s_u_8h" name="default_veins_TraCI_RSU.h" local="yes" imported="no">application/default_veins_TraCI/default_veins_TraCI_RSU.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>default__veins___tra_c_i___r_s_u_8cc.html</anchorfile>
      <anchor>a7979c4cfa37930b1a237fd5568229f9c</anchor>
      <arglist>(default_veins_TraCI_RSU)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_veins_TraCI_RSU.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/default_veins_TraCI/</path>
    <filename>default__veins___tra_c_i___r_s_u_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">default_veins_TraCI_RSU</class>
  </compound>
  <compound kind="file">
    <name>default_veins_TraCI_TestApp.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/default_veins_TraCI/</path>
    <filename>default__veins___tra_c_i___test_app_8cc</filename>
    <includes id="asserts_8h" name="asserts.h" local="yes" imported="no">asserts.h</includes>
    <includes id="default__veins___tra_c_i___test_app_8h" name="default_veins_TraCI_TestApp.h" local="yes" imported="no">application/default_veins_TraCI/default_veins_TraCI_TestApp.h</includes>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">mobility/traci/TraCIColor.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>default__veins___tra_c_i___test_app_8cc.html</anchorfile>
      <anchor>ae9e9e2a60e5398beb747399c0d690e87</anchor>
      <arglist>(Veins::default_veins_TraCI_TestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_veins_TraCI_TestApp.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/default_veins_TraCI/</path>
    <filename>default__veins___tra_c_i___test_app_8h</filename>
    <includes id="_base_appl_layer_8h" name="BaseApplLayer.h" local="yes" imported="no">BaseApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">Veins::default_veins_TraCI_TestApp</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>epidemic.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/epidemic/</path>
    <filename>epidemic_8cc</filename>
    <includes id="epidemic_8h" name="epidemic.h" local="yes" imported="no">application/epidemic/epidemic.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>epidemic_8cc.html</anchorfile>
      <anchor>a3e568119e449d75a82a34815e8e7c834</anchor>
      <arglist>(epidemic)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>epidemic.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/epidemic/</path>
    <filename>epidemic_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">epidemic</class>
  </compound>
  <compound kind="file">
    <name>epidemic_app.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/epidemic/</path>
    <filename>epidemic__app_8cc</filename>
    <includes id="asserts_8h" name="asserts.h" local="yes" imported="no">asserts.h</includes>
    <includes id="epidemic__app_8h" name="epidemic_app.h" local="yes" imported="no">application/epidemic/epidemic_app.h</includes>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">mobility/traci/TraCIColor.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>epidemic__app_8cc.html</anchorfile>
      <anchor>afb6b00a8ade834561aa494da6006dab6</anchor>
      <arglist>(Veins::epidemic_app)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>epidemic_app.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/epidemic/</path>
    <filename>epidemic__app_8h</filename>
    <includes id="_base_appl_layer_8h" name="BaseApplLayer.h" local="yes" imported="no">BaseApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">Veins::epidemic_app</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>epidemic_rsu.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/epidemic/</path>
    <filename>epidemic__rsu_8cc</filename>
    <includes id="epidemic__rsu_8h" name="epidemic_rsu.h" local="yes" imported="no">application/epidemic/epidemic_rsu.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>epidemic__rsu_8cc.html</anchorfile>
      <anchor>a087b470a701e5b2eabe5c39120d6a759</anchor>
      <arglist>(epidemic_rsu)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>epidemic_rsu.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/epidemic/</path>
    <filename>epidemic__rsu_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">epidemic_rsu</class>
  </compound>
  <compound kind="file">
    <name>FindModule.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_find_module_8h</filename>
    <class kind="class">FindModule</class>
    <class kind="class">AccessModuleWrap</class>
  </compound>
  <compound kind="file">
    <name>FWMath.h</name>
    <path>/media/sda4/prog/veins-3.0/src/inet/</path>
    <filename>_f_w_math_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <class kind="class">FWMath</class>
    <member kind="define">
      <type>#define</type>
      <name>M_E</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a9bf5d952c5c93c70f9e66c9794d406c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LOG2E</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>ac5c747ee5bcbe892875672a0b9d8171c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LOG10E</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a9ed2b5582226f3896424ff6d2a3ebb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LN2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a92428112a5d24721208748774a4f23e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_LN10</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a0a53871497a155afe91424c28a8ec3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI_2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a958e4508ed28ee5cc04249144312c15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_PI_4</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>aeb24420b096a677f3a2dc5a72b36bf22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_1_PI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a08dfac3cca9601a02fc88356cc078e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_2_PI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a97f6d6514d3d3dd50c3a2a6d622673db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_2_SQRTPI</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a631ff334c4a1a6db2e8a7ff4acbe48a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_SQRT2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a66b3ab30f1332874326ed93969e496e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>M_SQRT1_2</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>acdbb2c2f9429f08916f03c8786d2d2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPSILON</name>
      <anchorfile>_f_w_math_8h.html</anchorfile>
      <anchor>a002b2f4894492820fe708b1b7e7c5e70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HostState.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_host_state_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <class kind="class">HostState</class>
  </compound>
  <compound kind="file">
    <name>index.h</name>
    <path>/media/sda4/prog/veins-3.0/src/</path>
    <filename>index_8h</filename>
  </compound>
  <compound kind="file">
    <name>Interpolation.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_interpolation_8h</filename>
    <class kind="class">Interpolated</class>
    <class kind="class">PairLess</class>
    <class kind="class">InterpolatorBase</class>
    <class kind="class">NextSmaller</class>
    <class kind="class">Nearest</class>
    <class kind="class">Linear</class>
    <class kind="class">ConstInterpolateableIterator</class>
    <class kind="class">InterpolateableIterator</class>
    <class kind="class">InterpolateableMap</class>
    <member kind="function">
      <type>TTo</type>
      <name>cast_it</name>
      <anchorfile>_interpolation_8h.html</anchorfile>
      <anchor>aacba495129ae31f1f99257d9684e15d6</anchor>
      <arglist>(TFrom rValToCast)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cast_it</name>
      <anchorfile>_interpolation_8h.html</anchorfile>
      <anchor>aeee3c36671ca4ce2a8758dc6b965f4f1</anchor>
      <arglist>(T rValToCast)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cast_it</name>
      <anchorfile>_interpolation_8h.html</anchorfile>
      <anchor>aea316e2fa002f18bdba41db169b7b11b</anchor>
      <arglist>(simtime_t rValToCast)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JakesFading.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_jakes_fading_8cc</filename>
    <includes id="_jakes_fading_8h" name="JakesFading.h" local="yes" imported="no">JakesFading.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">base/connectionManager/ChannelAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>JakesFading.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_jakes_fading_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <class kind="class">JakesFadingMapping</class>
    <class kind="class">JakesFading</class>
  </compound>
  <compound kind="file">
    <name>LogNormalShadowing.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_log_normal_shadowing_8cc</filename>
    <includes id="_log_normal_shadowing_8h" name="LogNormalShadowing.h" local="yes" imported="no">LogNormalShadowing.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>LogNormalShadowing.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_log_normal_shadowing_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <class kind="class">LogNormalShadowing</class>
  </compound>
  <compound kind="file">
    <name>Mac1609_4.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mac/ieee80211p/</path>
    <filename>_mac1609__4_8cc</filename>
    <includes id="_mac1609__4_8h" name="Mac1609_4.h" local="yes" imported="no">Mac1609_4.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DBG_MAC</name>
      <anchorfile>_mac1609__4_8cc.html</anchorfile>
      <anchor>ace1894472dc5e8160edbe7db7adffc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_mac1609__4_8cc.html</anchorfile>
      <anchor>a0559bab8a6211b4285e66873b447df1b</anchor>
      <arglist>(Mac1609_4)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac1609_4.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mac/ieee80211p/</path>
    <filename>_mac1609__4_8h</filename>
    <includes id="_base_layer_8h" name="BaseLayer.h" local="no" imported="no">BaseLayer.h</includes>
    <includes id="_mac_to_phy_control_info_8h" name="MacToPhyControlInfo.h" local="no" imported="no">MacToPhyControlInfo.h</includes>
    <includes id="_phy_layer80211p_8h" name="PhyLayer80211p.h" local="no" imported="no">PhyLayer80211p.h</includes>
    <includes id="_wave_app_to_mac1609__4_interface_8h" name="WaveAppToMac1609_4Interface.h" local="no" imported="no">WaveAppToMac1609_4Interface.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="no" imported="no">Consts80211p.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_mac80211_pkt__m_8h" name="Mac80211Pkt_m.h" local="no" imported="no">Mac80211Pkt_m.h</includes>
    <includes id="_wave_short_message__m_8h" name="WaveShortMessage_m.h" local="no" imported="no">WaveShortMessage_m.h</includes>
    <includes id="_base_mac_layer_8h" name="BaseMacLayer.h" local="no" imported="no">BaseMacLayer.h</includes>
    <class kind="class">Mac1609_4</class>
    <class kind="class">Mac1609_4::EDCA</class>
    <class kind="class">Mac1609_4::EDCA::EDCAQueue</class>
  </compound>
  <compound kind="file">
    <name>Mac80211Pkt_m.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/messages/</path>
    <filename>_mac80211_pkt__m_8h</filename>
    <includes id="_mac_pkt__m_8h" name="MacPkt_m.h" local="yes" imported="no">MacPkt_m.h</includes>
    <class kind="class">Mac80211Pkt</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_mac80211_pkt__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_mac80211_pkt__m_8h.html</anchorfile>
      <anchor>a3636b139d0b4cc3ebd195a2f1f43a065</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_mac80211_pkt__m_8h.html</anchorfile>
      <anchor>afd4838fe235bac3190a45d54f5efd986</anchor>
      <arglist>(cCommBuffer *b, Mac80211Pkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mac80211pToPhy11pInterface.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mac/ieee80211p/</path>
    <filename>_mac80211p_to_phy11p_interface_8h</filename>
    <includes id="_mac_to_phy_interface_8h" name="MacToPhyInterface.h" local="no" imported="no">MacToPhyInterface.h</includes>
    <class kind="class">Mac80211pToPhy11pInterface</class>
  </compound>
  <compound kind="file">
    <name>MacPkt_m.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/messages/</path>
    <filename>_mac_pkt__m_8h</filename>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <class kind="class">MacPkt</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_mac_pkt__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_mac_pkt__m_8h.html</anchorfile>
      <anchor>a6e80fe061f237f06d3061c1dff3636c7</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_mac_pkt__m_8h.html</anchorfile>
      <anchor>a6956d0946b0b1b7f8a570be8edd08551</anchor>
      <arglist>(cCommBuffer *b, MacPkt &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MacToNetwControlInfo.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_mac_to_netw_control_info_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <class kind="class">MacToNetwControlInfo</class>
  </compound>
  <compound kind="file">
    <name>MacToPhyControlInfo.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_mac_to_phy_control_info_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_signal___8h" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <class kind="class">MacToPhyControlInfo</class>
  </compound>
  <compound kind="file">
    <name>MacToPhyInterface.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_mac_to_phy_interface_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_signal___8h" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
    <includes id="_channel_state_8h" name="ChannelState.h" local="yes" imported="no">ChannelState.h</includes>
    <includes id="_phy_utils_8h" name="PhyUtils.h" local="yes" imported="no">PhyUtils.h</includes>
    <class kind="class">MacToPhyInterface</class>
  </compound>
  <compound kind="file">
    <name>Mapping.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_mapping_8h</filename>
    <includes id="_mapping_base_8h" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
    <includes id="_mapping_utils_8h" name="MappingUtils.h" local="yes" imported="no">MappingUtils.h</includes>
  </compound>
  <compound kind="file">
    <name>MappingBase.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_mapping_base_8cc</filename>
    <includes id="_mapping_base_8h" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
  </compound>
  <compound kind="file">
    <name>MappingBase.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_mapping_base_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_interpolation_8h" name="Interpolation.h" local="yes" imported="no">Interpolation.h</includes>
    <class kind="class">Dimension</class>
    <class kind="class">DimensionSet</class>
    <class kind="class">Argument</class>
    <class kind="class">Argument::key_iterator</class>
    <class kind="class">NoNextIteratorException</class>
    <class kind="class">ConstMappingIterator</class>
    <class kind="struct">mixim::math::mW2dBm</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, false &gt;</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, true &gt;</class>
    <class kind="class">ConstMapping</class>
    <class kind="class">MappingIterator</class>
    <class kind="class">Mapping</class>
    <class kind="class">SimpleConstMappingIterator</class>
    <class kind="class">SimpleConstMapping</class>
    <namespace>mixim</namespace>
    <namespace>mixim::math</namespace>
  </compound>
  <compound kind="file">
    <name>MappingUtils.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_mapping_utils_8cc</filename>
    <includes id="_mapping_utils_8h" name="MappingUtils.h" local="yes" imported="no">MappingUtils.h</includes>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator*</name>
      <anchorfile>_mapping_utils_8cc.html</anchorfile>
      <anchor>ae96e8b4471b28153196ae43af2471878</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator/</name>
      <anchorfile>_mapping_utils_8cc.html</anchorfile>
      <anchor>a16eb83f49b6fed502b242fd0174d54de</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator+</name>
      <anchorfile>_mapping_utils_8cc.html</anchorfile>
      <anchor>a561d5cc659fda6240220623c149ea994</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>operator-</name>
      <anchorfile>_mapping_utils_8cc.html</anchorfile>
      <anchor>a59113e9a1d0b73e0fbd033356d2359fb</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MappingUtils.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_mapping_utils_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_mapping_base_8h" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
    <class kind="class">BaseFilteredIterator</class>
    <class kind="class">FilteredMappingIterator</class>
    <class kind="class">TimeMappingIterator</class>
    <class kind="class">TimeMapping</class>
    <class kind="class">LinearIntplMappingIterator</class>
    <class kind="class">LinearIntplMapping</class>
    <class kind="class">Interpolated&lt; Mapping * &gt;</class>
    <class kind="class">Linear&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</class>
    <class kind="class">ConstantSimpleConstMapping</class>
    <class kind="class">ConstMappingIteratorWrapper</class>
    <class kind="class">ConstMappingWrapper</class>
    <class kind="class">MultiDimMapping</class>
    <class kind="class">MultiDimMappingIterator</class>
    <class kind="class">MultiDimMapping</class>
    <class kind="class">FilledUpMappingIterator</class>
    <class kind="class">FilledUpMapping</class>
    <class kind="class">MappingUtils</class>
    <class kind="class">ConcatConstMappingIterator</class>
    <class kind="class">ConcatConstMapping</class>
    <class kind="class">BaseDelayedIterator</class>
    <class kind="class">BaseDelayedMapping</class>
    <class kind="class">ConstDelayedMapping</class>
    <class kind="class">DelayedMapping</class>
    <member kind="typedef">
      <type>BaseFilteredIterator&lt; ConstMappingIterator &gt;</type>
      <name>FilteredConstMappingIterator</name>
      <anchorfile>_mapping_utils_8h.html</anchorfile>
      <anchor>aa645dfa599e41183c494290d0abba30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredConstMappingIterator, ConstMappingIterator &gt;</type>
      <name>ConstDelayedMappingIterator</name>
      <anchorfile>_mapping_utils_8h.html</anchorfile>
      <anchor>a65c3da57807297c8c20a24d18e142051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredMappingIterator, MappingIterator &gt;</type>
      <name>DelayedMappingIterator</name>
      <anchorfile>_mapping_utils_8h.html</anchorfile>
      <anchor>af6d7bb3c43fe0bda97133e548ce327c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator*</name>
      <anchorfile>_mapping_utils_8h.html</anchorfile>
      <anchor>aed8e21a598d720afebf9ac5b21ef419f</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator/</name>
      <anchorfile>_mapping_utils_8h.html</anchorfile>
      <anchor>a4dd8d69004180c73deb537f4f7fb85a0</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator+</name>
      <anchorfile>_mapping_utils_8h.html</anchorfile>
      <anchor>a689351b9381f651d0d85666721171e99</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>MIXIM_API Mapping *</type>
      <name>operator-</name>
      <anchorfile>_mapping_utils_8h.html</anchorfile>
      <anchor>a2db200226d07eef6670f7c4c3fb9e99b</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memcheck.in.py</name>
    <path>/media/sda4/prog/veins-3.0/src/scripts/</path>
    <filename>memcheck_8in_8py</filename>
    <namespace>memcheck</namespace>
    <member kind="function">
      <type>def</type>
      <name>relpath</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>abc9f2bd47bf277d872336feb8c3237f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_libs</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>abef10f5e361e62ca2831502fa3c11c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_neds</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>ad357faeb491d822d6d926a1c4391864e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>lib_flags</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a65bd66a14457c4a3c219e0632e767e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>ned_flags</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a7bc865603d5f94ced762580c5a600f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>prefix</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a3835c890fcbd0ad82917950824eafa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>cmdline</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a971d739c77ea348507b183cf26ee1752</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mfcv.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/mfcv/</path>
    <filename>mfcv_8cc</filename>
    <includes id="mfcv_8h" name="mfcv.h" local="yes" imported="no">application/mfcv/mfcv.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>mfcv_8cc.html</anchorfile>
      <anchor>a5fec3d6edd63368ecd59432ecbcf2747</anchor>
      <arglist>(mfcv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mfcv.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/mfcv/</path>
    <filename>mfcv_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">mfcv</class>
  </compound>
  <compound kind="file">
    <name>mfcv_rsu.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/mfcv/</path>
    <filename>mfcv__rsu_8cc</filename>
    <includes id="mfcv__rsu_8h" name="mfcv_rsu.h" local="yes" imported="no">application/mfcv/mfcv_rsu.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>mfcv__rsu_8cc.html</anchorfile>
      <anchor>a9ac8d5f57306b7e7d3beadf5c6d89bd5</anchor>
      <arglist>(mfcv_rsu)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mfcv_rsu.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/mfcv/</path>
    <filename>mfcv__rsu_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">mfcv_rsu</class>
  </compound>
  <compound kind="file">
    <name>minicurso_UFPI_TraCI.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/minicurso_UFPI_TraCI/</path>
    <filename>minicurso___u_f_p_i___tra_c_i_8cc</filename>
    <includes id="minicurso___u_f_p_i___tra_c_i_8h" name="minicurso_UFPI_TraCI.h" local="yes" imported="no">application/minicurso_UFPI_TraCI/minicurso_UFPI_TraCI.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>minicurso___u_f_p_i___tra_c_i_8cc.html</anchorfile>
      <anchor>ab4238b375ae0a51258bb0adefd1ce6b9</anchor>
      <arglist>(minicurso_UFPI_TraCI)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>minicurso_UFPI_TraCI.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/minicurso_UFPI_TraCI/</path>
    <filename>minicurso___u_f_p_i___tra_c_i_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">minicurso_UFPI_TraCI</class>
  </compound>
  <compound kind="file">
    <name>minicurso_UFPI_TraCI_RSU.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/minicurso_UFPI_TraCI/</path>
    <filename>minicurso___u_f_p_i___tra_c_i___r_s_u_8cc</filename>
    <includes id="minicurso___u_f_p_i___tra_c_i___r_s_u_8h" name="minicurso_UFPI_TraCI_RSU.h" local="yes" imported="no">application/minicurso_UFPI_TraCI/minicurso_UFPI_TraCI_RSU.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>minicurso___u_f_p_i___tra_c_i___r_s_u_8cc.html</anchorfile>
      <anchor>acb0203af77c397997b1ab59c1fc520f6</anchor>
      <arglist>(minicurso_UFPI_TraCI_RSU)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>minicurso_UFPI_TraCI_RSU.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/minicurso_UFPI_TraCI/</path>
    <filename>minicurso___u_f_p_i___tra_c_i___r_s_u_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">minicurso_UFPI_TraCI_RSU</class>
  </compound>
  <compound kind="file">
    <name>minicurso_UFPI_TraCI_TestApp.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/minicurso_UFPI_TraCI/</path>
    <filename>minicurso___u_f_p_i___tra_c_i___test_app_8cc</filename>
    <includes id="asserts_8h" name="asserts.h" local="yes" imported="no">asserts.h</includes>
    <includes id="minicurso___u_f_p_i___tra_c_i___test_app_8h" name="minicurso_UFPI_TraCI_TestApp.h" local="yes" imported="no">application/minicurso_UFPI_TraCI/minicurso_UFPI_TraCI_TestApp.h</includes>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">mobility/traci/TraCIColor.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>minicurso___u_f_p_i___tra_c_i___test_app_8cc.html</anchorfile>
      <anchor>ac50b8d98eaa87618346f264576b90c09</anchor>
      <arglist>(Veins::minicurso_UFPI_TraCI_TestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>minicurso_UFPI_TraCI_TestApp.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/minicurso_UFPI_TraCI/</path>
    <filename>minicurso___u_f_p_i___tra_c_i___test_app_8h</filename>
    <includes id="_base_appl_layer_8h" name="BaseApplLayer.h" local="yes" imported="no">BaseApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">Veins::minicurso_UFPI_TraCI_TestApp</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>MiXiMDefs.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_mi_xi_m_defs_8h</filename>
    <includes id="miximkerneldefs_8h" name="miximkerneldefs.h" local="yes" imported="no">miximkerneldefs.h</includes>
    <class kind="class">simsignalwrap_t</class>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_API</name>
      <anchorfile>_mi_xi_m_defs_8h.html</anchorfile>
      <anchor>aa9f7e3adba6f75276614400a8ebbedd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>miximkerneldefs.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>miximkerneldefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_VERSION</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a7ba1ea0c3476b05a9e1f8fe56cc3f958</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_PACKET_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>ad6bd863f498a055ad7936e8606f52456</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_UWBIRPACKET_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>aabad51446826904506303465155af970</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_DROPPEDPACKET_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>aad55d45b2982ce696ce5dc1692690627</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_PASSEDMSG_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>ae77f3d9270863d9320e03453f8b05724</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_HOSTSTATE_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a3ec3b1ea6bc9444723e83dd40ec0e3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_MOBILITY_CHANGE_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>ae69fff18982d6706f61a783d2c76e3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_BATTERY_CHANGE_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a96f94c37521741f38fd049c30ddf9817</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXIM_SIGNAL_MOBANMSG_NAME</name>
      <anchorfile>miximkerneldefs_8h.html</anchorfile>
      <anchor>a7483fc5c00a5a73c605d34fc48202a47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Move.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_move_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="_f_w_math_8h" name="FWMath.h" local="yes" imported="no">FWMath.h</includes>
    <class kind="class">Move</class>
  </compound>
  <compound kind="file">
    <name>NetwToMacControlInfo.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_netw_to_mac_control_info_8cc</filename>
    <includes id="_netw_to_mac_control_info_8h" name="NetwToMacControlInfo.h" local="yes" imported="no">NetwToMacControlInfo.h</includes>
    <member kind="typedef">
      <type>NetwToMacControlInfo</type>
      <name>tNetwToMacControlInfoBase</name>
      <anchorfile>_netw_to_mac_control_info_8cc.html</anchorfile>
      <anchor>acf80fe272569db4f5ebc3b1044996d5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NetwToMacControlInfo.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_netw_to_mac_control_info_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
    <class kind="class">NetwToMacControlInfo</class>
  </compound>
  <compound kind="file">
    <name>NicEntry.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_nic_entry_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">NicEntry</class>
    <class kind="class">NicEntry::NicEntryComparator</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_nic_entry_debug_8cc</filename>
    <includes id="_nic_entry_debug_8h" name="NicEntryDebug.h" local="yes" imported="no">NicEntryDebug.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">base/connectionManager/ChannelAccess.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>nicEV</name>
      <anchorfile>_nic_entry_debug_8cc.html</anchorfile>
      <anchor>a086d1da3fccd71d29bb48aa11e524977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicEntryDebug.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_nic_entry_debug_8h</filename>
    <includes id="_nic_entry_8h" name="NicEntry.h" local="yes" imported="no">NicEntry.h</includes>
    <class kind="class">NicEntryDebug</class>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_nic_entry_direct_8cc</filename>
    <includes id="_nic_entry_direct_8h" name="NicEntryDirect.h" local="yes" imported="no">NicEntryDirect.h</includes>
    <includes id="_channel_access_8h" name="ChannelAccess.h" local="yes" imported="no">base/connectionManager/ChannelAccess.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>nicEV</name>
      <anchorfile>_nic_entry_direct_8cc.html</anchorfile>
      <anchor>a086d1da3fccd71d29bb48aa11e524977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicEntryDirect.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>_nic_entry_direct_8h</filename>
    <includes id="_nic_entry_8h" name="NicEntry.h" local="yes" imported="no">NicEntry.h</includes>
    <class kind="class">NicEntryDirect</class>
  </compound>
  <compound kind="file">
    <name>Obstacle.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/obstacle/</path>
    <filename>_obstacle_8cc</filename>
    <includes id="_obstacle_8h" name="Obstacle.h" local="yes" imported="no">modules/obstacle/Obstacle.h</includes>
  </compound>
  <compound kind="file">
    <name>Obstacle.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/obstacle/</path>
    <filename>_obstacle_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">Veins::Obstacle</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>ObstacleControl.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/obstacle/</path>
    <filename>_obstacle_control_8cc</filename>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">modules/obstacle/ObstacleControl.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_obstacle_control_8cc.html</anchorfile>
      <anchor>ac2ede00c414fc755fe96265836a8029c</anchor>
      <arglist>(Veins::ObstacleControl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObstacleControl.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/obstacle/</path>
    <filename>_obstacle_control_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="_obstacle_8h" name="Obstacle.h" local="yes" imported="no">modules/obstacle/Obstacle.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">Veins::ObstacleControl</class>
    <class kind="struct">Veins::ObstacleControl::CacheKey</class>
    <class kind="class">Veins::ObstacleControlAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>osdp.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/osdp/</path>
    <filename>osdp_8cc</filename>
    <includes id="osdp_8h" name="osdp.h" local="yes" imported="no">application/osdp/osdp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>osdp_8cc.html</anchorfile>
      <anchor>ac6a685548369487ae594e7661c04100f</anchor>
      <arglist>(osdp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>osdp.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/osdp/</path>
    <filename>osdp_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <class kind="class">osdp</class>
  </compound>
  <compound kind="file">
    <name>osdp_RSU.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/osdp/</path>
    <filename>osdp___r_s_u_8cc</filename>
    <includes id="osdp___r_s_u_8h" name="osdp_RSU.h" local="yes" imported="no">application/osdp/osdp_RSU.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>osdp___r_s_u_8cc.html</anchorfile>
      <anchor>ac633ce4c6e23e43577fe714da3be8af7</anchor>
      <arglist>(osdp_RSU)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>osdp_RSU.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/osdp/</path>
    <filename>osdp___r_s_u_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">osdp_RSU</class>
  </compound>
  <compound kind="file">
    <name>PassedMessage.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_passed_message_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <class kind="class">PassedMessage</class>
  </compound>
  <compound kind="file">
    <name>PERModel.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_p_e_r_model_8cc</filename>
    <includes id="_p_e_r_model_8h" name="PERModel.h" local="yes" imported="no">PERModel.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>PERModel.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_p_e_r_model_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <class kind="class">PERModel</class>
  </compound>
  <compound kind="file">
    <name>PhyLayer80211p.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_phy_layer80211p_8cc</filename>
    <includes id="_phy_layer80211p_8h" name="PhyLayer80211p.h" local="yes" imported="no">PhyLayer80211p.h</includes>
    <includes id="_decider80211p_8h" name="Decider80211p.h" local="yes" imported="no">Decider80211p.h</includes>
    <includes id="_simple_pathloss_model_8h" name="SimplePathlossModel.h" local="yes" imported="no">SimplePathlossModel.h</includes>
    <includes id="_breakpoint_pathloss_model_8h" name="BreakpointPathlossModel.h" local="yes" imported="no">BreakpointPathlossModel.h</includes>
    <includes id="_log_normal_shadowing_8h" name="LogNormalShadowing.h" local="yes" imported="no">LogNormalShadowing.h</includes>
    <includes id="_jakes_fading_8h" name="JakesFading.h" local="yes" imported="no">JakesFading.h</includes>
    <includes id="_p_e_r_model_8h" name="PERModel.h" local="yes" imported="no">PERModel.h</includes>
    <includes id="_simple_obstacle_shadowing_8h" name="SimpleObstacleShadowing.h" local="yes" imported="no">SimpleObstacleShadowing.h</includes>
    <includes id="_two_ray_interference_model_8h" name="TwoRayInterferenceModel.h" local="yes" imported="no">TwoRayInterferenceModel.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="no" imported="no">Consts80211p.h</includes>
    <includes id="_air_frame11p__m_8h" name="AirFrame11p_m.h" local="yes" imported="no">AirFrame11p_m.h</includes>
    <includes id="_mac_to_phy_control_info_8h" name="MacToPhyControlInfo.h" local="yes" imported="no">MacToPhyControlInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_phy_layer80211p_8cc.html</anchorfile>
      <anchor>a81dd20c566964352e521b615a54b29cb</anchor>
      <arglist>(PhyLayer80211p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyLayer80211p.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_phy_layer80211p_8h</filename>
    <includes id="_base_phy_layer_8h" name="BasePhyLayer.h" local="no" imported="no">BasePhyLayer.h</includes>
    <includes id="_mac80211p_to_phy11p_interface_8h" name="Mac80211pToPhy11pInterface.h" local="yes" imported="no">Mac80211pToPhy11pInterface.h</includes>
    <includes id="_decider80211p_8h" name="Decider80211p.h" local="no" imported="no">Decider80211p.h</includes>
    <includes id="_simple_pathloss_model_8h" name="SimplePathlossModel.h" local="no" imported="no">SimplePathlossModel.h</includes>
    <includes id="_log_normal_shadowing_8h" name="LogNormalShadowing.h" local="no" imported="no">LogNormalShadowing.h</includes>
    <includes id="_s_n_r_threshold_decider_8h" name="SNRThresholdDecider.h" local="no" imported="no">SNRThresholdDecider.h</includes>
    <includes id="_jakes_fading_8h" name="JakesFading.h" local="no" imported="no">JakesFading.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="no" imported="no">BaseConnectionManager.h</includes>
    <includes id="_decider80211p_to_phy80211p_interface_8h" name="Decider80211pToPhy80211pInterface.h" local="yes" imported="no">Decider80211pToPhy80211pInterface.h</includes>
    <includes id="_move_8h" name="Move.h" local="no" imported="no">Move.h</includes>
    <class kind="class">PhyLayer80211p</class>
    <member kind="define">
      <type>#define</type>
      <name>DBG</name>
      <anchorfile>_phy_layer80211p_8h.html</anchorfile>
      <anchor>a49606be7356624568932ec81c0d429f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhyToMacControlInfo.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_phy_to_mac_control_info_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_decider_8h" name="Decider.h" local="yes" imported="no">Decider.h</includes>
    <class kind="class">PhyToMacControlInfo</class>
  </compound>
  <compound kind="file">
    <name>PhyUtils.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_phy_utils_8cc</filename>
    <includes id="_phy_utils_8h" name="PhyUtils.h" local="yes" imported="no">PhyUtils.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
  </compound>
  <compound kind="file">
    <name>PhyUtils.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_phy_utils_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <class kind="class">RadioStateAnalogueModel</class>
    <class kind="class">RadioStateAnalogueModel::ListEntry</class>
    <class kind="class">Veins::Radio</class>
    <class kind="class">RSAMConstMappingIterator</class>
    <class kind="class">RSAMMapping</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>run.in.py</name>
    <path>/media/sda4/prog/veins-3.0/src/scripts/</path>
    <filename>run_8in_8py</filename>
    <namespace>run</namespace>
    <member kind="function">
      <type>def</type>
      <name>relpath</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a5513d7aa204a0d2ed348e77a0e03513c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_libs</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>aa8897745da4c05b633810e1dc845e672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_neds</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a05378980682b60afac8590a283d4185e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>lib_flags</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a2ef50300891f044e6c027e57d86b545a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>ned_flags</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a6fedc5b0702a7c39a6c8fbd72a99aa3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>prefix</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>aa2810c9ec946e64b87771a4a41d8c663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>cmdline</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a697c418a3e1daa658006c983de333de6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>service_discovery.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/service_discovery/</path>
    <filename>service__discovery_8cc</filename>
    <includes id="service__discovery_8h" name="service_discovery.h" local="yes" imported="no">application/service_discovery/service_discovery.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>service__discovery_8cc.html</anchorfile>
      <anchor>aa2ad1fa4720ea9789bc25eaa57236ef5</anchor>
      <arglist>(service_discovery)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>service_discovery.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/service_discovery/</path>
    <filename>service__discovery_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">modules/mobility/traci/TraCICommandInterface.h</includes>
    <class kind="class">service_discovery</class>
  </compound>
  <compound kind="file">
    <name>service_discovery_RSU.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/service_discovery/</path>
    <filename>service__discovery___r_s_u_8cc</filename>
    <includes id="service__discovery___r_s_u_8h" name="service_discovery_RSU.h" local="yes" imported="no">application/service_discovery/service_discovery_RSU.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>service__discovery___r_s_u_8cc.html</anchorfile>
      <anchor>a0d5927f4967444534e815c00d7665b70</anchor>
      <arglist>(service_discovery_RSU)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>service_discovery_RSU.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/service_discovery/</path>
    <filename>service__discovery___r_s_u_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">service_discovery_RSU</class>
  </compound>
  <compound kind="file">
    <name>Signal.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_signal_8cc</filename>
    <includes id="_signal___8h" name="Signal_.h" local="yes" imported="no">Signal_.h</includes>
  </compound>
  <compound kind="file">
    <name>Signal_.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>_signal___8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <class kind="class">Signal</class>
  </compound>
  <compound kind="file">
    <name>SimpleAddress.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_simple_address_8cc</filename>
    <includes id="_simple_address_8h" name="SimpleAddress.h" local="yes" imported="no">SimpleAddress.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleAddress.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>_simple_address_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <class kind="class">LAddress</class>
  </compound>
  <compound kind="file">
    <name>SimpleObstacleShadowing.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_simple_obstacle_shadowing_8cc</filename>
    <includes id="_simple_obstacle_shadowing_8h" name="SimpleObstacleShadowing.h" local="yes" imported="no">SimpleObstacleShadowing.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>_simple_obstacle_shadowing_8cc.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleObstacleShadowing.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_simple_obstacle_shadowing_8h</filename>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">modules/obstacle/ObstacleControl.h</includes>
    <includes id="_move_8h" name="Move.h" local="no" imported="no">Move.h</includes>
    <includes id="_signal___8h" name="Signal_.h" local="no" imported="no">Signal_.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <class kind="class">SimpleObstacleShadowing</class>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_simple_pathloss_model_8cc</filename>
    <includes id="_simple_pathloss_model_8h" name="SimplePathlossModel.h" local="yes" imported="no">SimplePathlossModel.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>splmEV</name>
      <anchorfile>_simple_pathloss_model_8cc.html</anchorfile>
      <anchor>a8e82343f744a3001e77dd476bd4177ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimplePathlossModel.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_simple_pathloss_model_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <class kind="class">SimplePathlossConstMapping</class>
    <class kind="class">SimplePathlossModel</class>
  </compound>
  <compound kind="file">
    <name>SNRThresholdDecider.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_s_n_r_threshold_decider_8cc</filename>
    <includes id="_s_n_r_threshold_decider_8h" name="SNRThresholdDecider.h" local="yes" imported="no">SNRThresholdDecider.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <includes id="_mapping_8h" name="Mapping.h" local="yes" imported="no">Mapping.h</includes>
  </compound>
  <compound kind="file">
    <name>SNRThresholdDecider.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>_s_n_r_threshold_decider_8h</filename>
    <includes id="_mi_xi_m_defs_8h" name="MiXiMDefs.h" local="yes" imported="no">MiXiMDefs.h</includes>
    <includes id="_base_decider_8h" name="BaseDecider.h" local="yes" imported="no">BaseDecider.h</includes>
    <class kind="class">SNRThresholdDecider</class>
  </compound>
  <compound kind="file">
    <name>test1.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/test1/</path>
    <filename>test1_8cc</filename>
    <includes id="test1_8h" name="test1.h" local="yes" imported="no">application/test1/test1.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>test1_8cc.html</anchorfile>
      <anchor>aa1df08798d6b3899eee455ed0f950251</anchor>
      <arglist>(test1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test1.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/test1/</path>
    <filename>test1_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">modules/mobility/traci/TraCICommandInterface.h</includes>
    <class kind="class">test1</class>
  </compound>
  <compound kind="file">
    <name>test1_rsu.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/test1/</path>
    <filename>test1__rsu_8cc</filename>
    <includes id="test1__rsu_8h" name="test1_rsu.h" local="yes" imported="no">application/test1/test1_rsu.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>test1__rsu_8cc.html</anchorfile>
      <anchor>aa8da9ee37cac07d607113d55812760b7</anchor>
      <arglist>(test1_rsu)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test1_rsu.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/test1/</path>
    <filename>test1__rsu_8h</filename>
    <includes id="_base_wave_appl_layer_8h" name="BaseWaveApplLayer.h" local="yes" imported="no">BaseWaveApplLayer.h</includes>
    <includes id="_annotation_manager_8h" name="AnnotationManager.h" local="yes" imported="no">modules/world/annotations/AnnotationManager.h</includes>
    <class kind="class">test1_rsu</class>
  </compound>
  <compound kind="file">
    <name>TraCIBuffer.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_buffer_8cc</filename>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">TraCIBuffer.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">TraCIConstants.h</includes>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">TraCICoord.h</includes>
    <namespace>Veins</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a9701754031a4d3de7cc9eeaae1bf9e87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIBuffer.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_buffer_8h</filename>
    <class kind="class">Veins::TraCIBuffer</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIColor.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_color_8cc</filename>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">mobility/traci/TraCIColor.h</includes>
  </compound>
  <compound kind="file">
    <name>TraCIColor.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_color_8h</filename>
    <class kind="class">Veins::TraCIColor</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCICommandInterface.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_command_interface_8cc</filename>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">TraCIBuffer.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_connection_8h" name="TraCIConnection.h" local="yes" imported="no">TraCIConnection.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">TraCIConstants.h</includes>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCICommandInterface.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_command_interface_8h</filename>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">modules/mobility/traci/TraCIColor.h</includes>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">modules/mobility/traci/TraCICoord.h</includes>
    <class kind="class">Veins::TraCICommandInterface</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIConnection.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_connection_8cc</filename>
    <includes id="_tra_c_i_connection_8h" name="TraCIConnection.h" local="yes" imported="no">TraCIConnection.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">TraCIConstants.h</includes>
    <namespace>Veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>_tra_c_i_connection_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>_tra_c_i_connection_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SOCKET</type>
      <name>socket</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a6eeefaf3bbdaff6c10cfcd01200016d3</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeTraCICommand</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>ab52db5bfe6d9095440c0b0ac309bb99d</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIConnection.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_connection_8h</filename>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">modules/mobility/traci/TraCIBuffer.h</includes>
    <class kind="class">Veins::TraCIConnection</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIConstants.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_constants_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TRACI_VERSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a07fa3c69b8577074f150b63432efc227</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GETVERSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8e73707083e5a68828275698eadeab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SIMSTEP2</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>affa501f61facb91d6c42b6ed4b184dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_STOP</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a46dc7ae84992bfe62cc00731959a67f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_RESUME</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad94c1b5ed2f3487c7245445a27fb5912</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGELANE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adf76abeac554994696e6af2df832caac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SLOWDOWN</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a628edc613cc0dc75723a440d4f59cf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CHANGETARGET</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adeeddcd0f58304495e3e30c5285be51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLOSE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0908ae0ea53f32f9e7bbb814b4ebc9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a77a3a68c3e4b2d0f90374fa62b6d6e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa5f062ce635f44c083d53d8df2e7fc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8a127fe9592a7f233ed5bfdea70dff24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a05246bdec45af16aac5056a45bbfbffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1c08dbf9ecec171fd5a8abdcf4bc1732</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4a59e3000bf1dd5f9c66d541021461d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a83722ee715c13e3c54e67c8685c53677</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4ca1d39ce2764e5576da3c5bb8c31eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1bfe2cee9c84b8e204c443c164a16eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a38464f30e521653b27d884cb0f8e952b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac408b68214392c4024825c8122c2ec67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_AREAL_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a25b3cd5b082eee76400c9e81f0b4ab93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abf2a54d0263928c7c67b1399205f62d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a995228e235671467f43c6f230f5a310b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae7720408c339a65bb1d7920776e7f4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a9d9eaf59816e52a9b1382cd2f0e445fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aab7627756e25685ef8398633ca620bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>afc74049e4ac8c8a65d6b25c0c363cadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad2fa5b748b1580f354b631507e6e9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0dd8b3825acb93e57835a9c6a59a0f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_TL_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a23a5713b2efa147f104b003c10d07ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_TL_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ab9a720c867f40272e532baba3fe1d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_TL_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a45d28d5e51861aadcb6628654e5eb216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a89bdee3b9abb917a60549fd59fbb0030</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_TL_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4b0ea4b02e65aedf9e65adf86933cc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a46b32b8e87e293aced2c6242363abafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>af88f093b11ea60a099215445b748b100</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_LANE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae82c59889f44f40b0df6f1c41e00cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_LANE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a16b6670eaa5a5845527c1ea9c4ef6a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_LANE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adf59516cf5e0e33c6456e79e41c066cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>afef1c73324fcdc35456aac81a7148543</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_LANE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a3a44889166592e82aecf99a5c9b9107d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac20682f65f1f56d1406969e4840386ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a7e3288033a093977343bc000cfa0dbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8327578e1d375be0cda35067c23d0542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8efb67d70d2b7c6b86d9d99a40806e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4daee312282fa61ce2b2c9e19dc71fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6ea1568c34b29442244baf42f2bdc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a17305b49c61a77532505151ce2d399b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aaa289d08e25ed1871788a796ea91119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae081962daaad7c840b403c78a17a5417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae6a517ede4227e23146523b5390e07a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a611f3b8bd0715603a95b357dfbf8d078</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_VEHICLETYPE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ab5485e8ea7e4ac013adc23328137a179</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad0ac305c18e80d93f39441a8db700d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a3fa3a62d0be585a1254411199257e5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a9ae14a25ff457995de0d6578d034f44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8c230b85db253650ca48a0f52daf4dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_ROUTE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4b9ab406e73542e88dfcf44d3d736a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_ROUTE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0fd8a024f568bf8b48ea3f64654de5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_ROUTE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>af919cb89a8a561aff0896e66b5b5319a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a430ba00f89274e46a4c30b2cb99df0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_ROUTE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a76e46577d69ef80748268f4ac965addd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>af4c74ade0bf736fb05e375efc4c27324</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4f792965065f4fa7c1515fcf9998b7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a725c1c8d88140ccd66d2c78a72ab7c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a12e00b53d862c78782a35163d658ad24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ab75171b37a51f872525267e699d527cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a30482aa996155d083ce2ca8415ed70f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad135c2bd596c0d8e6a7b1f2c3e9aff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1cfd9140dd98070257cf737420411c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a739adbf1b8ffc6ed775431573f2fdb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_POLYGON_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a404ce6a209165786b246406df4aead28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_POLYGON_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a726077fc812b6f19601ee2cd8181e889</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_POLYGON_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a9a5b7a862e0e503918cdc066f3458e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abebcb9821a2d54a8cdcb094e4ca58b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_POLYGON_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5c814e302a1e1c3fd43fa2f7e285a014</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a47351c017e8d6b1696debc71cfc1a52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a417533e3ca34f46cd8b1c43c9e9af26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_JUNCTION_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a19fb63fc78fed848a258aa23b138ff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_JUNCTION_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5f6f40f44660f99fe2f4a10f64464be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_JUNCTION_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1b11dc53cd2d9cc703d64531b75446eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4a3b3f72cbb0e56c0497ec5cd41e9230</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a35d453923055d4c62f6f786b5785511c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5795554151e18de86f5abf94cbec4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae615615a34e54cf69171803bfcdf91f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_EDGE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa893eb800437ce3ecf5fe24ca693a953</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_EDGE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac50a1184def0490f99882a2b24102500</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_EDGE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a28a6f61ca698fbf35fa06f94366e5ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abd59649fa90019dd8b4171469b43e340</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_EDGE_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a61ace178f023e87e8fab4a2cff1d70c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8008229a0fe2d03c3e4dd58e80e46ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aae8689698f0f9440895902bd79a4acc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_SIM_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a59701651aaf3a84c12530259646846de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_SIM_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a157bc725d90b04ca8844224cc02c4cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_SIM_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac3fa214c68b4f9c6d72b87857d528b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa6ecd09a7f6cc9872956f06a84ab3caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_SIM_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad345b2290b629c7df963593c191f9a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>afc254ddb55bf9b49350f7b47ba6f9537</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_CONTEXT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0a10dec2c5213528772d967138b25984</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_GET_GUI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6f83cac4993ab850b3bf4ee317e185c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_GET_GUI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ab8aa0b8c58b89bd0dcb5449e92c82b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SET_GUI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a54a1de506a4c7ca2344bb204cd19af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ab86891c2e946e90b4360ecad860825a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESPONSE_SUBSCRIBE_GUI_VARIABLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4e9c9edafbf4e14d85142723bbcda7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa04d99fb7799fc05097ce8b55f6794e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_2D</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a9fc3eb37a8ae494084b863c411cf8c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_LON_LAT_ALT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6a1ab0cb7f3aea6a181bc47f7939f284</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_3D</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a2e4e2d4459c881109b0b40d723d5ba8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_ROADMAP</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a82812c142e13bbb144d26ac69b291cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BOUNDINGBOX</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad6279a78dbab9ba005c6c1ff819fb2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_POLYGON</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a63081ba85a6af222803d714237576999</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_UBYTE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a3d7c110d8026c92c2fee435f7cd12193</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BYTE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad62574650f26d2392ab55729769948b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_INTEGER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a929147425bf7969fe1d0e33716d02bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_FLOAT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a105c7addfad52601f4d079673eae7982</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_DOUBLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac87fa650bc0dcd101b39e15ecdb57477</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRING</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4e4e428e3a6a191834e3ff63bd301866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_TLPHASELIST</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aba8744658fadd99da72fd9117b464ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRINGLIST</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5561b6050ea28ec6d322e28848460c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COMPOUND</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5af12da4378875209e0b79bbe6b70e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_COLOR</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4a2941e13cc0bd28c847984e7f573850</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_OK</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a541fc8755958a227fe412e2df7fa31fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_NOTIMPLEMENTED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a31333391a4e82822d2c43e3928b6262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RTYPE_ERR</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a43465ba21de31f9ae2573e7ac5f24919</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_DOUBLE_VALUE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abd665a03a6204505716245362eeca1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_INT_VALUE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5722d9b8df900cf44a69151b6f4b1e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_RED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae475cd0b9d5ae96a145230c0ac287154</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_YELLOW</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a65d19b964abffa9b90c39cf21fcc0fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_GREEN</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a89c162b91c4124ebfe80f5bfa37621f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_BLINKING</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adf4fad950649759339ab18b4978a57bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TLPHASE_NOSIGNAL</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>acf44e21bfd6f2edbb22d04efda707da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_AIRDIST</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a88b616d763ed7052b2341f6d08040135</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUEST_DRIVINGDIST</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0876dbae8eb3fb92b20b2568d71eaf32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a7e483da406ff89a7b9fbe9dcb4ecfa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_PARKING</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0cfd27f8f6dad63eb821dea08fc25c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_ARRIVED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a93901a271a595e7d3eb9ab540aa8d9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_VAPORIZED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ace5ff9b0a74f5328e9dbcf71d79d25a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TELEPORT_ARRIVED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a7b8fcc7038295f3a18a5200af1b46633</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_LIST</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a28687ff0fca27086bca2dfb0c0aa8708</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_COUNT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a10ef5e45606c2977dd1eaf386f5d3de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJECT_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a121b9861ef8ff7a65dbf05955903bd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SURROUNDING_VARIABLES_SUBSCRIPTION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>af7cffef1a0ad07af0cb2bc1f647f7b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5cc4b739aa511a8bcdb3ea23e5f488fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_MEAN_SPEED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1bffbc3260dd641611f50a5b675c6bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_ID_LIST</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a7c60786af53b7e18ae6114577656e85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_OCCUPANCY</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a028a459ac58e7412d86407a6a647f544</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_HALTING_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac7bc8c0d2db79321580ed8391829e23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_LENGTH</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>afb37eb3a0763757e55635de36a0952bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_TIME_SINCE_DETECTION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abde51e92597a7d674fe9a90c1d6c6054</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_STEP_VEHICLE_DATA</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a9989b962ced0c0a5d568c5812effe104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_VEHICLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a74683d948c8a7dfc72157023021232f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAM_LENGTH_METERS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8f84a9cfe1563281fc6c91b72f14a562</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_RED_YELLOW_GREEN_STATE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8023e019a18d24881b8780aef047b455</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_INDEX</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>add58d847358637741402c2979fc014ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PROGRAM</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>af39eae82404a11130f08d21c9d8a84f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_PHASE_DURATION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aac7f12ef78085882c4fd0a2b5dd0d359</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LANES</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a2e60c8a6b44d8d40ad51c65ab95b3e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_LINKS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a7eb603191d4446e7cf87c2356be3448e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PHASE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aaf461fd64ac182b47c025f6f78af23e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CURRENT_PROGRAM</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a9224116e351cb230398e837841fac367</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_CONTROLLED_JUNCTIONS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>addac5c47b0c3f52a08255d079dfb6c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_DEFINITION_RYG</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abae7b714231e81de94e1024f9f41a75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_COMPLETE_PROGRAM_RYG</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a34b22bed0e5c0ba971a86ab8c56838fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TL_NEXT_SWITCH</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>acee0a296326d46d40c9b97667dc2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINK_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a20c9ad5e2c2ee1049282fca2605d3754</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_EDGE_ID</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aeb0a208a3c967515421f6659575da87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_LINKS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac39a0a0f89c208808ee921c9dbe8da8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_ALLOWED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6c5b0c0bc04b2036a971ca4bd7f5007f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LANE_DISALLOWED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5079457f2d9cc6be8da3834ae4a06e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a803f3a1743aef11a357e838e50d80f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MAXSPEED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1f8d8754eb24cd09fb3107a3f71bf76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_POSITION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a40ee44d232bc7661ec5a37bacd60702e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ANGLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aef6ef58b8c84169ca96fc70f9c5cee8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LENGTH</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a60e947bd75233810d5417b41f27e68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COLOR</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adcc89457ed75668afd992c756fc58549</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ACCEL</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aafdce9f42320b3e72c814cceaab9809c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DECEL</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4f883334365d5c2e0f18944be814441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TAU</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8d32ba4c4cc7e453e9b63426d84eb084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VEHICLECLASS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5cdedbf9fd0353a0a7c60982b4bd1494</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EMISSIONCLASS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a46a1e04d43660551e055d44f2d0ca41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPECLASS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0f50ad2a0f01241405381b9e895ab2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MINGAP</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aea443b43de4353bbaab7f34d303afe3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WIDTH</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adb08f65a6543f976dbfe6ee7db5d08a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SHAPE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8bcea46eaacfa0cb3896a2ca066ce237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TYPE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae136061e5a4bf896d9cfb27868baf9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROAD_ID</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a006ca3246206d575bc949da18c7d075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_ID</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>afb32e44c504d7f1bd7f7ba1fb3a56a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANE_INDEX</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a19d2b339169244a09db78bb764fadd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_ID</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a48cbe1bf5748e27183054ed2ddcfa3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGES</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ada001729364b89aa926730f631d6e429</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FILL</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>add08c9a33fb813e51fccabb3475a4c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANEPOSITION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4493c1eaff38410b9afd3b5ec86e760e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ab193f946f651c97e299dfc4285133516</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_TRAVELTIME</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa03c145ea3d6ed1039ee650ad0599452</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_EDGE_EFFORT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a82afe862545ade0192be2788e5b29f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CURRENT_TRAVELTIME</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8c5b07ef23ea6dc11209203b3ac7759d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SIGNALS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a7378a076f1ed4fb133d04d474ec36110</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad18db3a6f2be838f3ea6d75bb1784b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_IMPERFECTION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac98dc6e9bc82ae734fa638762f81eca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_FACTOR</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac73c5a63a7ba70a57e9f2162277799db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_DEVIATION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aaa434a0096961983f3ca1fddbeb73b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEED_WITHOUT_TRACI</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a152867a4fb7b5bbc0557db0511384503</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BEST_LANES</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a547dc5b69db59f7d5919f1e295469049</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SPEEDSETMODE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5c4f611616810959183c7b4e1d6e1b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MOVE_TO_VTD</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a2bc86d4cb640d38c9141eff52fdeddc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOPSTATE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ae3c19c3616e283cc23c02b38fa6b106d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LANECHANGE_MODE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adf0c5e5040db7935734b8b883973e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ALLOWED_SPEED</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa744a28d72caf1c96e355a61b341d9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_CO2EMISSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>adcc6403451c32bda03d9563843f4eb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_COEMISSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a55f8fd37376dc3adc19fc6e2ceaf53ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_HCEMISSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aaa0aad5c649d543d8de81bdb22d06664</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PMXEMISSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a37217bdbf8be36dc1bd44ecd62a807a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOXEMISSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a89457fa8c4ae6bd5adf6cc97860d08bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_FUELCONSUMPTION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>acdec282d3916d2d2ec373cd6f5f5e977</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NOISEEMISSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a54cb80eb2dc3f07710f64ca77f9b732d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PERSON_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac2d739153c2b7614503bdd7053a96027</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_BUS_STOP_WAITING</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6975b2bc0430600de2e96f1b7dcb5e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_WAITING_TIME</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa57f4cf03d1b32e487371987f3f0cc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TIME_STEP</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad32f4444706efc2c595e978f7898563f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad9d66d42efa6d47d084d4dd8ed52b7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_LOADED_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abb332ca9704ebaa6b5f779af5ab8412f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a578826c7c51ee3143b8b6f6c63854512</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DEPARTED_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ad329e5b7d4a42b7e34acf7cb89b34de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a0ff9aec6a237456a854c35841a01e1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_STARTING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aba383d3234c4f0b62a0ece79b98ec457</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ada0133b150f6beef3b9c15d65892dc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TELEPORT_ENDING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa15656ecb567d69ab1a26a6b77f48e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4d7f1f70a9b831317c8516c7c49395b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ARRIVED_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a53906c58d5f7c9d0474b2327dc6758c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abd435d13d6d15b91907e2acbede8dcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6f7a7bb6a7c2296410e59517c3f70528</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a2043197e812c07ab1ca7c6b3857bc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a36879b7603e38c7b2ef62ffeaf57793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DELTA_T</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1feee452ab9f9778c68cf55e8cb70b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_NET_BOUNDING_BOX</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a217ca72b88d743238b7bc3bacbe7da1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_MIN_EXPECTED_VEHICLES</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abf31d852e42db03d1a3fd426d9d3b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aa8562695a38b797bf6c77156cc53be11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_STARTING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>aca15cc76f5f1f2150602ae0221ea9efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a30267d895605937cc904a8471aa2b098</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_STOP_ENDING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a89cb2ef6aa378ea1b5c71ede68f3af5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>abd435d13d6d15b91907e2acbede8dcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_STARTING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6f7a7bb6a7c2296410e59517c3f70528</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_NUMBER</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a2043197e812c07ab1ca7c6b3857bc0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_PARKING_ENDING_VEHICLES_IDS</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a36879b7603e38c7b2ef62ffeaf57793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_CLEAR_PENDING_VEHICLES</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a1051bd1ae917fc0cc2639f48462c0a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a97fe5470fb1ac167c713671655ff3e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ab9959e75e26bc66b3733ddc04de6b4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POSITION_CONVERSION</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a8ef564809ccabdee78bdc9656a660a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISTANCE_REQUEST</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a92f25b953319f56d635ea4fe599d65c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_DISTANCE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a39e184bf382ac65aaaf2ea344ed909a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_TRAVELTIME</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a9cf2d3b5926694eca9a290606153dbb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMD_REROUTE_EFFORT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a27d763793c3a43050ece9e76caa0f697</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_ROUTE_VALID</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a817e029aaf52b9bd33c3115af6384e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_ZOOM</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a6223fc3eef58008e64e425ddf4136ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_OFFSET</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>ac7a52c618e295256a64a55c94bd754a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_SCHEMA</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a48b64030823e73abcea5f383a07a6b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_VIEW_BOUNDARY</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a3de049e7d6d515e3250a8af1bcd04565</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_SCREENSHOT</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a4ae01bdb5b0bcb9237faecf1930af5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAR_TRACK_VEHICLE</name>
      <anchorfile>_tra_c_i_constants_8h.html</anchorfile>
      <anchor>a5762708bbdd17c389bfffb5a19143b4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCICoord.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_coord_8h</filename>
    <class kind="struct">Veins::TraCICoord</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIMobility.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_mobility_8cc</filename>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_mobility_8cc.html</anchorfile>
      <anchor>a46c5c94510c6ee1b57c9ffab9048b39a</anchor>
      <arglist>(Veins::TraCIMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIMobility.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_mobility_8h</filename>
    <includes id="_base_mobility_8h" name="BaseMobility.h" local="no" imported="no">BaseMobility.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">modules/mobility/traci/TraCICommandInterface.h</includes>
    <class kind="class">Veins::TraCIMobility</class>
    <class kind="class">Veins::TraCIMobility::Statistics</class>
    <class kind="class">Veins::TraCIMobilityAccess</class>
    <namespace>Veins</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TRACI_SIGNAL_PARKING_CHANGE_NAME</name>
      <anchorfile>_tra_c_i_mobility_8h.html</anchorfile>
      <anchor>a1a6e3abf500842c598e3d3335fd1c59e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManager.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_8cc</filename>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">modules/mobility/traci/TraCIScenarioManager.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">modules/mobility/traci/TraCIConstants.h</includes>
    <includes id="_tra_c_i_mobility_8h" name="TraCIMobility.h" local="yes" imported="no">modules/mobility/traci/TraCIMobility.h</includes>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">modules/obstacle/ObstacleControl.h</includes>
    <includes id="_tra_c_i_scenario_manager_inet_8h" name="TraCIScenarioManagerInet.h" local="yes" imported="no">modules/mobility/traci/TraCIScenarioManagerInet.h</includes>
    <class kind="struct">traci2omnet_functor</class>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>_tra_c_i_scenario_manager_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_scenario_manager_8cc.html</anchorfile>
      <anchor>a69ec07628cb31a9358ad83bede75c5a7</anchor>
      <arglist>(Veins::TraCIScenarioManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManager.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_base_connection_manager_8h" name="BaseConnectionManager.h" local="yes" imported="no">BaseConnectionManager.h</includes>
    <includes id="_find_module_8h" name="FindModule.h" local="yes" imported="no">FindModule.h</includes>
    <includes id="_obstacle_control_8h" name="ObstacleControl.h" local="yes" imported="no">modules/obstacle/ObstacleControl.h</includes>
    <includes id="_tra_c_i_buffer_8h" name="TraCIBuffer.h" local="yes" imported="no">modules/mobility/traci/TraCIBuffer.h</includes>
    <includes id="_tra_c_i_color_8h" name="TraCIColor.h" local="yes" imported="no">modules/mobility/traci/TraCIColor.h</includes>
    <includes id="_tra_c_i_connection_8h" name="TraCIConnection.h" local="yes" imported="no">modules/mobility/traci/TraCIConnection.h</includes>
    <includes id="_tra_c_i_coord_8h" name="TraCICoord.h" local="yes" imported="no">modules/mobility/traci/TraCICoord.h</includes>
    <class kind="class">Veins::TraCIScenarioManager</class>
    <class kind="class">Veins::TraCIScenarioManagerAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerInet.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_inet_8cc</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallPreInitialize</name>
      <anchorfile>_tra_c_i_scenario_manager_inet_8cc.html</anchorfile>
      <anchor>a837d0aa832e73eca6f2ba8c992c919a5</anchor>
      <arglist>(cModule *mod, const std::string &amp;nodeId, const Coord &amp;position, const std::string &amp;road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallNextPosition</name>
      <anchorfile>_tra_c_i_scenario_manager_inet_8cc.html</anchorfile>
      <anchor>a5049232949eb3445301bc999967c4057</anchor>
      <arglist>(cModule *mod, const Coord &amp;p, const std::string &amp;edge, double speed, double angle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerInet.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_inet_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallPreInitialize</name>
      <anchorfile>_tra_c_i_scenario_manager_inet_8h.html</anchorfile>
      <anchor>a837d0aa832e73eca6f2ba8c992c919a5</anchor>
      <arglist>(cModule *mod, const std::string &amp;nodeId, const Coord &amp;position, const std::string &amp;road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifInetTraCIMobilityCallNextPosition</name>
      <anchorfile>_tra_c_i_scenario_manager_inet_8h.html</anchorfile>
      <anchor>a5049232949eb3445301bc999967c4057</anchor>
      <arglist>(cModule *mod, const Coord &amp;p, const std::string &amp;edge, double speed, double angle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerLaunchd.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_launchd_8cc</filename>
    <includes id="_tra_c_i_scenario_manager_launchd_8h" name="TraCIScenarioManagerLaunchd.h" local="yes" imported="no">modules/mobility/traci/TraCIScenarioManagerLaunchd.h</includes>
    <includes id="_tra_c_i_command_interface_8h" name="TraCICommandInterface.h" local="yes" imported="no">modules/mobility/traci/TraCICommandInterface.h</includes>
    <includes id="_tra_c_i_constants_8h" name="TraCIConstants.h" local="yes" imported="no">modules/mobility/traci/TraCIConstants.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CMD_FILE_SEND</name>
      <anchorfile>_tra_c_i_scenario_manager_launchd_8cc.html</anchorfile>
      <anchor>acd42c64604c9797d6697cdbd75377eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYDEBUG</name>
      <anchorfile>_tra_c_i_scenario_manager_launchd_8cc.html</anchorfile>
      <anchor>a38cc676e6c9f06e021b17e537b7bba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>_tra_c_i_scenario_manager_launchd_8cc.html</anchorfile>
      <anchor>a6eacbf5f08621d86b8f8b34ad5d7f9df</anchor>
      <arglist>(Veins::TraCIScenarioManagerLaunchd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraCIScenarioManagerLaunchd.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>_tra_c_i_scenario_manager_launchd_8h</filename>
    <includes id="_tra_c_i_scenario_manager_8h" name="TraCIScenarioManager.h" local="yes" imported="no">modules/mobility/traci/TraCIScenarioManager.h</includes>
    <class kind="class">Veins::TraCIScenarioManagerLaunchd</class>
    <class kind="class">Veins::TraCIScenarioManagerLaunchdAccess</class>
    <namespace>Veins</namespace>
  </compound>
  <compound kind="file">
    <name>TwoRayInterferenceModel.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_two_ray_interference_model_8cc</filename>
    <includes id="_f_w_math_8h" name="FWMath.h" local="no" imported="no">FWMath.h</includes>
    <includes id="_two_ray_interference_model_8h" name="TwoRayInterferenceModel.h" local="yes" imported="no">TwoRayInterferenceModel.h</includes>
    <includes id="_air_frame__m_8h" name="AirFrame_m.h" local="yes" imported="no">base/messages/AirFrame_m.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>debugEV</name>
      <anchorfile>_two_ray_interference_model_8cc.html</anchorfile>
      <anchor>a43107a17c21e08a3b52d6957f01d3987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TwoRayInterferenceModel.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>_two_ray_interference_model_8h</filename>
    <includes id="_analogue_model_8h" name="AnalogueModel.h" local="yes" imported="no">AnalogueModel.h</includes>
    <includes id="_base_world_utility_8h" name="BaseWorldUtility.h" local="yes" imported="no">BaseWorldUtility.h</includes>
    <includes id="_mapping_base_8h" name="MappingBase.h" local="yes" imported="no">MappingBase.h</includes>
    <class kind="class">TwoRayInterferenceModel</class>
    <class kind="class">TwoRayInterferenceModel::Mapping</class>
  </compound>
  <compound kind="file">
    <name>WaveAppToMac1609_4Interface.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mac/ieee80211p/</path>
    <filename>_wave_app_to_mac1609__4_interface_8h</filename>
    <includes id="_netw_to_mac_control_info_8h" name="NetwToMacControlInfo.h" local="no" imported="no">NetwToMacControlInfo.h</includes>
    <includes id="_consts80211p_8h" name="Consts80211p.h" local="no" imported="no">Consts80211p.h</includes>
    <class kind="class">WaveAppToMac1609_4Interface</class>
  </compound>
  <compound kind="file">
    <name>WaveShortMessage_m.h</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/messages/</path>
    <filename>_wave_short_message__m_8h</filename>
    <includes id="_coord_8h" name="Coord.h" local="yes" imported="no">Coord.h</includes>
    <class kind="class">WaveShortMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>_wave_short_message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>_wave_short_message__m_8h.html</anchorfile>
      <anchor>ae74b14e21ab85bdfeeca766a8ce81a74</anchor>
      <arglist>(cCommBuffer *b, WaveShortMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>_wave_short_message__m_8h.html</anchorfile>
      <anchor>a6cbe959450c1c1aaa3a979594bfe7d49</anchor>
      <arglist>(cCommBuffer *b, WaveShortMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>winsupport.cc</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>winsupport_8cc</filename>
    <includes id="winsupport_8h" name="winsupport.h" local="yes" imported="no">winsupport.h</includes>
  </compound>
  <compound kind="file">
    <name>winsupport.h</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>winsupport_8h</filename>
  </compound>
  <compound kind="page">
    <name>README</name>
    <title>README</title>
    <filename>_r_e_a_d_m_e</filename>
  </compound>
  <compound kind="class">
    <name>AccessModuleWrap</name>
    <filename>class_access_module_wrap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>wrapType</name>
      <anchorfile>class_access_module_wrap.html</anchorfile>
      <anchor>a6526ebf12a047ec5a36bd316106289b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AccessModuleWrap</name>
      <anchorfile>class_access_module_wrap.html</anchorfile>
      <anchor>a3b420065b43d5504addd73e2dda15068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *const</type>
      <name>get</name>
      <anchorfile>class_access_module_wrap.html</anchorfile>
      <anchor>aabe6dcb792c40ce4c77b2f194aadbe5f</anchor>
      <arglist>(cModule *const from=NULL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>pModule</name>
      <anchorfile>class_access_module_wrap.html</anchorfile>
      <anchor>a385653cd58a20af54c6938f5c66d9a40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AddressingInterface</name>
    <filename>class_addressing_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>class_addressing_interface.html</anchorfile>
      <anchor>a7d81614e8dea6e3a7316184e6b9e959c</anchor>
      <arglist>(const cModule *mac) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>class_addressing_interface.html</anchorfile>
      <anchor>a3f4172beef51056ebc815246b6c9d651</anchor>
      <arglist>(const cModule *netw) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AirFrame11p</name>
    <filename>class_air_frame11p.html</filename>
    <base>Veins::AirFrame</base>
    <member kind="function">
      <type></type>
      <name>AirFrame11p</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a7f35dba37995cdb2fb5b0f380b9e445e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame11p</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a2b3e68356c5dcf9538a1cf5fa42457db</anchor>
      <arglist>(const AirFrame11p &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AirFrame11p</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>ab50da7666fe019f06bec4801bd864cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AirFrame11p &amp;</type>
      <name>operator=</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a9f63926aabf4ca26d7a253da273a0693</anchor>
      <arglist>(const AirFrame11p &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AirFrame11p *</type>
      <name>dup</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a042810dd386765917473bf9b9572a483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a053a61df242466fb76f8fb3e66661615</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>acf108af30c840181cb327fc7db85fb36</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getUnderSensitivity</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>ae9af854b9c8237077618f82a3db6be54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnderSensitivity</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>ad9c2571b011c2b081ad1689218f0d0ac</anchor>
      <arglist>(bool underSensitivity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWasTransmitting</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a8d2568edd1c3308580ce581d64a14951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWasTransmitting</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>aa00aa01ba7302cd1078a5a51f6bc5cb5</anchor>
      <arglist>(bool wasTransmitting)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>aead118aef0272bc72d772a346ef216ea</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AirFrame</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a02b5d1dc99b7fcf3686b25c965d4d770</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AirFrame</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a01bda7e9448c181df0b87b2aa6c59cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AirFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>af1ec37559d035b9b870009724628255a</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Signal &amp;</type>
      <name>getSignal</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a50cfde43def85076f0ba2e9ad16d18a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Signal &amp;</type>
      <name>getSignal</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>ae37b5e2dd134dc2c810612a778beb20d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSignal</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a49085838ee8057aa8532249b7c2dc3f4</anchor>
      <arglist>(const Signal &amp;signal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDuration</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a713e5d23b4ccb3d89d29468ff1dd7b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>afc8977ce81a1b732d504db463273cb1a</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getState</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a7786f03f21fc3e7cf683a9636d25f109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a82332ad0dc0819fe138cdc49204d1743</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a93fd575a93cc8bb692c6c92784208ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a0fb208736c55183a306f9f446798a683</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getId</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>abac89b81d2c1fdce7f64bd6c91811032</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>afc9fad9abb1e40cb558d3a1df40481ad</anchor>
      <arglist>(long id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProtocolId</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a550f3534098413c07fc54c73104e05c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocolId</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a26fa4bd47eb08854f694220a6d719d2c</anchor>
      <arglist>(int protocolId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannel</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a8a404bb88f599e41eda2e965d6e39866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannel</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>ac5cee514e9249028a4ba35f6a8255379</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>af22a1142529951461e8ed5f5318d8a5f</anchor>
      <arglist>(const AirFrame11p &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a69109d3b4c81745b4b1c38dea670704f</anchor>
      <arglist>(const AirFrame &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>underSensitivity_var</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>ab95fd64b3946bb61542d5f5d879af776</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>wasTransmitting_var</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a8b073d735fff5b53d31b829097079b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal</type>
      <name>signal_var</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>ab1716ce0e24eaa8eb4ca13e7985215e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration_var</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a05af12909106987b17121764e2fd08b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state_var</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a78f69395e9da4bba43803fb40a8175b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a3ac85154d2abdef79dceb96c95a6d5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>id_var</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>aad208a6693e37833b0abadb7931c4de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocolId_var</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>aa2d2317a0bfed95d2a3144f92b27dc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channel_var</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>aec135269933b47564b88ebea1944c33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_air_frame11p.html</anchorfile>
      <anchor>a50a72f449f996cade0d4625823cc34c5</anchor>
      <arglist>(const AirFrame11p &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnalogueModel</name>
    <filename>class_analogue_model.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnalogueModel</name>
      <anchorfile>class_analogue_model.html</anchorfile>
      <anchor>ad67dc10e9889eb66fe7515280a00c97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_analogue_model.html</anchorfile>
      <anchor>ad522c654f6e2184cbb7d03fde72a1eb9</anchor>
      <arglist>(AirFrame *frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Argument</name>
    <filename>class_argument.html</filename>
    <class kind="class">Argument::key_iterator</class>
    <member kind="typedef">
      <type>DimensionSet::value_type</type>
      <name>key_type</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>ac1eb4e3eff9e8f84ef4dc0c91127eba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>mapped_type</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a3dd501f2b9169432270402847347950a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type</type>
      <name>mapped_type_cref</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a23feb540136f49b4202ce0c7def1f0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a62ef6fa40b8600df45f05d0e36e6d296</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a521abc97d737e8c77742dcc9f4b21022</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>aa17498813265ae215cfeb902b3df4a75</anchor>
      <arglist>(simtime_t_cref timeVal=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a4de14fe94af77f9d568cf74313dfbcd1</anchor>
      <arglist>(const DimensionSet &amp;dims, simtime_t_cref timeVal=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTime</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a2ecb3b041b5b8721d6767531e4ac792a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a8087982f050bdc61d787b128ca9ac8f9</anchor>
      <arglist>(simtime_t_cref time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasArgVal</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a0e9998020362333915af80cde79df9e6</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>mapped_type_cref</type>
      <name>getArgValue</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a137a911de0281cbb519fe13727aa0813</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValue</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a27bd7000e865670a673039233424d2ab</anchor>
      <arglist>(const Argument::key_type &amp;dim, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValues</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a72ac36c91caaeb8f34eb091abff19c51</anchor>
      <arglist>(const Argument &amp;o, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSamePosition</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>ac69b6722244626cdf4e0a006c9822cec</anchor>
      <arglist>(const Argument &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>afedad9de51d93e634baa82f1152d7155</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClose</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a306689df8719cb4334335d93cd657f74</anchor>
      <arglist>(const Argument &amp;o, Argument::mapped_type_cref epsilon=Argument::mapped_type(0.000001)) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a20805e35e4f766088dccfa2bbd8faf03</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>ac983761168238481be2bc9d9d180abe5</anchor>
      <arglist>(const Argument &amp;o, const DimensionSet *const dims=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>DimensionSet</type>
      <name>getDimensions</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a8b3fcda23d2eec4e931126d261e4b194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>aa5470d1af397ea8da8be60594981a0b0</anchor>
      <arglist>(const Argument &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>af0e836fd4aaecc1461b994e21f66ddc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a493bcd3b014d9bc09f5b0a5093797136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>aeeb6730c20ae8a8d6c9606f2e03cc1da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a839f872b871bcce52fa4179b0e8ee0a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>ae4b61830a991f8911978c30a67dd2da6</anchor>
      <arglist>(const Argument::key_type &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a3289dcd0413f1df96a51df6cef134ad4</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>ac22d11d6f986ecc564b98c1dbd0acb53</anchor>
      <arglist>(const Argument::key_type &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>afd7c54a936671eb153f524443e36de52</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const mapped_type</type>
      <name>MappedZero</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a8523627cdc70492e5e0935b9a3a78cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const mapped_type</type>
      <name>MappedOne</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a657d962a1b965814e6b2eecb07f03e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; key_type, mapped_type &gt;</type>
      <name>container_type</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a5b90c0766620d819b1bf1221603cc4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::value_type</type>
      <name>value_type</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a296f0e0c35afc921b9b39b312e97e425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>insertValue</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a9f8683a4ac0a277d92f4ee4c553b75f9</anchor>
      <arglist>(iterator pos, const Argument::value_type &amp;valPair, iterator &amp;itEnd, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>time</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a69cba55a3a7e1414ba8edde37796d84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>container_type</type>
      <name>values</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a7e41277b3b57f03fbb47336c2b7439f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_argument.html</anchorfile>
      <anchor>a7eb8c897281544d904f4a45de93a5cf9</anchor>
      <arglist>(std::ostream &amp;out, const Argument &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Argument::key_iterator</name>
    <filename>class_argument_1_1key__iterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorType::value_type::first_type &amp;</type>
      <name>reference</name>
      <anchorfile>class_argument_1_1key__iterator.html</anchorfile>
      <anchor>aad04b5c3a84f4c80b659a05472cd28bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorType::value_type::first_type *</type>
      <name>pointer</name>
      <anchorfile>class_argument_1_1key__iterator.html</anchorfile>
      <anchor>a7fb179e9a64691d51f7e893ea2686a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key_iterator</name>
      <anchorfile>class_argument_1_1key__iterator.html</anchorfile>
      <anchor>ad23a42675cec51608c15650632cc15e8</anchor>
      <arglist>(const IteratorType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const reference</type>
      <name>operator*</name>
      <anchorfile>class_argument_1_1key__iterator.html</anchorfile>
      <anchor>a0842776337ded8b72060c6d13e40f7f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>class_argument_1_1key__iterator.html</anchorfile>
      <anchor>af37b3a86b1324260757b97cf381026e7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseApplLayer</name>
    <filename>class_base_appl_layer.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>BaseApplMessageKinds</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>ae0d47602558bc21ad258c06cf11f4361</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_APPL_MESSAGE_KIND</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>ae0d47602558bc21ad258c06cf11f4361a366d211a4409475c5bc2a1193033d8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseApplControlKinds</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a78a7344b6587fdf1c02e299b156825d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_APPL_CONTROL_KIND</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a78a7344b6587fdf1c02e299b156825d9a5bfff2f2b6be2fc6599387eebaebb944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a4b6c452ca012440a7311e16b2209dddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a28b0216a8fff432bf8f66a4e8aae7e07</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>aa3ebaf5d1d1bdbec4648b07f65eb4145</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a3859f6996ca38f3a7317a3facb8389a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a0afd7ae9809a632ee75a136838029c07</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseLayer</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a0197900f0ab83323a623448fc4e8b239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a8039dac8d02052c97c1fcc209910fdde</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a5ab11502dbeeea89693d29841376a2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>a91a34707835f0938bc9c1a1c470ad5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>af1956d05ad1d5a1b5e3b605e7238c4f6</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a32a85543320f15e3852fc15201acd492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>ab8e21b1eab02b58e24ab06858faa5104</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>ace4692f0eb43b2d4ca4e46f81b5c77a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logName</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a662d45fd2e3edf53d40e84b98f4dc885</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const cModule *const</type>
      <name>getNode</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a6f5018211b942b3b4604a8b8972623d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a9195e1fe5a0ca770e7d29351e0ab2ecf</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedDown</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a08d91ffcf2598556db4dd3ba845e4979</anchor>
      <arglist>(cMessage *, simtime_t_cref)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const LAddress::L3Type</type>
      <name>myApplAddr</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>aed82a07169f4bfd3599d6c6c0a765873</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>aba8356197b089f23dd9c19b6b7937dab</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a448cd52ea7a441a8f2edb3794a59205b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a581ca398f2066910d8d10676e90d206b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a29c15eb83ed7749c838c005a3fb554d4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>a823ae7127366be3fa2e11c98ace537b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a1873d6e3fc6d92cf8482b39f1c5ac6c8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>adbf061566606041db811b519f0400ed5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>aa1190a06fb4dfb15d8ff001468335dc8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlDown</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a6d01a0f56978740d7617c2e338858cc3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordPacket</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a33f4f320f4b6c4ec48651847338ff47f</anchor>
      <arglist>(PassedMessage::direction_t dir, PassedMessage::gates_t gate, const cMessage *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerWithBattery</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>a2286e83003b2919cbb496260a5b0d009</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>draw</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>a1015e11ad7fc73f62a37e395bf686015</anchor>
      <arglist>(DrawAmount &amp;amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawCurrent</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>af62a4c6ab659f7bebc16cc789c559bc6</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawEnergy</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>a603868d7ae89b65da4af161c9470f07f</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a44220aa650488eee8ad121f8bc599265</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchHostState</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a2edf4477674604a8c2eb2b95e952694a</anchor>
      <arglist>(HostState::States state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *const</type>
      <name>findHost</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a1d2d2af49918dfb9ae036b1d086b123a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const cModule *const</type>
      <name>findHost</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>ad93ceae9045951561f04cc3f3b0f78f6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>class_base_appl_layer.html</anchorfile>
      <anchor>ab42918350289ee246b194a5ab5e18d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PassedMessage *</type>
      <name>passedMsg</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>adf7be46c3b45429ae7e45c466202eebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>aa73b04b4b90c5d44adf7b1ea1264412d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a6a901380d0b82b72898cad4ba6cff331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerIn</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>abf4366df3282b3358945a3267538b93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerOut</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>aa77fd3b24dc3caec970d7f5c48626e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>aba75bba311458c62b4b2fa2bb9711a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a5e0a6cb17bfc2fd3127ac884d0e9d3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a1d2eb99059680b97b366ae8342f18af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlOut</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a380159410191c5ea0e5f95766a4814dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseBattery *</type>
      <name>battery</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>a19c053b2525a3e78f911f0433a90628f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deviceID</name>
      <anchorfile>class_veins_1_1_battery_access.html</anchorfile>
      <anchor>a904f5c552f5173ef44ccfd624c3f9b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>af32711ea117b066fcd10081a17bb81d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>notAffectedByHostState</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>ad2e5c785ee5b988e624a11a9b80e2bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catPacketSignal</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a665bf8ad06b2c4b5419669869e68ef00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catPassedMsgSignal</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a8474b0b98731b2d66c9fe3a3ae040edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catDroppedPacketSignal</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>ad8ba02d92dd106da1d85192eb28250c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catHostStateSignal</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a0d89757df3cc2bf55649eee85aad6402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseBattery</name>
    <filename>class_base_battery.html</filename>
    <base>BaseModule</base>
    <member kind="function">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>a6bd8a2ebca6b85e25984fae7a5faa8fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>a2aa922227a7f1d1c1e8188aaea1a16e5</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>registerDevice</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>a6b2ac07e8d11823bdd239de2bfa4563a</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>a4ac1773aef7363fc880a9689706ccc99</anchor>
      <arglist>(int drainID, DrawAmount &amp;amount, int account)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVoltage</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>a20ee7721d8da961e3493da63a0fafb81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>a67c0d2c69f13b6c7ca4a24b23257d83f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>a15862e04dfa8b40082ecccff79b14ca0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual HostState::States</type>
      <name>getState</name>
      <anchorfile>class_base_battery.html</anchorfile>
      <anchor>ab9afb1ddcea070ee4fdf9807521cc806</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_module.html</anchorfile>
      <anchor>a03030e439aaf030c83da6e71e8be2f80</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager</name>
    <filename>class_base_connection_manager.html</filename>
    <class kind="class">BaseConnectionManager::CoordSet</class>
    <class kind="class">BaseConnectionManager::GridCoord</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseConnectionManager</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>aa82c4d9b87d1c1776300fa47d82a5e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a046d0df64848f1932ac1580be9d5306f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a0d39342f1e732ad44ef7e4e2dccac24f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerNic</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>ab9d82c54244e022ee41f3d1017cd74f1</anchor>
      <arglist>(cModule *nic, ChannelAccess *chAccess, const Coord *nicPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregisterNic</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a3e3f6ea1da0e15af3c91493dcfdc22ba</anchor>
      <arglist>(cModule *nic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNicPos</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a075ad308e1ae744f4f7ff1d6517da324</anchor>
      <arglist>(int nicID, const Coord *newPos)</arglist>
    </member>
    <member kind="function">
      <type>const NicEntry::GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>ae71cb544584cb71f96e7de50896577f8</anchor>
      <arglist>(int nicID) const </arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a6911cdbad686c0f471df22da1351cb69</anchor>
      <arglist>(const NicEntry *nic, const NicEntry *targetNic) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, NicEntry * &gt;</type>
      <name>NicEntries</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a950a318de5a93b437a1dc5872e6b9cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicEntries &gt;</type>
      <name>RowVector</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a07e3ba99630593a0b453056767f3c419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; RowVector &gt;</type>
      <name>NicMatrix</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a332ff3a0e07c412efaaa2332b00b1c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicMatrix &gt;</type>
      <name>NicCube</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a6b43342fe2608cb862e03c07cf9f799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a00b2487d2565c70a46101964a2767643</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerNicExt</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a6851b0f5e82df7cfd187c283faf0eca5</anchor>
      <arglist>(int nicID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateConnections</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a997a62d3bc3ca2d220a36609e4b7f4e5</anchor>
      <arglist>(int nicID, const Coord *oldPos, const Coord *newPos)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInRange</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a418d9fb4151ff38840838a94189ba8b6</anchor>
      <arglist>(NicEntries::mapped_type pFromNic, NicEntries::mapped_type pToNic)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicEntries</type>
      <name>nics</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a9e2d47a851899da506730fcdda24030e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a6b75c5b6311b76e4894d669524a15043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendDirect</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>acdfe4a6c7e4d6cfc729219946488a1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord *</type>
      <name>playgroundSize</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>ab68d40f806cce405a8e97958f1245303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a1570049e688ff532c2454fce2ef02f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistSquared</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>aa9b0c739744c1eafd365add0afe4a037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>ade8a5353ad5be39ebb3830e45ec64fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>drawMIR</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>acc2243ef90f9857769043cd040c48705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicCube</type>
      <name>nicGrid</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a4d9992e134da9af1d9b90deba1d7759a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>findDistance</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a9a4bce8e878f2d6aa18fb2606f6d8409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridCoord</type>
      <name>gridDim</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>afea80604515a28ff8a6a1d07b9b0a9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNicConnections</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>af36a4fd1f31773f63187cc9717441a98</anchor>
      <arglist>(NicEntries &amp;nmap, NicEntries::mapped_type nic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a063c137e5a6d73ff846321b511d48a32</anchor>
      <arglist>(GridCoord &amp;oldCell, GridCoord &amp;newCell, int id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GridCoord</type>
      <name>getCellForCoordinate</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a7f0e7ff7533bb1f5e3c9bb2c2c0db261</anchor>
      <arglist>(const Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NicEntries &amp;</type>
      <name>getCellEntries</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>ae776ac81a8f88a9afba710afaf8573b8</anchor>
      <arglist>(GridCoord &amp;cell)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>wrapIfTorus</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a77e53c22a7c607482398632b85396a6c</anchor>
      <arglist>(int value, int max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillUnionWithNeighbors</name>
      <anchorfile>class_base_connection_manager.html</anchorfile>
      <anchor>a9b524c0f46ec4bb2ade902ac0855cac5</anchor>
      <arglist>(CoordSet &amp;gridUnion, GridCoord cell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::CoordSet</name>
    <filename>class_base_connection_manager_1_1_coord_set.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordSet</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a5c4c714b303d8a6ccae2628c22357556</anchor>
      <arglist>(unsigned sz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoordSet</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a3f1d637881b9e4ca2a306295eacdc634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>aaa3c6a4f31789b4644a5bb7aaf414206</anchor>
      <arglist>(const GridCoord &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>GridCoord *</type>
      <name>next</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a02d6a8788ed22b635e7d8edbcb576d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSize</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>aecae0f85e052f6843660a2f6205db7e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getmaxSize</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a58ff3ee1fd7484860a04e172b5dc6df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a6f6a48e14b2c80e70d66f8fd3310df65</anchor>
      <arglist>(const GridCoord &amp;c, unsigned pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GridCoord * &gt;</type>
      <name>data</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a6bf527335c1f943a562a948d63e1c435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxSize</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>ab92f6508285f667d0e7f811c74c048cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a81adb787e364efa97276766eb19fe644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>current</name>
      <anchorfile>class_base_connection_manager_1_1_coord_set.html</anchorfile>
      <anchor>a0bdf347931c8b2c7ae970769291a804e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::GridCoord</name>
    <filename>class_base_connection_manager_1_1_grid_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>acc40471233f51e22e561d78ef9231926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>afa7e86ef98fd7a4d91d0fdfcdb17e9e3</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>acae21cc9126603082dbce10f45e97a5e</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a4f3fd84363c60c0260dc01660b8a6dc8</anchor>
      <arglist>(const GridCoord &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a5277a00268c4b72ea0af57f595100f32</anchor>
      <arglist>(const Coord &amp;c, const Coord &amp;gridCellSize=Coord(1.0, 1.0, 1.0))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a91ebc91e4af84ce4cf11d177d8ed7813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a158c3270ff10545efaf07d41c67306b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>aaaa399690632b3e605af0bd1c190100b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>z</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a075ddccd3c60f44fe6051c7afefdd255</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a2b7b149e4419a68dad34a9558f5c3c31</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>class_base_connection_manager_1_1_grid_coord.html</anchorfile>
      <anchor>a8b6fb213ce1ee286ec6c894b7b22cfa5</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDecider</name>
    <filename>class_base_decider.html</filename>
    <base>Decider</base>
    <class kind="struct">BaseDecider::CSRInfo</class>
    <member kind="enumeration">
      <type></type>
      <name>BaseDeciderControlKinds</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PACKET_DROPPED</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2ab80ab87167f9836332d1d5678f6aab64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_DECIDER_CONTROL_KIND</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2a1944cc67bf3f0c98342e3975bd05021c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDecider</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>acff4618fa7a9c2e9abf257e60e487de2</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDecider</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a486cd5548e3f75deff4dc9e3bd52fbb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a273892d7b0c9874e4efe3c7755aa7a17</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>af471a55749109aacb99429b409ccb9c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>afd31e5a65d1798d329ace9bdbec25d64</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a771545ad005ad69bef78b53fa831a7e2</anchor>
      <arglist>(DeciderToPhyInterface *phy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a82acc7c518d526216b2e31603ecc9866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a6e4b28a733a18fddec77bb6a3f179be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelChanged</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a546a912fd2463258e29bfe72698c9452</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>SignalState</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>NEW</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90ba3276f47da7417662597b21ee3afa2d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>EXPECT_HEADER</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90baf0a66719215a9be8335546666facaab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>EXPECT_END</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ae4acbca8f960e9c49379ae2a82e2d90ba5539b8e545c0676dab0b0efb80dfeeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; AirFrame *, int &gt;</type>
      <name>ReceivedSignal</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a4b3ede0e569c778173b7e430d958f92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DeciderToPhyInterface::AirFrameVector</type>
      <name>AirFrameVector</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a6baab300e0bec90320dfe956c2d15a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a6a480f87157d0509c0c1fccf94ea9fef</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalHeader</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ad931e0965c66fef10c9407d4abecbaf5</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ab9cfef6c04e12d2524d45e881f341300</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processUnknownSignal</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ac054bb9bbda73689caf6c7cd7e55c8de</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getSignalState</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>aa41d7cb370ba4069108ede77732b3bc8</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleNewSenseRequest</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a1dba383c238fba606279ef483b435f78</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSenseRequestEnd</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a2f175306cc0ae9d2805bc050315a47d8</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ae535b44e34061014fe282c36c27b0193</anchor>
      <arglist>(bool isIdle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>canAnswerCSR</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>aad89f97ba5dcfd556be7556f04a840b1</anchor>
      <arglist>(const CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a12dd419a9e88e0b28f8d4e530e058802</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>answerCSR</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ab8e925001d1f8630338c50f8ec10bb0d</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>channelStateChanged</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>add7242168c4bb521c6335f3de590e4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a1eb9539d907f101c8d30798f6ca03337</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrameVector &amp;out)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>calculateSnrMapping</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>abac709d59f48d292f147919854c002e2</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>calculateRSSIMapping</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a8ca42b7d77c0a1510255ec2a451d06d0</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrame *exclude=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a5eece8bf532f92912ccbd0a3bc4d6fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReceivedSignal</type>
      <name>currentSignal</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a22e578e992fab5ab54fe5fcdf196d9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isChannelIdle</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a535bb5ab48036db02bed8fcf5c4e415d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CSRInfo</type>
      <name>currentChannelSenseRequest</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>ac6cd60e58a8a557ed511f8193ced4f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>a33e7f02028e78116193d09d6cdbc987e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_base_decider.html</anchorfile>
      <anchor>aa22cd5156240713e37578172ba5557ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>ae47e3459af2a4a7a1f14f6e60d2fc4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const simtime_t</type>
      <name>notAgain</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a3edae7484aed7b0b874521c724bd3c30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BaseDecider::CSRInfo</name>
    <filename>struct_base_decider_1_1_c_s_r_info.html</filename>
    <member kind="function">
      <type>ChannelSenseRequest *</type>
      <name>getRequest</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>a080b7bc98ed8cbdb7c744609b1bedb58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRequest</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>afad3f1e0a61cccc6f6c4fcd2eec42520</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSenseStart</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>a0d10f3b6c7390e4a6c6fcbe51fd61219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenseStart</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>aa0175f22d381055a82117bb689cb4713</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getAnswerTime</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>ae1668895f55eb97041d93786b6a677ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAnswerTime</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>ac9baacbc20150f21914210b40946cde9</anchor>
      <arglist>(simtime_t_cref answerAt)</arglist>
    </member>
    <member kind="variable">
      <type>ChannelSenseRequest *</type>
      <name>first</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>a26075a0ae80ee25ce7b7ba995673bcbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>second</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>aed3b58f011fed59dd13105fa1f942f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>canAnswerAt</name>
      <anchorfile>struct_base_decider_1_1_c_s_r_info.html</anchorfile>
      <anchor>a2ca7a4ed7cd25be1c2b7c3dfabae79dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedIterator</name>
    <filename>class_base_delayed_iterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedIterator</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>abcab9572c280c99fef14ddd0a87412f9</anchor>
      <arglist>(Iterator *it, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedIterator</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a8e625392d1c0358b482f54d87ffb5887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>ab5238914bcef66527dd7a8ecb951d5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>aa0c12e487930b671c16e697782c4fcf3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a46a0da319b981b94d0c6e2bf73d0e28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>abc9b1227759ade39f70bde566d7ca596</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a0f4e26de87701b0d5522101c6161c568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a7315a6ec3aa9f6267fd84e207c9e09f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>undelayPosition</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>adc48153655a44a6cb038437df65dd8d8</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a2f79592eaa15f47a5c2758572ed58ce0</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a13b0a9510f63d62886e3359f5f1bcdb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a59687f9e8e1cf20dee889ade67390f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a3062c1ea41e22ca984d5fd0d9d50dc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>class_base_delayed_iterator.html</anchorfile>
      <anchor>a365d9f953c4c0951a3e19f7c219d67ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedMapping</name>
    <filename>class_base_delayed_mapping.html</filename>
    <templarg>Base</templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a4121ef9bead8791770437997bfb9ebf8</anchor>
      <arglist>(Base *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>ad6e567a57971d9b3ca8bd0cf64b4509a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Base::argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a9313b24f93d94b323f47a5fd0a849a04</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a922ff027b2032c6c5284518d21627b46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>aa90590b41b093a0ceccfa8a956517294</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getDelay</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a667349faa339199cee8e4578ceefa741</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a8706c7b3dfda9f2ac159a3ddc0938632</anchor>
      <arglist>(simtime_t_cref d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>mapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseFilteredIterator</name>
    <filename>class_base_filtered_iterator.html</filename>
    <templarg>Base</templarg>
    <member kind="typedef">
      <type>Base::argument_value_t</type>
      <name>argument_value_t</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a37be87cd4c1a250782d6d7b4758ffe15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::argument_value_cref_t</type>
      <name>argument_value_cref_t</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a8044e0808bc668aba7894fdf64a96ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseFilteredIterator</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a25ac1815f0f271b16081ac946b3dafbd</anchor>
      <arglist>(Base *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseFilteredIterator</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>aea198a80ef62879176936c11a1d677d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a8fcdb15b385b6002fccb23fda1b05bec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a946f4502219bdeaf9a7bb82beb4aa1b3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>aa988f218dbea7d9dd9b78950f071951e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a71f991a67d882d0ecc82ebdc47112f73</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>abbf0aa24021e5cf581e7b9109ae39650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a3ce64085acaddb83c3ba1ff609f13e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a3ecf227a5674b9334de5da528d020807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a76e879408ec7305bc5785be4cf8befa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>aa26459d30e85ab6d4497fd92f2eb6f14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>origIterator</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a7522be7db740698ef7e270677d9b0f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseLayer</name>
    <filename>class_base_layer.html</filename>
    <base>Veins::BatteryAccess</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a70f5ea30a9980d57b8384faed29ec3eb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a87d7e1e5aa73216f07e35d7be4358924</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a8c0fcfb2e806357a65d5bdb1c338627b</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>a5ca2278405070baa474dfbf059930247</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>aa37925527fae20a5de1a755103056219</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>class_base_layer.html</anchorfile>
      <anchor>ab412568faae75040194e01d5e541dd67</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseMacLayer</name>
    <filename>class_base_mac_layer.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>BaseMacMessageKinds</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a8f1f4f485d6548964c1f1cbd75d1d9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_MAC_MESSAGE_KIND</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a8f1f4f485d6548964c1f1cbd75d1d9c7a0e31be8e59c319e75d7a9858ff984a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseMacControlKinds</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TX_OVER</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483a5e5e0e55f7cc75b0d8bad06a212371f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PACKET_DROPPED</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483adebf9c77bbe6f19772866cccbef0fe4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_MAC_CONTROL_KIND</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483a914b2cf7aab4597589adb15d8fec8b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a1cd886803a8d77f30ece55862ad679fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a23cf7efcbdc6fd3f30c5e8209bb4e033</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a61c82dc3b225eac37f7fa9936c28c2c3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getMACAddress</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a4592cf257cd761ffb1167831d4f681f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>adc87295362ca7859cb6fe2a5bbe3c90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a6de2ca07018de313a7147a03e6d77bff</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a413375cec02b990a521b62086a02264c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a95ce03241a7dd66baa693607a74eca07</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a796d456d593dfab3188b37e506dd76a8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a4a1a81a79e239a0724f3b06d9f18c505</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>ab5c40c53eda6e5a5041bddebfab6e0b6</anchor>
      <arglist>(MacPkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a32d47cbd6940c09071e0f0e777cf6716</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Signal *</type>
      <name>createSignal</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a28ca155ff241c3e202a94724cc87b232</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref length, double power, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createConstantMapping</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a1c05648ce7d11bc767f9acd3d64ee067</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createRectangleMapping</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a23ed373dcfd98255df5f5ffa7e30eec6</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ConstMapping *</type>
      <name>createSingleFrequencyMapping</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a3da0a0f34a80528e6efcb5593a073c55</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref centerFreq, Argument::mapped_type_cref bandWith, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>ad7e8421f697848e8122e2261543e7780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getUpperDestinationFromControlInfo</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a64013bf689c9da4e79fa48116e14730e</anchor>
      <arglist>(const cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *const</type>
      <name>setUpControlInfo</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a7ff1f42ff72aee9670a012ebffb54881</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *const</type>
      <name>setDownControlInfo</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a999ed9cd9f29bf3470711cf37429ca62</anchor>
      <arglist>(cMessage *const pMsg, Signal *const pSignal)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>aa7b1e6bdb734765a9f4eff7d486dfbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a8c275aa0a523808a89d2e45ade46ed1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>a8a26df9da07801d8ccb530530ef57ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>ab3111737703e0d4b5198478fb1f75e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>phyHeaderLength</name>
      <anchorfile>class_base_mac_layer.html</anchorfile>
      <anchor>ac01d16af5596dd0a23f8906a7225d5b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseMobility</name>
    <filename>class_base_mobility.html</filename>
    <base>Veins::BatteryAccess</base>
    <member kind="enumeration">
      <type></type>
      <name>BorderPolicy</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REFLECT</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692a829b74c4a43c1dcf653cefb1f013442c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WRAP</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692aa1e7cff6cab8bb2e5377954240e5e9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PLACERANDOMLY</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692aba3a649e4ab9c49d2ba504eb267d6883</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RAISEERROR</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab98fb8c368f0440f799b286082ab9692a8e407aa7afa91b56f22fa0288cf64800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BaseMobilityMsgKinds</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOVE_HOST</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320a9b0e54a8ea2af0056ca7f6e3adf124d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOVE_TO_BORDER</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320a6b9f8a418aa568c2fbb42a631395edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_MOBILITY_KIND</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a4ff5688fe27813f0b48fbaaca7f77320af70de9be1467bc9627cb6087220ec40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BorderHandling</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOWHERE</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a853b2e0d3f99c2f6d055d42f0232ddea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>X_SMALLER</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1ad18e65d34ff94919ea9852c030d623f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>X_BIGGER</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a702032487f04b9f8175057934fa4c095</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Y_SMALLER</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a7bc26c24e4f04e88bba2e6c1301ee80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Y_BIGGER</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1af063b05510ed72bec2922676d5622ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Z_SMALLER</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a9f9d36e258d30fc681cac3086bcfd5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Z_BIGGER</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa9aa47015075d3e3caecd69a88ffe4c1a59d4a5a1d81e57d64160a91dfc051e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMobility</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a15457745146da27bc0a05dc3a534406e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMobility</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a911e98f6eb04ab67801e206f57e9daec</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aad7ebb839ae5726f97ccf149ae661333</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa89e41596faff0067340643acbab27d0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a342341f600bd2ebdbe9f39b0c44f12f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a43e40c6e56445ca9439d7d44a37b12c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a7dad57a3df9fc0e67b8eeb908a8b994f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>iconSizeTagToSize</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a27e651dbd0a13f5f1a40c8ac531fc367</anchor>
      <arglist>(const char *tag)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>iconSizeToTag</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a4385f329f6d9df7294297c98028083e2</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a70b2b357a4cef14850cd4edd440a13a7</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBorderMsg</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a1cd10753592e8eeb018d8f774ce862c6</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a9774524fd5f2d3ef348dc67f2af0f491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updatePosition</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a291eed23c07d4693a5fa4164aa80934e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeX</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>afd83457f242d92ccdc2e2b5a3b2c4dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeY</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a09941dabdb81e67c77fc4794167c9351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeZ</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a1245dec457a2d33c8dd1a70ccd74ea33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a8fa3e89fe9d550dfd95c341fcaa77e31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIfOutside</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aae36006995d117a723134cbe1fee5e90</anchor>
      <arglist>(BorderPolicy, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>acf49d9a33d055f987e4d978af8e3a30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BorderHandling</type>
      <name>checkIfOutside</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab69f42caa7932524bf470f0799b4aac7</anchor>
      <arglist>(Coord, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goToBorder</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a3bf65a049293dc4c7043554c04555bdc</anchor>
      <arglist>(BorderPolicy, BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectCoordinate</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a6c817348be2c3586777a85bb60e2b3f1</anchor>
      <arglist>(BorderHandling border, Coord &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectIfOutside</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab9e4cd0caa3fc245ba934f5f5bd9fc49</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wrapIfOutside</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a78f392149c0f8185e07dc9a51286bf85</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a933475f97d6ab7bf834e4d07beda131b</anchor>
      <arglist>(Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a6622a6eae6f6fb4bc2511a9f2d7f0593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Move</type>
      <name>move</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a1034fe1aa236bfa5bc2ae4adf3de8da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>af3cdd1192cfb8e70e53f36d03a20f1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>moveMsg</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>ab4535d31d36713218b22de49a1ecb2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aeb7ee6624bec58357e8fae54859c76c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>scaleNodeByDepth</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a686f8eba70fe8093c6f24eabace93f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>playgroundScaleX</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a15a299a658a5656b05e36ef100752399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>playgroundScaleY</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a366f2ef6324b7bfd4c04f235da9d077e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origDisplayWidth</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>af9f5b080a2f693930f895a0e99adfb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origDisplayHeight</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a1e9e54a292ca10e81e6b3972e9b5ebbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>origIconSize</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>aa729b28341a19fc6683cb8aea89fef3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>class_base_mobility.html</anchorfile>
      <anchor>a40070f59b11031830ba8055882ef43dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseModule</name>
    <filename>class_base_module.html</filename>
  </compound>
  <compound kind="class">
    <name>BasePhyLayer</name>
    <filename>class_base_phy_layer.html</filename>
    <base>Veins::ChannelAccess</base>
    <base>DeciderToPhyInterface</base>
    <base>MacToPhyInterface</base>
    <member kind="function">
      <type></type>
      <name>BasePhyLayer</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a6b1702943ae38fac8dcfd82afd0424f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasePhyLayer</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a0fc69907490ed2752d2a888ef26348ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ae32062e99cf8196496491bb6800ed3d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *const</type>
      <name>setUpControlInfo</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a39b6850ec657a0c898ccc59ca1ba9b4b</anchor>
      <arglist>(cMessage *const pMsg, DeciderResult *const pDeciderResult)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a905b025f39422a9ec57b9349ad36269c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a5170b3aadae25dc6b9e61974076be04b</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a7620c7de01e2dede5a68f13fda69e0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPhyHeaderLength</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a80855c8d3f55e6d4f8abaa66edd0264d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>aa662c2194a72e2c46f6b25e7e6901834</anchor>
      <arglist>(int newRadioChannel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a9d7df0ea2dd543f2722640716cda38e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a6e0968b1ab649992bad2e3e6e05d1e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a44a1a7e9bc420aa7b835c8a7687f97a5</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a42664d512b88bedf58b5d21adc180984</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a76d0386516d18d1cc64af5ef6fb315cd</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a0e9f0ccf4ed1d8377aa3f00b931a3e71</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ac2dce47fd96bb69e24977a7cd5f67a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>aa4c75db0828cf579907b1e9a9c683e99</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rescheduleMessage</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ac012473c1be0df5df5f901ad1a3e890e</anchor>
      <arglist>(cMessage *msg, simtime_t_cref t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a81153199f268b4831f42b20b06959764</anchor>
      <arglist>(double amount, int activity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseWorldUtility *</type>
      <name>getWorldUtility</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a08a74a5ac460912c7bd13ce8a2456d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a4be8fe4abf2c9705625f93114aa6d337</anchor>
      <arglist>(const char *name, double value, const char *unit=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>ad7c56c9ed2db85ecba91900c35e795a0</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelMobilityPtrType</type>
      <name>getMobilityModule</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a130bfd04f4e40b490929f99d96cc1aef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderToPhyInterface</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a945390696eba2d7cbee66a3a2e74ce5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyInterface</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>ad64ec5441297a309c39bae51cd72fcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>ProtocolIds</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ac815f0d4eee015857055e715d67ea087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>GENERIC</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ac815f0d4eee015857055e715d67ea087a896ce1408fae0c626b49bd3c29f20717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>AirFrameStates</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>START_RECEIVE</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1aa0cb17278ea70e7e327de30aad32e0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>RECEIVING</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1a2900d4f5f03ec09b83e5c24744924755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>END_RECEIVE</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a1333b977d8e274e32b80a4b300c96bc1a8c8f8a59dc873e035f19750598ceb157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; AnalogueModel * &gt;</type>
      <name>AnalogueModelList</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ac8dca20c727bdb1494d97da1c64bb55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, cMsgPar &gt;</type>
      <name>ParameterMap</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>af29abf3259af16b051ce48b0db7a64c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>readPar</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a379b5527a61ac5dfe378691faca6c2d9</anchor>
      <arglist>(const char *parName, const T defaultValue)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a08704deaf03b73c8eda67cc60e670853</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a3880154c8db8b8efb5315cb6ef8f6c41</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Radio *</type>
      <name>initializeRadio</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a93b118fa0564e329eb2ff68279f4584d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a419df7f53684ee758de1dcabb959e10f</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a095d1b5fd25b9ada3ac86d3c9237c3f8</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a1e42622259807fe3cf06935e7a818ccf</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>adb6dcf56295ceb53b34e83eb409a40a2</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishRadioSwitching</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ada6c556e50ead146f822dadf6ea2a472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>myProtocolId</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a3b24629e8306bac3186a94a3622ca5ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isKnownProtocolId</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a6b5052a6a2515e016f1e2e934cf09642</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a8d6f371fa6ea6ca89cb78764a05f31dd</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a17b1d469775962d23835dd5f43a639ac</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControlMessage</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a4cab267d310b5fd6cefe613fc8dfe71d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a17088ad93f59e143ff6c7ba866a31982</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a6866e3f79df84cdb5550a51d6502463f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAirFrameFirstReceive</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ad0e987003f09275647a060e8a72cc5fa</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameStartReceive</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a671f083680882230b754b7e9578e6274</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameReceiving</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a9dbbcf0004b22c622ec4b06a19b4f564</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameEndReceive</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a4f8fde562c0004b498fc3294c3f54c2f</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlMessageUp</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>aaa439e85a8bc20a39477055aecf04993</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMacPktUp</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>af5ac9665c3f3eaee7846ef0ba141b858</anchor>
      <arglist>(cMessage *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageDown</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a1fe847ed3e50ccf3a3740234dfee42b1</anchor>
      <arglist>(AirFrame *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSelfMessage</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>aa59aef501cadd36c94d4f82efe9b64be</anchor>
      <arglist>(cMessage *msg, simtime_t_cref time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>calculatePropagationDelay</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a01c12c70034ec0583ee5f4e1ac0f683b</anchor>
      <arglist>(const NicEntry *nic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToChannel</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>ae370934ad7b1feacc1cb6bd6ad437198</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocolId</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>addc3dfa9056f0acafefacd34d5d059bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>thermalNoise</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>afedc2cd6f80601fb040b56256e6cc756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxTXPower</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a80fe7028b2fbf92f61dd30b79e30a86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a7eaa041636b623066b5abd87a38afa25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recordStats</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a71f6c8e91a8f597a5d213b30c64b0cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelInfo</type>
      <name>channelInfo</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a38d35bc99079eff49deb6c870b1175e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Radio *</type>
      <name>radio</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a6aefa7200582ec18d6ac5f8f8092a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Decider *</type>
      <name>decider</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a5be00b3a133596d8ed78a9f8e38973d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnalogueModelList</type>
      <name>analogueModels</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>abc00fc5777ef641f72b5a4d85bf65c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a49fcd06f6c27aab1d14d13eaecc09f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a334fbbb0a1608058c46906ef2c90045f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>aca9b66970dd836cc696dd0907c58598b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ab58c7430371f1ba135e0a641d150c1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>radioSwitchingOverTimer</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ac28de586b21162c377a180233299a1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>txOverTimer</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a2ce22bc20ab469e99352958face5468d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a48f5fc0fe990ee5dbe31911437a586f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ad1de573273df163a5fc2b8b537c65e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSendDirect</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a6d0796809ee0e3bca6532d29e2c6691c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>cc</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a435c27e36989ef8b6e6dc068a3736e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a85d1389667af1253b9fb3acdcd120554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePropagationDelay</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a00c73e189cea1d023bd9600f34a89021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRegistered</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>ab9090e4cc34e9f33bad7fc8e15f06c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a0e35ef7396811a197d50d49d68369d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static short</type>
      <name>airFramePriority</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>ac68a290868512c992f8a49b6af7b6c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>add99c6c8d9983984e4b9ddbfcebb9b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getParametersFromXML</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>aa89a9272b99ab3005347301c2effc254</anchor>
      <arglist>(cXMLElement *xmlData, ParameterMap &amp;outputMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeAnalogueModels</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a8ea7353793eed2f1a7b0cd1caacd72e9</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeDecider</name>
      <anchorfile>class_base_phy_layer.html</anchorfile>
      <anchor>a9da4f8ffaa373a0de7895cbea524816b</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a94647bd7fd3cb6276450a17a2473f031</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BasePhyMessageKinds</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TX_OVER</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52ab00e54021af4a33a84ac61a7543c7528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RADIO_SWITCHING_OVER</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a876c7366bd2bcb675b41e60007831d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_SENSE_REQUEST</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52aa6ff58f5815b155504d37339ee5c7222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AIR_FRAME</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a96eafe94b4f472727793a10013af7671</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_BASE_PHY_KIND</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a25b918f3c2f7bd926610b544bc78497a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>a0dc69d65185a429fcd739d4eadedb504</anchor>
      <arglist>(cModule *nic)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseWaveApplLayer</name>
    <filename>class_base_wave_appl_layer.html</filename>
    <base>BaseApplLayer</base>
    <member kind="enumeration">
      <type></type>
      <name>WaveApplMessageKinds</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVICE_PROVIDER</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a9a9785163826105933e79fc32525cf45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEND_BEACON_EVT</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a89f7cbe24e3e742076acd2aea394d8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEND_BEACON_EVT_minicurso</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5aa203ab3097aeb8698f540a4d0e1b346a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVICE_EXPIRED_EVT</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a449185cbbe4bb0481cc5ece442a943a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVICE_QUERY_EVT</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a2dbb3f66951e34c7211e6aef0f236506</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVICE_EVT</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a7a796083091e91eaef43b53070f322fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOBILITY_EVT</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5a293b14424f80ffab7a704c5256c1ba05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEND_BEACON_EVT_epidemic</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a4a3db8fff925c8783c21fa9dde853dc5acf171b10235540b3427fb0965b3d2ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BaseWaveApplLayer</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>acb0faac09ec7fdc1ba73ccb9b5ee40e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize_default_veins_TraCI</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a1e1a0f73782dc4d07b5685faeaecacc9</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize_mfcv</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a02ee725cf1d32d6dd7f3c010d1e51470</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize_minicurso_UFPI_TraCI</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>aab3b2e113e51777281aec1e88fdcf2e1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize_osdp</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a70d992a2c523e27c7571c088d2c88590</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize_service_discovery</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>aea124f2d3a5a91b3f6fc843e4625ec9e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize_test1</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a96b4e10d6b98e021877fbb925e1865e1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize_epidemic</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a9aef9d25723a567a257b8915cba77361</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>ac6dc138be8605ada8191478c1e5cb4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>ab403cdb2a546bada74a3df37b477f72c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a69055de1e5462e98e07880476c90e5a4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a830e58e379655c6d24319c16f8db5e3d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual WaveShortMessage *</type>
      <name>prepareWSM</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a99419f231627d477c13b2b4573174295</anchor>
      <arglist>(std::string name, int dataLengthBits, t_channel channel, int priority, unsigned int rcvId, int serial=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual WaveShortMessage *</type>
      <name>prepareWSM_epidemic</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a9b516ecd60c5272098aeaa8c49f12a87</anchor>
      <arglist>(string name, int dataLengthBits, t_channel channel, int priority, unsigned int rcvId, int serial=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>MACToInteger</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a3838ef2e8dba7ab8767cf3c3d3d9883b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a3d6389feca9b74c86e5e0a82a7ffa4b2</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a6c6ab22ca68ba54da92b878131758bc2</anchor>
      <arglist>(WaveShortMessage *wsm)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a60322665b20fe28f586c1d090d3be2dd</anchor>
      <arglist>(WaveShortMessage *wsm)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a7e2f6b90747de344330137567d30fe65</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>beaconLengthBits</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a2254709e3a4adb669d0be38e578168bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>beaconPriority</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a29c46f1d7b7b318acda617192c11b7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendData</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a5a97137fd055fd8ec70609cdf6d2d673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendBeacons</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a46a0f0355edd6adf8578aee8e82e9e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>individualOffset</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a1fbb007c8d097f0835ab64d8d9711710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataLengthBits</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>af3b82dfc5a5b4640d1130385ff38bd4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dataOnSch</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a3cb7bca87c3ed7f4fd999f2c25821114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataPriority</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>aa64f5e93849af57871d115fa39bc358e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>curPosition</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a82273eabc911effa74638ef0104939f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySCH</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>ab2dabd99ddb3d7e5c5c760709be09650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myId</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>aecb7da475da7cab714cb3b9f26c27895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendBeaconEvt</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a167ca3ea974c9853e52e8e995c120d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WaveAppToMac1609_4Interface *</type>
      <name>myMac</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a88feeae30cb95aa4608a2e888329d093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sendSummaryVectorInterval</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>aff58e063673084179b7304df6a9a46d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maximumEpidemicBufferSize</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a75abed0b5a0e0bfdab7f7d289f6557d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>hopCount</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a744aae3d57e876be6c9e0289a12b4190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>source</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a449e5a6d3e87c647c4e46c2dbac99bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>target</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a8b43dcc614b85df2ed37818d950a765c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>class_base_wave_appl_layer.html</anchorfile>
      <anchor>a5a2010a07dea646f6d19cb09a8fa13e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseWorldUtility</name>
    <filename>class_base_world_utility.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseWorldUtility</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>aff195a9524d2d3973de0bdbe19ab5ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a08cd184861fa214245ba5c9928e5aefc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a179c8bf9d4613cbb1af0a85d779827a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a37a1abb90a220afdaf6dbdab58299e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a3c574ecd7a055ba2407f638ce548bc24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use2D</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a84c3d488e01d52be51c686e3fb206498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getUniqueAirFrameId</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a1c955c6c60dfa5b46a2bf683a20a84fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a84d040f815027b3098451b02733ac63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeIfNecessary</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>aabcceb57843568c213b0772b08971827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a74ba640d810a03334770d1f150fe1da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorusFlag</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>aa906ac76b1c5b51f6743104b532ed4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use2DFlag</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>abc092a88c21ecc008a7a32bc311201e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>airFrameId</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a490427de9d083bd510a4370002f70716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>class_base_world_utility.html</anchorfile>
      <anchor>a3c5b996451b88c37022a191668d715a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BorderMsg</name>
    <filename>class_border_msg.html</filename>
    <member kind="function">
      <type></type>
      <name>BorderMsg</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a250635a0bec2f14b1855dd1b5c05d1c8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BorderMsg</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a892bfb522edc6ae696c0ecfe67bd5a61</anchor>
      <arglist>(const BorderMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BorderMsg</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a4232cee99cb0b133f0e18bb058c40393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BorderMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a32d8ad057ac6bf61c01f12a4f5f867f3</anchor>
      <arglist>(const BorderMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BorderMsg *</type>
      <name>dup</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>ac8c31b191b65d8d5b53293b500aa595a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>aa0c2031b3010d390ab5c7f36bf0f1ada</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a2026a051adaf6f7ae47fb4e05ae761db</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPolicy</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>aacd57bf5f4b451f2cd0dcb8e046003b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPolicy</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>aa0371a4891d2ea7511a349ca7cc08e74</anchor>
      <arglist>(int policy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getStartPos</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>ad8cf7509b53714e4e0212e137d371bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getStartPos</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a2b86962a5fa313115446ae5739a094e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartPos</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>afc208cb998b157e7fbe712401c5f686a</anchor>
      <arglist>(const Coord &amp;startPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a101c3dea676ad7866d882b6c985b8962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>af7abd3055908df44d8f2c28c8a77d17e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDirection</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>abc409044ee39b6ff6fc3e896eae428c2</anchor>
      <arglist>(const Coord &amp;direction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a845d32b381eeb4604d8e60bd7e0cbf7c</anchor>
      <arglist>(const BorderMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>policy_var</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a1b2ffb07fc0f8a4b28025fd1d3621938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>startPos_var</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>ae92683f5984d7b5abbd6cc2da2579c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>direction_var</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>aa76b9debb404c6b9aee8013be5fe0e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_border_msg.html</anchorfile>
      <anchor>a6586c285a9c6d38b50ccd815839a6ebb</anchor>
      <arglist>(const BorderMsg &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BreakpointPathlossModel</name>
    <filename>class_breakpoint_pathloss_model.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>BreakpointPathlossModel</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a4d07c21c43a837163d3d5a4ebd6f533a</anchor>
      <arglist>(double L01, double L02, double alpha1, double alpha2, double breakpointDistance, double carrierFrequency, bool useTorus, const Coord &amp;playgroundSize, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a50fed0d02ee407b1ab602a6c203cfd83</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtDestination</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a40f8c0d27eba086bc3a2f6f65af1f37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtOrigin</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a1f36f2c1056bc9365838cc0d89d5e441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>aaf5084c5a5dc83b37a468e5813a8191d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a31580babd35b18cbd87a7ac30b71693f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01_real</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>abaedae8f705d49e1c7fc547eede38c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02_real</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>aea3fe4a5fdc2aead5a651791b07688d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha1</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a9308bf633a9048ae42b7b004d718606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha2</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>ab2b41fdd2300b115a75c9647a7cd7e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>breakpointDistance</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a8f5df99a4fac21e39f985b8af0d9412c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a15f631e677b586706c16f910187c5b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a06dc26cafc4157dabdf10303395f96be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a615b284b0cc9cc289daf530152cff657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>aa9f8dbeb8e7e0f3a9200652d1f81a88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pathlosses</name>
      <anchorfile>class_breakpoint_pathloss_model.html</anchorfile>
      <anchor>a0c6ce678120579025519343c8a0974c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo</name>
    <filename>class_channel_info.html</filename>
    <class kind="class">ChannelInfo::BaseIntersectionIterator</class>
    <class kind="class">ChannelInfo::IntersectionIterator</class>
    <member kind="typedef">
      <type>std::list&lt; AirFrame * &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>ae6ff7ee6e01ca8bfbd16e9934edcbe4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelInfo</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a09eae7a1fb5c4f9caa47be6d9b547061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelInfo</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>aeff578010103ae398c157568eecbaef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAirFrame</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a922ab80fac41c9d89871080940e07cd5</anchor>
      <arglist>(AirFrame *a, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>removeAirFrame</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>af9ee0be843528ee913df218f73d4d713</anchor>
      <arglist>(AirFrame *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAirFrames</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a76e9891245a5df7dd6bfb14e99e343e5</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getEarliestInfoPoint</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a58f6c6cd7e2dbd61877c27076510ba21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRecording</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>abab4a17344f3b254693ed34309c6466f</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRecording</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a884277584d1abf73eaca5df0c61e08c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRecording</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a5b1b8d56aa2fa64b5d79c0cf5c3167a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelEmpty</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a5af012c57b6bb9930b1634138ab65bf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; simtime_t, AirFrame * &gt;</type>
      <name>AirFrameTimePair</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>ae51fa470b3f5381d999c77190ccd44f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; AirFrameTimePair &gt;</type>
      <name>AirFrameTimeList</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a035fb2c30e213a68436d78776bb08dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; simtime_t, AirFrameTimeList &gt;</type>
      <name>AirFrameMatrix</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a7cf561db61870e6e49431440061ae624</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseIntersectionIterator&lt; const AirFrameMatrix, AirFrameMatrix::const_iterator, AirFrameTimeList::const_iterator &gt;</type>
      <name>ConstIntersectionIterator</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a0d01442390b9e8dd484e6f4d7975c14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, simtime_t &gt;</type>
      <name>AirFrameStartMap</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>aae7a390107aef628f7c9cbe5efbaeadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertNoIntersections</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a86eb4a8cae1a123e9125cd0e8977c548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getIntersections</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a683ab4280d9c20ad02bd1c080d71b6d1</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;outVector) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isIntersecting</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a2a4e738d7d51c1dc53ba7404b68103ec</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToInactives</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a002d7a0fff6734bdb6d8ddebf799f7f5</anchor>
      <arglist>(AirFrame *a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteAirFrame</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>aec072c13541b9a22bbdcc8e9103fe9e5</anchor>
      <arglist>(AirFrameMatrix &amp;airFrames, AirFrame *a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>findEarliestInfoPoint</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a627fbeddfec6f3ec1da17a91b97f1051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanInterval</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a1ffb197c5bf86824cd04313da5e9e4ed</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>canDiscardInterval</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>ab4da0befdce7f2b27ae4a61d66ec2167</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanFrom</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a3a3f57cc0461d0cb7b938feb58dc3947</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>activeAirFrames</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a2db96b70bb8678e3e4959985a7ef27a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>inactiveAirFrames</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>ac674b4797484960e332e260af4825c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameStartMap</type>
      <name>airFrameStarts</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a9c7678b4205557914b26e58edcdf44c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>earliestInfoPoint</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a747fb91cec51e11d6c13c895c1010c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>recordStartTime</name>
      <anchorfile>class_channel_info.html</anchorfile>
      <anchor>a647dc636e9aa2f8a70ac99b604336cb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo::BaseIntersectionIterator</name>
    <filename>class_channel_info_1_1_base_intersection_iterator.html</filename>
    <templarg>C</templarg>
    <templarg>ItMatrix</templarg>
    <templarg>ItList</templarg>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ab9c2eba6be7c04585799320ee70eded6</anchor>
      <arglist>(C *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>AirFrame *</type>
      <name>next</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a2acff6a4c595060ffc74872cdc0be1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>C *</type>
      <name>intervals</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a21f4d4a8145bb7f921a55be0ec9ac33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>from</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a143c8ac6bba842cfee4036ce28cecbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>to</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ac142323510df1ea0b1a51c216857a2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItMatrix</type>
      <name>endIt</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ac3b367cf74f12531161bc05e25bbed5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ItList</type>
      <name>startIt</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>aad1a3f8f1d790640f55f24993274a349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyNext</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a4cb31a7b3d9f1547ecbe41d123e929b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo::IntersectionIterator</name>
    <filename>class_channel_info_1_1_intersection_iterator.html</filename>
    <base>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>class_channel_info_1_1_intersection_iterator.html</anchorfile>
      <anchor>a77aafb5dafd8c49b09be14c63019ef28</anchor>
      <arglist>(AirFrameMatrix *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAirFrame</name>
      <anchorfile>class_channel_info_1_1_intersection_iterator.html</anchorfile>
      <anchor>a6f09ba91d68c971a39fd2c5652e0e4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ab9c2eba6be7c04585799320ee70eded6</anchor>
      <arglist>(AirFrameMatrix *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type>AirFrame *</type>
      <name>next</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a2acff6a4c595060ffc74872cdc0be1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameTimeList::iterator &gt;</type>
      <name>Base</name>
      <anchorfile>class_channel_info_1_1_intersection_iterator.html</anchorfile>
      <anchor>a28991accf59caddba2e5cc1874ba7682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameMatrix *</type>
      <name>intervals</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a21f4d4a8145bb7f921a55be0ec9ac33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>from</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a143c8ac6bba842cfee4036ce28cecbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>to</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ac142323510df1ea0b1a51c216857a2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameMatrix::iterator</type>
      <name>endIt</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>ac3b367cf74f12531161bc05e25bbed5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AirFrameTimeList::iterator</type>
      <name>startIt</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>aad1a3f8f1d790640f55f24993274a349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyNext</name>
      <anchorfile>class_channel_info_1_1_base_intersection_iterator.html</anchorfile>
      <anchor>a4cb31a7b3d9f1547ecbe41d123e929b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelSenseRequest</name>
    <filename>class_channel_sense_request.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelSenseRequest</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a17c27bb95acf77cc347b3cdfe60102d3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelSenseRequest</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a5ba4620119467ef99ad1657ad37bd0da</anchor>
      <arglist>(const ChannelSenseRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelSenseRequest</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a3ccb634cea782197a2a22e8975ef5191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelSenseRequest &amp;</type>
      <name>operator=</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a9e1757fb45c30bd7a5c8c32aef70dba1</anchor>
      <arglist>(const ChannelSenseRequest &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelSenseRequest *</type>
      <name>dup</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>ab81b7dc879dc6c2c793ae7bfae399454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>ad68b445d5a8c69a09c65cb11d411e691</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a644364dd659f75c361fa7a20a7c7c434</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSenseMode</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a27ef56313d2b2b273fba86467906518b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenseMode</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>aa42ba4a0c2754a1da0316374af3a5d81</anchor>
      <arglist>(int senseMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSenseTimeout</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a174933b0466807743cee69e497b39543</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenseTimeout</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>aaa2a3a31004b99ef172928a790158a6a</anchor>
      <arglist>(simtime_t senseTimeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState &amp;</type>
      <name>getResult</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>ac233fc2809e37c344bbdf44198da2912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ChannelState &amp;</type>
      <name>getResult</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>ad61ae58418171f8567b243875aded318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResult</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a0d14965927d61f2764b658bd3a8c3231</anchor>
      <arglist>(const ChannelState &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a508a0b3189aa8701c8e6b295fcf67f19</anchor>
      <arglist>(const ChannelSenseRequest &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senseMode_var</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>ab24bad0e2c81643a3c8f74695dc2283b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>senseTimeout_var</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>aa0833767f550b5a69983908cc3b5ecae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelState</type>
      <name>result_var</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>ad3f8efeabb242c5df4ef176e8060c25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_channel_sense_request.html</anchorfile>
      <anchor>a165c7caa939a74b93900b462731f26a8</anchor>
      <arglist>(const ChannelSenseRequest &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelState</name>
    <filename>class_channel_state.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelState</name>
      <anchorfile>class_channel_state.html</anchorfile>
      <anchor>a60196f82a7cf53dde36d88843343a6db</anchor>
      <arglist>(bool isIdle=false, double rssi=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdle</name>
      <anchorfile>class_channel_state.html</anchorfile>
      <anchor>ab09e4515d5428b1287a62ec1bd1b01fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRSSI</name>
      <anchorfile>class_channel_state.html</anchorfile>
      <anchor>a74ccec73c5ab45677575e568d3a455fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_channel_state.html</anchorfile>
      <anchor>aa7125a711299c62119c5fe5bc3f43f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idle</name>
      <anchorfile>class_channel_state.html</anchorfile>
      <anchor>a6ade0df6803fb49731266569e7c94df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>class_channel_state.html</anchorfile>
      <anchor>abb965a7dd22a6000b4a1dc68e55152f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMapping</name>
    <filename>class_concat_const_mapping.html</filename>
    <templarg></templarg>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a3eaa7d75fad245144e004160b15499f7</anchor>
      <arglist>(ConstMapping *refMapping, Iterator first, Iterator last, bool continueOutOfRange=true, Argument::mapped_type_cref oorValue=Argument::mapped_type(0), Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a66ebcfc32b9e6179a4d9bbf077300629</anchor>
      <arglist>(ConstMapping *refMapping, ConstMapping *other, bool continueOutOfRange=true, Argument::mapped_type_cref oorValue=Argument::mapped_type(0), Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMapping</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>ad9e4caf92010d92e76ed86a597e3399f</anchor>
      <arglist>(ConstMapping *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Argument::mapped_type</type>
      <name>getValue</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a28448679df346f8baf0f889bc0ab522a</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>createConcatenatedMapping</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a575967e48547622110a29a7b90f3c71a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a417cebabd88daa682ea0f3cae877eae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a738035f30d7c365838469aa3eb7e7381</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>ad8c0293ec56947b986802fcb636e42b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getRefMapping</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>abcd3a9507ddf2e6e227fb0682f736b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a7cfc5de32a0d03abfeb9b77fdcf7a413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a4e057daa0a3726cafa70bac0e5393b26</anchor>
      <arglist>(const DimensionSet &amp;dimSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMapping</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>ada5e6c6293bc459edbe69d711eefc8b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>argument_value_t</type>
      <name>operator[]</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a9b0ba6e7aaa108549dcd71069fefe199</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const DimensionSet &amp;</type>
      <name>getDimensionSet</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>acc1559cf5741bec3aa6422e94c5b9cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>stream &amp;</type>
      <name>print</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a526e8d5b948e9b2ce9d729e66b162e13</anchor>
      <arglist>(stream &amp;out, argument_value_cref_t lTimeScale=argument_value_t(1000), argument_value_cref_t lLeftColScale=Argument::MappedOne, const std::string &amp;sTableHead=std::string(&quot;o\\ms&quot;), const Dimension *const pOnlyDim=NULL) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; Dimension, Argument::const_iterator &gt;</type>
      <name>DimIteratorPair</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>afddf6a03d86de6f473b3b36e9523412e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>MappingSet</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a633e23b7b9cc932171a9242d286f0970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingSet</type>
      <name>mappings</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a0709d9769788a41c2bb43dbb62aea751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>refMapping</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a86b5292b536c5392543dc355111b19e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>a9fe7cdfd0278ebb79d419fe6d4073a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument::mapped_type</type>
      <name>oorValue</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>aabd4c2441626a2cf4af7a727e78bedde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Operator</type>
      <name>op</name>
      <anchorfile>class_concat_const_mapping.html</anchorfile>
      <anchor>af39cd5ee8c6ffea095d07d919162ea55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a009539b72014b7bed96402a5c244fca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type</type>
      <name>argument_value_t</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a5dac61c952f423e9a113ee90a4e0bdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type_cref</type>
      <name>argument_value_cref_t</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a136fb6397efc9ba6a16235fa95339db9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMappingIterator</name>
    <filename>class_concat_const_mapping_iterator.html</filename>
    <base>BaseFilteredIterator</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>class_concat_const_mapping_iterator.html</anchorfile>
      <anchor>ad12b11e0d0d30c51e75fefa7a31037fa</anchor>
      <arglist>(ConstMapping *baseMapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>class_concat_const_mapping_iterator.html</anchorfile>
      <anchor>adf03ef18a146cf084b5c3d21f765b031</anchor>
      <arglist>(ConstMapping *baseMapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcatConstMappingIterator</name>
      <anchorfile>class_concat_const_mapping_iterator.html</anchorfile>
      <anchor>a1c688f8cb08a686a0b7ae472b78f6add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>baseMapping</name>
      <anchorfile>class_concat_const_mapping_iterator.html</anchorfile>
      <anchor>a0106385bdcdcc52dcb340dff388c7e86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionManager</name>
    <filename>class_connection_manager.html</filename>
    <base>BaseConnectionManager</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>class_connection_manager.html</anchorfile>
      <anchor>abeb688210449aa6a62cb9cd76e5cfeaa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstantSimpleConstMapping</name>
    <filename>class_constant_simple_const_mapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>class_constant_simple_const_mapping.html</anchorfile>
      <anchor>ab15070ead8f2bf11b97432caece79c3f</anchor>
      <arglist>(const DimensionSet &amp;dims, argument_value_cref_t val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>class_constant_simple_const_mapping.html</anchorfile>
      <anchor>aefcb7fda17307a6362adcab3c288be39</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key, argument_value_cref_t val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_constant_simple_const_mapping.html</anchorfile>
      <anchor>adb5da06631cb62326749f586fa29033b</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_constant_simple_const_mapping.html</anchorfile>
      <anchor>a96ed56741bf27dcfecd59b68709a5ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_constant_simple_const_mapping.html</anchorfile>
      <anchor>a63d0eab4f014a7d8094544c0dca5d7f7</anchor>
      <arglist>(argument_value_cref_t val)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_constant_simple_const_mapping.html</anchorfile>
      <anchor>a63f15a3fb6da788dbaaeb8b1ee5470f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a70d0d044f36428965b77233bbf4c698b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>ab0dfc0c3ba9ba222176b29d88a4e6578</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a0794f7d9a8afe0dc17232211eb451302</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a2e89eb287b66b66bec570afa716a7e78</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a8ad8dfd538dabda7d637819a2f34a1b5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>acd1a6f80289031ea0f5ccc6b29cae9d5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a17d3c5e8c98e7451a844d59c95c7272a</anchor>
      <arglist>(const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a8555ecac0cfcfdcc07d540a640975607</anchor>
      <arglist>(const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>aca948c360cd24e21a92c80bf5f53cf16</anchor>
      <arglist>(const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>value</name>
      <anchorfile>class_constant_simple_const_mapping.html</anchorfile>
      <anchor>aa62373ce847f05e4d13c97ca420f3f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet</type>
      <name>keyEntries</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a022d4ae04338d12fad79f4e2f9b1f7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a4a48a5d4281c2bf8eda6b0cd96fb67e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a3804bf19eee40fe09c626b7ca9e0885e</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>aa6f392c0904f66eb264c597980873367</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, DimensionSet::const_iterator curDim, Argument &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstDelayedMapping</name>
    <filename>class_const_delayed_mapping.html</filename>
    <base>BaseDelayedMapping&lt; ConstMapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstDelayedMapping</name>
      <anchorfile>class_const_delayed_mapping.html</anchorfile>
      <anchor>a4942627acfe6611368e366610dcc39d2</anchor>
      <arglist>(ConstMapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstDelayedMapping</name>
      <anchorfile>class_const_delayed_mapping.html</anchorfile>
      <anchor>ae4cd7b0ea626b8ebaed72f87724d8e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_const_delayed_mapping.html</anchorfile>
      <anchor>ab03b6e6623b416997b4467b7e14dce69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a4121ef9bead8791770437997bfb9ebf8</anchor>
      <arglist>(ConstMapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>ad6e567a57971d9b3ca8bd0cf64b4509a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping::argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a9313b24f93d94b323f47a5fd0a849a04</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a922ff027b2032c6c5284518d21627b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>aa90590b41b093a0ceccfa8a956517294</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getDelay</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a667349faa339199cee8e4578ceefa741</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a8706c7b3dfda9f2ac159a3ddc0938632</anchor>
      <arglist>(simtime_t_cref d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>mapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstInterpolateableIterator</name>
    <filename>class_const_interpolateable_iterator.html</filename>
    <templarg>_Interpolator</templarg>
    <templarg>_IteratorType</templarg>
    <member kind="typedef">
      <type>_Interpolator</type>
      <name>interpolator_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a1ceb4238f825dc152217058c0c7dc001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::container_type</type>
      <name>container_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a50b68c37524eff1e40fc9b9977476e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>ad73c5dcc647fa3b7a84763a954fe11bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a2c972215632186ddedcda88204012353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a0d498cb8110907ecc04a5a9a005db9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a5c3a2627837864de9aa91b7a8ba4c815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a11cdbe76ac12b7479f1c4697131f6dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a524823dbf762366cded5cfe2ccca2939</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a7539b5f9b0b46a26a33d1f1c22845084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a7de2ff003436372e26b57596da13b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_IteratorType</type>
      <name>used_iterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>ad651c523db58df483cb6a3369406ef22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a5ed1c02edab5e7153ef4d29f26e57216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstInterpolateableIterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>af7376c0555d5afa5e51e5fef70d32d2b</anchor>
      <arglist>(const used_iterator &amp;first, const used_iterator &amp;last, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4cbe300c6f575e24a8ab9ab269cac8ff</anchor>
      <arglist>(const ConstInterpolateableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>ad149b5c37b429ccc1fc5615c217cd3de</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a812d4bd2ab7b419deb933b8c472e1912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a0a190c448a5cfbcd3385c6ccd316542f</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aa9b9aaf1491ef6ef251bc7399aecdf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>key_type</type>
      <name>getNextPosition</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aa545c5da980cbc9a5889ac6cf42d7b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRange</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4eca971338ae67b5ee34503cbcf1f342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4906a4e7a03086a28d108fc262faa969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getValue</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>afd052facfd07e1a139a6da76d129917e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getNextValue</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aca4c6576c12ffd03107960a356e76326</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>key_cref_type</type>
      <name>getPosition</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a2d8b162ab907fbc33e47db214f28518a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interpolator_type &amp;</type>
      <name>getInterpolator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a9e45b990b544290f7a0dd1a8155c4978</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>first</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a3720bcb63a64de42e4b16cb86df2bb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>last</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a15720a496cb3f3942707583ef80db5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>right</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4bb5e64387644bd21ca8345e15f5bcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>key_type</type>
      <name>position</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a22d17fb7ce4b73648b28e62b34292382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const interpolator_type &amp;</type>
      <name>interpolate</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aac41169286738eeb6ef050a87eb1ced3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMapping</name>
    <filename>class_const_mapping.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>afabbd15bb8f50e45901f99633d0a47c9</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a5ff3a15fe6d536fa7a26a3fe1ff1b274</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a951552e2e7f48717ed79d540af538d73</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a741e083fb18412a3d9cde7eac3dced10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>aedc3078350fcad21ac9c02d6f7245ad2</anchor>
      <arglist>(T v, unsigned int length) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>a3fcd3636b4a21f86cccb0d56373aa5a8</anchor>
      <arglist>(simtime_t_cref v, unsigned int length) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_const_mapping.html</anchorfile>
      <anchor>ac01413f3aae147d0c6b9cfcf411b610f</anchor>
      <arglist>(std::ostream &amp;out, const ConstMapping &amp;rMapToPrint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIterator</name>
    <filename>class_const_mapping_iterator.html</filename>
    <member kind="typedef">
      <type>Argument::mapped_type</type>
      <name>argument_value_t</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>ae00163bcffb33a9448f7ffb33d654417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type_cref</type>
      <name>argument_value_cref_t</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>a4e604f871cbb503b4d4f791067dc282f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMappingIterator</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>a44af24e1f1842d16c9b9f208f7946887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>a1f4cae3b170754a76049b8e81b2e3c07</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>ae3cdbe2115d0e87af0da549b675f2bf8</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>a6b6af19266855c21ce3e3449de3f0d6f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>a607d741e2d841265851a85670f247c46</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>afdafa6870cd19b3d35674a7bc777585d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>a4a6348a453418da95978e570fec046fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>ad4bac7233c154b7086c6124d2e21be49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>a047e853613d5a19ff34526d0cff8fcf9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_const_mapping_iterator.html</anchorfile>
      <anchor>ad4419c259e747867f003d07d62d4259f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIteratorWrapper</name>
    <filename>class_const_mapping_iterator_wrapper.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingIteratorWrapper</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a10f8c5f502b9cd83e9a6fa2d85195184</anchor>
      <arglist>(ConstMappingIterator *it)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstMappingIteratorWrapper</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a4d141200d6649997283e8c52447bfa49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>ab2f4649d596e15816b2503c6fd092b92</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a603cbcad1aa33945132a3b8e2cfb769e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a4864dc39a40cada6f4abde4fc6eea3b7</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a6e3de2e2477083e963498675ed8b78b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>ab96b7f5eca4759cdeaad879512340b93</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a01e885f408515be1170ce8af57de217b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a4a4bb9cfd56c7013bf5bd4347fef3293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>ab60f4f00ba7175122fe6afef43b7cfbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>aed031f6f66b8c703523fc41b0a7c2107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>a755c87e1eb464724fcc9e5908d25cfac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MappingIterator</name>
      <anchorfile>class_mapping_iterator.html</anchorfile>
      <anchor>afd541639ad951794e64291812bc1a1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *const</type>
      <name>iterator</name>
      <anchorfile>class_const_mapping_iterator_wrapper.html</anchorfile>
      <anchor>af2d62428852c6cefb80bd08c3aa565ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingWrapper</name>
    <filename>class_const_mapping_wrapper.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingWrapper</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>ae38ced1acdddd0231959fd66219b7bf2</anchor>
      <arglist>(const ConstMapping *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>ac5deda52edead17377c6c01a018baf62</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>ab5c7771bd13f8cdb93f5dce837fdffa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>ab6de270ec2325131f99174860f396025</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>a6706d0676194d24aa60059d93c8cbc44</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>a6a2c09d666b9e986798d0be48add4cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>a648971050f302ee9afd31ebd51d54698</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>a5290d7c6126897a26e810da626d115ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>a17b06a78a2258990893fddf79d9268a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>ab21dd4d22496e6b5dc34b8b6a55553b1</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>a4d721f5e319fdcf56b4285d1368795d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mapping</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>af41509fd27b48035334851487ca0599e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>a2a63bc33cabcddf8c0f5938afd2e3328</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>mapping</name>
      <anchorfile>class_const_mapping_wrapper.html</anchorfile>
      <anchor>aa83200fa10c919296e8af734a71d282e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterpolationMethod</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STEPS</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643a14b1d21bd98ca6e7e77dca120dd5eb0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NEAREST</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643afc951c0875bda3e7b8f6a9f7d4e90d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINEAR</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643ac8a952576b8d13258ba0f3c0f1584f9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Coord</name>
    <filename>class_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>add896c4f3fb15b4ad762b5270855345c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a93d47461a77c401891842045ff712f15</anchor>
      <arglist>(double x, double y, double z=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>aaa9f1d0acf5250162e417b61eb12a006</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a86994bfa7096155d951abb03dcf30bf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator*=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a41a7f41a153a3fdbed9dea051f0ae559</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator/=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a378973a28985ee7cb441eaf2e70ed378</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a07c952bb96124ea08eeff7bba3de6072</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>adda0e91b0e155a08a50e733dbfdb8837</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a2cafece343439d415c4557167556ba69</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>ab6a7bfcc5c55e5d8edbc7c0cb5a11626</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a9245e5acb794d95128e191e6faef99d4</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>aaf6119bf8bc9953d561729314de8ed5e</anchor>
      <arglist>(const Coord &amp;b, const Coord &amp;size) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squareLength</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a278c018d6de54a020c39b3b1afaec50e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>acc536671c07e1af44e6ad9676a6c39ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInBoundary</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a7a42e29d7a15ed0b53e47137549e00a6</anchor>
      <arglist>(const Coord &amp;lowerBound, const Coord &amp;upperBound) const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>min</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a0b27150571dfb315bea3e650ea2956a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>max</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>ac5a32e0e7a527085f63b7b3476ae47a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a0172a22ee75843a96e3a84ebc25f3de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>af6e543e0522076e717bae53102655b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a2bf056108a79437171f18490afbdce2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Coord</type>
      <name>ZERO</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a2d291cbb8e58af4ce8c68e9c8671b5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a93c1d69ee1ef5c0be5f31e9b55fafa84</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a4eb976e0a2def05ecb6464bd170b5fa9</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a0a956e1210813652ce2caa7529b3e0be</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator*</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a432afd497adcff7b20ca23af611ec919</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a310db4e85a0b20ec14725f49aae08cc3</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a2dc488cbfa8e8256dfc22b4916b9ef9b</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>class_coord.html</anchorfile>
      <anchor>a321e8d56735047b9e49f869fd8f23d3e</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider</name>
    <filename>class_decider.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a2039d051f59054d39d4a5e0b38f25086</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>ae8ada7aa9855a753d227547c6645fbc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>class_decider.html</anchorfile>
      <anchor>a93548ff29f4d880ed488785509dd4dd9</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211p</name>
    <filename>class_decider80211p.html</filename>
    <base>BaseDecider</base>
    <member kind="enumeration">
      <type></type>
      <name>Decider80211ControlKinds</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOTHING</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a4ef95cef9e5276bb69f181289d87465b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BITERROR</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a595d4bfa6bfb5e6d1f7429ae87f27232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAST_DECIDER_80211_CONTROL_KIND</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a8b6521705dd1c0284e213ecc2b56b21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RECWHILESEND</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a9dbe3844b4a79b28e999bf69d66e2936a781ec72ca9ecc73779b9681bca987770</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider80211p</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a5325b37fbf05bfb898f9e43dc6dc9c62</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, double centerFrequency, int myIndex=-1, bool collectCollisionStatistics=false, bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a72b8fdcfd0e5380592d4771739c88f53</anchor>
      <arglist>(std::string myPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cca</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>aeba984a7f23ef26ce8b22b0bfef88947</anchor>
      <arglist>(simtime_t_cref, AirFrame *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSignalState</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a6ba46e0992f59bc2100ab1b38c5c3d8e</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider80211p</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>adaa8c9ca10cb1ffc4625f8f436ff841c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeFrequency</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a05c2fcbb2f8b131ed7e43586f0e8c27d</anchor>
      <arglist>(double freq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannelIdleStatus</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>af06ba4862697730ee05b65f6bf90279b</anchor>
      <arglist>(bool isIdle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a57a6f772fe548a81a5d1eac1dc599544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>PACKET_OK_RESULT</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>DECODED</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62a57c51769b1d9cde91b15a1532ac3e05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>NOT_DECODED</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62a63130bce8cfb1de6a27c21d3ea954775</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>COLLISION</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>ad0064c1ed35c3133fb228c4ec7132c62a2f1dd001ad9934e5e1ded44c1c397c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>checkIfSignalOk</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a01349c12df6c01678d1e25553b754819</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a2a8f4a380e5a2ba44c36e43cc2033270</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>ac39637b3c4cfad57ba0b4518fea264d9</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>enum PACKET_OK_RESULT</type>
      <name>packetOk</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a25ca0927f831000b88741dc0db84246c</anchor>
      <arglist>(double snirMin, double snrMin, int lengthMPDU, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a09e54d78f37b5e61aa100ea5b9f3083f</anchor>
      <arglist>(simtime_t_cref min, simtime_t_cref max)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateSinrAndSnrMapping</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>aed94d240800692fe3a7c604a6d11e54e</anchor>
      <arglist>(AirFrame *frame, Mapping **sinrMap, Mapping **snrMap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>calculateNoiseRSSIMapping</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>af3174316d16de21ba92ee86ec5cb50cb</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrame *frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>aab3907b37bd0779d82550e4016925a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>centerFrequency</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a63166f2df7290bd1dca9bc8eb1adec07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myBusyTime</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>acd7272bc23a89d2ebeeab47c8ca416bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myStartTime</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>ab3d29f6e5748b9674359b7757efa91ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrame *</type>
      <name>curSyncFrame</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>af8be928f6037ca7a06cb5776703c52b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myPath</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a041c8d9549e5639205a7d4b6a7c800f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Decider80211pToPhy80211pInterface *</type>
      <name>phy11p</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>ad8a330871b158a8fd4cc4ce99be2ded9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; AirFrame *, int &gt;</type>
      <name>signalStates</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a11184426be32a5830853612faf0e917d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collectCollisionStats</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a3e139ef56bba67ee2679fa2b3e395cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collisions</name>
      <anchorfile>class_decider80211p.html</anchorfile>
      <anchor>a292a195d8db63436b0943940499dd576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211pToPhy80211pInterface</name>
    <filename>class_decider80211p_to_phy80211p_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Decider80211pToPhy80211pInterface</name>
      <anchorfile>class_decider80211p_to_phy80211p_interface.html</anchorfile>
      <anchor>ac376bd7fb61c3665f5d3d2f6ed68e4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>class_decider80211p_to_phy80211p_interface.html</anchorfile>
      <anchor>a71c8cb40450b065178bd9715b9f890ca</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult</name>
    <filename>class_decider_result.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeciderResult</name>
      <anchorfile>class_decider_result.html</anchorfile>
      <anchor>a8d682a73b124b89f30442a205c060061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeciderResult</name>
      <anchorfile>class_decider_result.html</anchorfile>
      <anchor>a86937859a140dbe670d6fa3a2f6f839a</anchor>
      <arglist>(bool isCorrect=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSignalCorrect</name>
      <anchorfile>class_decider_result.html</anchorfile>
      <anchor>aa0ff5bc718c64668cb1ce09c2c7dba80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isCorrect</name>
      <anchorfile>class_decider_result.html</anchorfile>
      <anchor>a73068fc2669c331401e00fd985ced574</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult80211</name>
    <filename>class_decider_result80211.html</filename>
    <base>DeciderResult</base>
    <member kind="function">
      <type></type>
      <name>DeciderResult80211</name>
      <anchorfile>class_decider_result80211.html</anchorfile>
      <anchor>a67b7eb5cb3ddad6136840f6c42399a4a</anchor>
      <arglist>(bool isCorrect, double bitrate, double snr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>class_decider_result80211.html</anchorfile>
      <anchor>a514a242a3b67f14f7536b6d59e26a7ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSnr</name>
      <anchorfile>class_decider_result80211.html</anchorfile>
      <anchor>a2a5d1c65094164e0fad38927a14a4fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>class_decider_result80211.html</anchorfile>
      <anchor>ab80f1803479db0321ff8532c9bed815e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snr</name>
      <anchorfile>class_decider_result80211.html</anchorfile>
      <anchor>a1fe1171bdbc17bfca48bcf700472375d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderToPhyInterface</name>
    <filename>class_decider_to_phy_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>aa7af5edbbc50269a93c10bd682aa79f6</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a2c55926187883df5bc322c947d317534</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a319e413b963f03ff218b0d0024fb66b9</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a3c0676323e402449d0972890c6a14df3</anchor>
      <arglist>(AirFrame *packet, DeciderResult *result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a73660771f127a990489fb04da07ea39e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>af85151048dba05ec27e378000fd95403</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rescheduleMessage</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a223fb24be9268abba32e90181fa248b9</anchor>
      <arglist>(cMessage *msg, simtime_t_cref t)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a1ee7d31b5bf0cda9e543ac91b3aaecc5</anchor>
      <arglist>(double amount, int activity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BaseWorldUtility *</type>
      <name>getWorldUtility</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a38a43555cea487af37053906bdfbf906</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a9183eb9c635a185f18da631f2d2d9f1c</anchor>
      <arglist>(const char *name, double value, const char *unit=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>class_decider_to_phy_interface.html</anchorfile>
      <anchor>a4183289df127440df1c6ec97af1e02f8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>default_veins_TraCI</name>
    <filename>classdefault__veins___tra_c_i.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a639af01c98fa830eb1f2b8de49afc661</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a712c055b5b98c22c74eb8df0e3a38558</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a33a1c46fa17352de406d2fd23456be92</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a87e402f998805bb76652b1e7774f79ed</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a8d4d22301ab6eb1af8904bd8a4023be9</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a0093b730415fcc50a1a41d5b6f55500f</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParkingUpdate</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a158ca0cba0cd16d44fd0ff7bda165efa</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>aa8f2d266ed9ba5f4e76f11aa30c33555</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a1d556026acf28d0c02d6f597328017f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a113f44a52cfae9d152ad3cefe8c4efcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastDroveAt</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>aeb95a31eb1bb7948593ed89ffb016a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>a3e2fb7c2f4d9124d268ddaf57903f589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>aa392ea6fa1fbd6f00f8c9b4688650bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendWhileParking</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>ac3b8c6d06d2e30d3dc8dc7ac8903ed03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>classdefault__veins___tra_c_i.html</anchorfile>
      <anchor>aceacc8395cd793b0a4d223c982c3f29c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>default_veins_TraCI_RSU</name>
    <filename>classdefault__veins___tra_c_i___r_s_u.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a4d1fde38eba336ba8a33084c9b024238</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a2c6414b50660838b5b7e6d83fe81ce06</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a29732bb0998b15a12abc3c0779dc882d</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>ad7392c71bd043b15d29c9f875e21b0b2</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a35777914c16076e751bbae6e38a29229</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>ae91a42af191287ac8d1234b7eee7bcb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>ac523e1774ded96b2c07fe2f182d36295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classdefault__veins___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a6df69bd87c373478276b797e5036072e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DelayedMapping</name>
    <filename>class_delayed_mapping.html</filename>
    <base>BaseDelayedMapping&lt; Mapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>DelayedMapping</name>
      <anchorfile>class_delayed_mapping.html</anchorfile>
      <anchor>a253e7a1fed320ca2531272c0fa4d529d</anchor>
      <arglist>(Mapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DelayedMapping</name>
      <anchorfile>class_delayed_mapping.html</anchorfile>
      <anchor>a764ddc58c30df062647b07282a235363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_delayed_mapping.html</anchorfile>
      <anchor>a27c3282471353c1e6def96b4e1604c56</anchor>
      <arglist>(const Argument &amp;pos, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>class_delayed_mapping.html</anchorfile>
      <anchor>ae298d25469c44c9cad54b33e8a787637</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_delayed_mapping.html</anchorfile>
      <anchor>a52ea3c1399aaecb055d63c535925bc33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_delayed_mapping.html</anchorfile>
      <anchor>a4dcb7018c79d6db7f0dc884dcabbcec1</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a4121ef9bead8791770437997bfb9ebf8</anchor>
      <arglist>(Mapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDelayedMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>ad6e567a57971d9b3ca8bd0cf64b4509a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping::argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a9313b24f93d94b323f47a5fd0a849a04</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a922ff027b2032c6c5284518d21627b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>aa90590b41b093a0ceccfa8a956517294</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getDelay</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a667349faa339199cee8e4578ceefa741</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a8706c7b3dfda9f2ac159a3ddc0938632</anchor>
      <arglist>(simtime_t_cref d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>afcd49c5a61e13dfa6041531540a252be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>mapping</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>class_base_delayed_mapping.html</anchorfile>
      <anchor>a057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dimension</name>
    <filename>class_dimension.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>DimensionIDMap</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a98893d7be4182e964c9c3e495fed3cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DimensionIDMap::key_type</type>
      <name>DimensionNameType</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a110a42d6dac62cbbf05514781be20bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DimensionIDMap::mapped_type</type>
      <name>DimensionIdType</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>ad9ba8fa6cca0539358c5351eec142132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>aa61dad15f33b6c3d09028ba9e545aa70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>aab6f22bcb151f1b29ece09e500643fc3</anchor>
      <arglist>(const DimensionNameType &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>aa28efdf18dbf57fdc444f2dd75f3da36</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a3ecf516080e05e566b995ceec18681e4</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a28bb1ac7d3b0ed4e8fd43c54203c552b</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a7b87afee490115d91184cadb4dbd19fb</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a63668e024e4a1ba8ac2d819bdf01de23</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a17b7c615400bc79a9e7fcc40f17914dc</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>DimensionNameType</type>
      <name>getName</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a722a82180c4e8ea5bf2a4a34898a841d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DimensionIdType</type>
      <name>getID</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a920a9f94db7163fa08ae0f00956d95e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>time_static</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a0ebe0eeec14af70b3f75f675c3eb7a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>frequency_static</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>aad8d4dbdfadd58664a90f34ce4d8154e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>time</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a16cb1f186dd3f48d33a4aebe948001d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>frequency</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>ad4360e7d88c881d06ee61033ad99d66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; DimensionIdType, DimensionNameType &gt;</type>
      <name>DimensionNameMap</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a8bac5d3aa88306fbd0192d13b80ed668</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionIDMap &amp;</type>
      <name>dimensionIDs</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>ada939a13a34a9c28edff67670caf873d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionNameMap &amp;</type>
      <name>dimensionNames</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a5dd35619b73de635a0a57aca248af68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionIdType &amp;</type>
      <name>nextFreeID</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a7b9273f9c3c429aa1cc924964645936e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getDimensionID</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a33426bf3820f16042adcb24948592877</anchor>
      <arglist>(const DimensionNameType &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionIdType</type>
      <name>id</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>a4d051377fa3482bdb1f6463eaded749e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_dimension.html</anchorfile>
      <anchor>aa6723258d45f8e2d57a861db96d05a43</anchor>
      <arglist>(std::ostream &amp;out, const Dimension &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DimensionSet</name>
    <filename>class_dimension_set.html</filename>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>a09645917a6984ef63aea0f3428fb97e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>a743d9c2b59961b111abb268aa4258b06</anchor>
      <arglist>(const DimensionSet::value_type &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>a3a857486e570401c8a748f90a9a63f8f</anchor>
      <arglist>(const DimensionSet::value_type &amp;d1, const DimensionSet::value_type &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>a8891447188b7e386f82e536546756157</anchor>
      <arglist>(const DimensionSet::value_type &amp;d1, const DimensionSet::value_type &amp;d2, const DimensionSet::value_type &amp;d3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubSet</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>aae6d8ce3a87e3e1571b97c92f11363fb</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRealSubSet</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>af3c9b9a85688a4f1ef8caa3b21bf7423</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>a397190b81dbfde450e4fe1e47633fb39</anchor>
      <arglist>(const DimensionSet::value_type &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDimension</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>a015cb6fa6c77b26b8c7b1e65827b8342</anchor>
      <arglist>(const DimensionSet::value_type &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>a3e0b9829cd18a28c2dce2bcb37e9c207</anchor>
      <arglist>(const DimensionSet &amp;o)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeDomain</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>abf3b99a319deca6efc123ec52d77d867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeFreqDomain</name>
      <anchorfile>class_dimension_set.html</anchorfile>
      <anchor>ac3f34a560d6c4ad5dc8d72dc69359b77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawAmount</name>
    <filename>class_draw_amount.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PowerType</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CURRENT</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4a016388dc7648bad664202c766d5fb922</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ENERGY</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4ad8fe7930899c36833e603cd89446d86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawAmount</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>a29f037ed6bda2e8aad742a9fb9cfec07</anchor>
      <arglist>(int type=CURRENT, double value=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DrawAmount</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>a8de3758a91834c1149836ff1d9502cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>a8cf70f5a3603f1c6e2936cfa4acdc1b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>ac3d6a9f36fb6f7d3141d4d28f64cf701</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>a7fffdcf0b57e6b1609f16351e9d4dad0</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>a8e411a80838eea09c6b38bc232e902ff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>ad7d65a7c37b7f2b4b48de40fd4e6bc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value</name>
      <anchorfile>class_draw_amount.html</anchorfile>
      <anchor>a5e5e81c528b00da622e79a04d603d4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>epidemic</name>
    <filename>classepidemic.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a8a6caa75f695661b99daec66dc29b49d</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a9e98f0ba6fc15b0d6bdfba683a1f4144</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>unordered_map&lt; string, WaveShortMessage &gt;</type>
      <name>MyMapEpidemicMessageBuffer</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>aa949b5c72d877f4cf91e0182eef0ade5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>pair&lt; string, WaveShortMessage &gt;</type>
      <name>MyPairEpidemicMessageBuffer</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>aaf2f790b4b9f632bb6831c3c7a2159a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a1d0d363afe79faf69671a46b3e3dbea2</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a21393ee6c5146e0158ded545f543e5ac</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendLocalSummaryVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a8d3ec16471e9453f721674cca0ef4d82</anchor>
      <arglist>(unsigned int newRecipientAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendEpidemicRequestMessageVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a5f8fc65f217cebee3ffcfbe56d28b01d</anchor>
      <arglist>(unsigned int newRecipientAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessagesRequested</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ab922f7335885658bfad15f085d9e8e15</anchor>
      <arglist>(string s, unsigned int recipientAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBeacon</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ac54157f21a4358897f483117855e8c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBeacon</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>aa2da133319028083d6ddb138a305a991</anchor>
      <arglist>(unsigned int target)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ae1e4741318f2a550da522fff204ad715</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>afbc9ec669dbe59a1d2032c12553400c8</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParkingUpdate</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a44e2ef65e238bd83814fed2337b39d00</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>getLocalSummaryVectorData</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>aac596f36850483d68c02d5f5900360bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>getEpidemicRequestMessageVectorData</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a10dc670788db22bf8d6cdd145cbe2ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WaveShortMessage</type>
      <name>getEpidemicLocalMessageBuffer</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a817fd6d1a2375fa417efc98660ee7f2a</anchor>
      <arglist>(string s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printNodesIRecentlySentSummaryVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>acf7ab35e094873b4796d4958e6d28fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicLocalMessageBuffer</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a3d2aa2dbe02869df323295550a102943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicRequestMessageVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ae9ae0b7ef2cdd64e14e86e696cc3d5a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printWaveShortMessage</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a830fa4472a6940665e2e9de49ad34cf2</anchor>
      <arglist>(WaveShortMessage wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printWaveShortMessage</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a8e884a75705156a70503d0be0037cf29</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicLocalSummaryVectorData</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a057756c9b8b581d5f44ffb943fe4f6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicRemoteSummaryVectorData</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a2857bc63bda357aae6b01c82d7c47560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEpidemicRequestMessageVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>aa746757b6189be4a0e0cc40261976e22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printQueueFIFO</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a69fc3ed41255998aef79be5d2d2046b8</anchor>
      <arglist>(queue&lt; string &gt; qFIFO)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEpidemicRemoteSummaryVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a936f264542e193706b06c15a28af39e6</anchor>
      <arglist>(string s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNumberOfContacts</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a0f2d22dee5ec7631d29b8e4b24d66239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateTarget</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a513f4608cba44c9e2486e81fa64dfa2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateMessage</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ad6a045ae2994f7bffad8d9c97f9126fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ad70b89792b095b03961c74924a636bc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a1ed993146a36d379ac2a222d8f7c805a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a76c4ba25397f38440abe7f0e0aecd0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastDroveAt</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>aa8f720041241e64fb6af29a4976c6f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a5b2ff2e0a0e8605b4ae1577ebb88b56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendWhileParking</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a8cc934674c7bc4a2fffc76ecc68c5b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumberOfContacts</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a19f9eeafdcf03e9eda73cf32092deeac</anchor>
      <arglist>[50]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MyMapEpidemicMessageBuffer</type>
      <name>epidemicLocalMessageBuffer</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ab009620b496d11810258463df842ef8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; string, bool &gt;</type>
      <name>epidemicLocalSummaryVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a70afbd0203fb2da0fafa036031b6010e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; string, bool &gt;</type>
      <name>epidemicRemoteSummaryVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a274e19be14aec4cbce195a68fbf2a2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; string, bool &gt;</type>
      <name>epidemicRequestMessageVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a9974591cebc66855299ee8fad467922d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; unsigned int, simtime_t &gt;</type>
      <name>nodesRecentlyFoundList</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>af5ba36bb83a0783d583ef04262bbe965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; unsigned int, simtime_t &gt;</type>
      <name>nodesIRecentlySentSummaryVector</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a4c61469fc4adad3666ffe2bbea56743b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>queue&lt; string &gt;</type>
      <name>queueFIFO</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>ad5a7c84b400f7c1c6ae76cb7c3ce97f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a66d4a1e020744894636578f0eaeffdb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static unsigned short int</type>
      <name>messageId</name>
      <anchorfile>classepidemic.html</anchorfile>
      <anchor>a24db2731fcae9f09c794725bb2ea457b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>epidemic_rsu</name>
    <filename>classepidemic__rsu.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a2f48c5f77c7d3eb705a75182c54da4c2</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>unordered_map&lt; string, WaveShortMessage &gt;</type>
      <name>MyMapEpidemicMessageBuffer</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a801a6cd24e695b1acc15abc907f4274e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>pair&lt; string, WaveShortMessage &gt;</type>
      <name>MyPairEpidemicMessageBuffer</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>ad6ae0a947dd3a458396197dfe3c6a981</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a198b769137de21b435a90f9092eb0df3</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>addc6771a70b0cb8f01df46df120357cb</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendLocalSummaryVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a7d5f30ee2711fa57054e8a63e278a62f</anchor>
      <arglist>(unsigned int newRecipientAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendEpidemicRequestMessageVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a0aad04c7373d719394ad1927aa4aa7a0</anchor>
      <arglist>(unsigned int newRecipientAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessagesRequested</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>aff93c911e10e4b1c29d2d1e4a0b3b931</anchor>
      <arglist>(string s, unsigned int recipientAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBeacon</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a4045ee27460db38accde23708b09dc5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBeacon</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a7e504bfbb880292b07db7a7099a07598</anchor>
      <arglist>(unsigned int target)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a1845eb4969a3b1dfdc75102f7924cc5c</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>getLocalSummaryVectorData</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a05a7c45c260965779093965872b45796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>getEpidemicRequestMessageVectorData</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>aaf3d7a504d919707ba554a8c71a8b232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WaveShortMessage</type>
      <name>getEpidemicLocalMessageBuffer</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a2e0f340fdf6056565b6ccb6e66834539</anchor>
      <arglist>(string s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printNodesIRecentlySentSummaryVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a9d38991442b41e646f2594c4bc364f36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicLocalMessageBuffer</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a14dbefb5a48ac9183fb05bea8a0a5320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicRequestMessageVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>af4fa46a85208027e133f47bcc72702ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printWaveShortMessage</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a2b8a5dece62b33a4fd1fe5420f5cc8b3</anchor>
      <arglist>(WaveShortMessage wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printWaveShortMessage</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a5f63818f6a38a33830e2c9365e2871b3</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicLocalSummaryVectorData</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a18a51c79a1568bbec08f0444286d0803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printEpidemicRemoteSummaryVectorData</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a7d6c1942df7a4982f1038550ff3091b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEpidemicRequestMessageVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>adcac67915bf040756d4e4ac441b81e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printQueueFIFO</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a0c368e853839139a0ffec0050effee33</anchor>
      <arglist>(queue&lt; string &gt; qFIFO)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEpidemicRemoteSummaryVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a49e9588c9df679a81cd6b4cf3f92910a</anchor>
      <arglist>(string s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a02af21adab5e20af24ce47383a30212f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>af612b1051a86ee8292d42aeba5dbcc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a695c51571b1e861d8dc3cd30be4010f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>ab1702ddabbf40b1bdb8782390f130df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MyMapEpidemicMessageBuffer</type>
      <name>epidemicLocalMessageBuffer</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a1e45f364c26de85c337f955bcbcf34a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; string, bool &gt;</type>
      <name>epidemicLocalSummaryVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a5137bf1fa3ad881453a5ef021e449f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; string, bool &gt;</type>
      <name>epidemicRemoteSummaryVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a9b8ea0fc2b712d754efffaabb7d674bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; string, bool &gt;</type>
      <name>epidemicRequestMessageVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>ac6eb07f3d5aeb3c83b1f55a474e74ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; unsigned int, simtime_t &gt;</type>
      <name>nodesRecentlyFoundList</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a20e9795c683cbf478c244df68c7a1402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unordered_map&lt; unsigned int, simtime_t &gt;</type>
      <name>nodesIRecentlySentSummaryVector</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>aa9091f30235c817e288ff0c91d987bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>queue&lt; string &gt;</type>
      <name>queueFIFO</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a40961a8168a9594b6613414f8e8e0ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maiortempo</name>
      <anchorfile>classepidemic__rsu.html</anchorfile>
      <anchor>a3d06a9ddc344cbc428b1bbba85c9d6f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMapping</name>
    <filename>class_filled_up_mapping.html</filename>
    <base>MultiDimMapping&lt; Linear &gt;</base>
    <member kind="typedef">
      <type>std::set&lt; argument_value_t &gt;</type>
      <name>KeySet</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a58651c85d6c379da4e22810a0f7f18ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Dimension, KeySet &gt;</type>
      <name>KeyMap</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a6b714062e32fe2c679b17c0ca7ee2c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>aa090d76ebccf9be3283594989b528ba7</anchor>
      <arglist>(const ConstMapping *source, const DimensionSet &amp;dims, const KeyMap &amp;rkeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilledUpMapping</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a3dc004029a03460606f140613322f33f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a115d30d5ca3f2f0acb43beb86a498332</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a13d1a4a5fbf6e7a1915b010d63ffc4d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>ac05ee0f09361957877cde397b66b028b</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ae6bc0b889d690c6f0993d0f03a0b159b</anchor>
      <arglist>(const DimensionSet &amp;myDims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a684348697ba51462eccf00c92f99ea64</anchor>
      <arglist>(const DimensionSet &amp;myDims, argument_value_cref_t oorv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a21647d49bf4759d7e1eac552fa518b43</anchor>
      <arglist>(const MultiDimMapping&lt; Linear &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const MultiDimMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>adf3d7e794c6e10795a4fa18d6e3b67d0</anchor>
      <arglist>(const MultiDimMapping&lt; Linear &gt; &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>aa9694225933d71570d8575dbbad1e55f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>af3aab4125df7b412bc7096779593f473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a524f27f6b8f01dc973dbe54f0f9c5ed2</anchor>
      <arglist>(const Argument &amp;pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a7b50181a1d5e38902c6468bc739f6aa7</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>getDimension</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a85e1d7321d200c9505d25419dcfc4783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>acdf62aed4b8a469e63c036e75567c2e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>aa659ff5ecd1020261cbd39d136ea1f57</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillRefIfNecessary</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>aa6a4087b7ecb1be68dade630c328ccc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a50e5f9b1fe7975287f2c18020a0a8353</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, const KeyMap &amp;rkeys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createSubSignal</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a46a248189b439d4a682b8fb78e9c0fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a9d4b17004ec39759f5876865a27a4f04</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>aee38eb77b429791423a13e020a3b15fd</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a3ac6685b718a771032556e192752c528</anchor>
      <arglist>(const MultiDimMapping&lt; Linear &gt; &amp;o, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mapped_type</type>
      <name>createSubSignal</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a1fbdfd6bd7d903fdd388556ead454461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copySubMappings</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>adbef2e27d79c3323d48e4c7a731b8274</anchor>
      <arglist>(const MultiDimMapping &amp;o)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>fillRef</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>a2771812d5f5398944fd9ac80e3d5f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyMap &amp;</type>
      <name>keys</name>
      <anchorfile>class_filled_up_mapping.html</anchorfile>
      <anchor>aa7dcdf39affa7efc2db8e67e4ca595eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>outOfRangeMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a50d98bf7c2b8070242694fda40ca49ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingWrapper *</type>
      <name>wrappedOORMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ac0623ee0b39d257c2283d4ab6ca9fcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a3109620ad45efea2104ebc7fa80662f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dimension</type>
      <name>myDimension</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ae9678ee0ab7315c97b0748f793acaaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isMaster</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a45aeec7eead2c432c971ca02fcdb0c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Linear&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a681c187c017568b30ab1f955205642ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a2f7fa4bf02e759ad62d0f546add33ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ac667e856842caea12a716fe6e4468b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a6b0c6123bcf332b028075bbb947bd51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>aa4958aa116b6ce5b1b93cc1b2c1431a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a93d02248ea48308e7ce69761186aa7b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMappingIterator</name>
    <filename>class_filled_up_mapping_iterator.html</filename>
    <base>MultiDimMappingIterator&lt; Linear &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>class_filled_up_mapping_iterator.html</anchorfile>
      <anchor>afde5d08a387ba90e46518a7e8c87fec3</anchor>
      <arglist>(FilledUpMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>class_filled_up_mapping_iterator.html</anchorfile>
      <anchor>a007146e1e1a7612a1f10cc5d20b1a03c</anchor>
      <arglist>(FilledUpMapping &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_filled_up_mapping_iterator.html</anchorfile>
      <anchor>acbc14ef74831e90fbb6ea7c31264667d</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a60281ab679beb5b3aff42d24d3d7bb09</anchor>
      <arglist>(MultiDimMapping&lt; Linear &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a07b68601d82a9250a0a588be293c1527</anchor>
      <arglist>(MultiDimMapping&lt; Linear &gt; &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMappingIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>aa90d2e657fa6b0e773eec7c2fa713c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a71f35cd0d6fabecb65019466018c51ca</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a3a3b5ddc5aa1636772b9a89c085acdfc</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a8928195a1fe4bb3af81d3ffe2391827e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ae4f87a308ad4648d289f1f66d8da772a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a89318443b1c2944e453df221ebdd2d3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a6b780009865b8643c7587c2833ee2fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a3a28409c944c35a15d0353abd689273d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ab41125ce8959de6fafb3347a7691ca52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a99bbed82612268040bb8f5162871fb48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Linear&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a1b55be43fd47c1879a3761d88a389cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ab54b5dafe1ca46dc46aaa15e734330ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>add0146735b031a0bad279b4652b6b4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a926bab0adcc3f7fd731e4e0c6a391881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a48c928d79af27bc468eb50cc24d15a38</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a37918121567f5a283b209113b2d4983a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a1eb04551f2a3ae22f0eae4844f14ac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const MultiDimMapping&lt; Linear &gt; &amp;</type>
      <name>mapping</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a77251b9d1da4418ccb2903fc94c7fcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a01dc79b6fe25cb048651ae8870e3d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>subMapping</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>aceffeb12d2e2bc67226d32ee4206fa40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>subIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ac2c7a223c07841c72d0ff860b0513e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>afa4ac8d36d24e411a3edce590b3c21a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ae3c745c1fea3a1bcd5694b5e1a692297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilteredMappingIterator</name>
    <filename>class_filtered_mapping_iterator.html</filename>
    <base>BaseFilteredIterator&lt; MappingIterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilteredMappingIterator</name>
      <anchorfile>class_filtered_mapping_iterator.html</anchorfile>
      <anchor>aa239f06958c35671f5f407224758b61c</anchor>
      <arglist>(MappingIterator *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilteredMappingIterator</name>
      <anchorfile>class_filtered_mapping_iterator.html</anchorfile>
      <anchor>adebf25df38a744978796c3754df312d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_filtered_mapping_iterator.html</anchorfile>
      <anchor>ac13e829a51e0065ab435f51af0e0eb9e</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseFilteredIterator</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a25ac1815f0f271b16081ac946b3dafbd</anchor>
      <arglist>(MappingIterator *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseFilteredIterator</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>aea198a80ef62879176936c11a1d677d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a8fcdb15b385b6002fccb23fda1b05bec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a946f4502219bdeaf9a7bb82beb4aa1b3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>aa988f218dbea7d9dd9b78950f071951e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a71f991a67d882d0ecc82ebdc47112f73</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>abbf0aa24021e5cf581e7b9109ae39650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a3ce64085acaddb83c3ba1ff609f13e46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a3ecf227a5674b9334de5da528d020807</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a76e879408ec7305bc5785be4cf8befa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>aa26459d30e85ab6d4497fd92f2eb6f14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>MappingIterator::argument_value_t</type>
      <name>argument_value_t</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a37be87cd4c1a250782d6d7b4758ffe15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MappingIterator::argument_value_cref_t</type>
      <name>argument_value_cref_t</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a8044e0808bc668aba7894fdf64a96ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>origIterator</name>
      <anchorfile>class_base_filtered_iterator.html</anchorfile>
      <anchor>a7522be7db740698ef7e270677d9b0f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindModule</name>
    <filename>class_find_module.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findSubModule</name>
      <anchorfile>class_find_module.html</anchorfile>
      <anchor>a661c335281d62d8df4affc46cc4fff9f</anchor>
      <arglist>(const cModule *const top)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findGlobalModule</name>
      <anchorfile>class_find_module.html</anchorfile>
      <anchor>a36e4632a6c8c7dbdc177639957a8e62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModule *const</type>
      <name>findHost</name>
      <anchorfile>class_find_module.html</anchorfile>
      <anchor>ad213402248cfa94efe6513d4944a44b3</anchor>
      <arglist>(cModule *const m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const cModule *const</type>
      <name>findHost</name>
      <anchorfile>class_find_module.html</anchorfile>
      <anchor>a226400f40a7cccd96c04df0504e89460</anchor>
      <arglist>(const cModule *const m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FWMath</name>
    <filename>class_f_w_math.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a2867eea5a97b7685de513a989046f699</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a76f6d077fea756cc254c9405d0b51708</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>modulo</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>adfee479fcdbaba84bd4cfa57cdacf97e</anchor>
      <arglist>(double a, double n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a38d2500887b49de2a2b5f8610f7ba6d1</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a4d2b3271455f9f914bd85c0e22064c09</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>aa9f55c74f3cb5eb99d5ff3d00ca3d281</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>ad5b2d4a46bf7af77e9cc0070b6a82c18</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>floorToZero</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>adb95c6d5b092b752dba10eddac28055d</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>a7fd5acab90d26f509178dbda7935adcf</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>af308407856d9835b103f2421e373ee28</anchor>
      <arglist>(double dBm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mW2dBm</name>
      <anchorfile>class_f_w_math.html</anchorfile>
      <anchor>af1390153a78142efb6af6225034f954f</anchor>
      <arglist>(double mW)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HostState</name>
    <filename>class_host_state.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>States</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACTIVE</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca24022de9465df959797f9b000cb87ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca1a8705dd49a3297fc8512a1ac63b78e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BROKEN</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3caad59622a148c4a5f0db2fd6c9fc8640d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SLEEP</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca7270c313de38886faaab80c7dd9b9864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OFF</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca7c7320a0c872c90c3a26adfa4eb48412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostState</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a9826824b5332180e2bedd17929b8f64d</anchor>
      <arglist>(States state=ACTIVE)</arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>get</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a3167de707748fd5280fce231d6cbcf90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a403e773f87d00a6c66f3f017441de752</anchor>
      <arglist>(States s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a3b7466f384edafc0214e39265e27fef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>States</type>
      <name>state</name>
      <anchorfile>class_host_state.html</anchorfile>
      <anchor>a891b154c7213fb04e5f3d42fdc22b0d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableIterator</name>
    <filename>class_interpolateable_iterator.html</filename>
    <templarg></templarg>
    <base>ConstInterpolateableIterator&lt; TInterpolator, TInterpolator::iterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>InterpolateableIterator</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>a293e156dd92c02e9795456cdf10da596</anchor>
      <arglist>(container_type &amp;cont, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>ac9ff6164dadb0782ba712d238fc5fa86</anchor>
      <arglist>(mapped_cref_type value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstInterpolateableIterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>af7376c0555d5afa5e51e5fef70d32d2b</anchor>
      <arglist>(const used_iterator &amp;first, const used_iterator &amp;last, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4cbe300c6f575e24a8ab9ab269cac8ff</anchor>
      <arglist>(const ConstInterpolateableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>ad149b5c37b429ccc1fc5615c217cd3de</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a812d4bd2ab7b419deb933b8c472e1912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a0a190c448a5cfbcd3385c6ccd316542f</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aa9b9aaf1491ef6ef251bc7399aecdf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>key_type</type>
      <name>getNextPosition</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aa545c5da980cbc9a5889ac6cf42d7b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRange</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4eca971338ae67b5ee34503cbcf1f342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4906a4e7a03086a28d108fc262faa969</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getValue</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>afd052facfd07e1a139a6da76d129917e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getNextValue</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aca4c6576c12ffd03107960a356e76326</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>key_cref_type</type>
      <name>getPosition</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a2d8b162ab907fbc33e47db214f28518a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const interpolator_type &amp;</type>
      <name>getInterpolator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a9e45b990b544290f7a0dd1a8155c4978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConstInterpolateableIterator&lt; TInterpolator, typename TInterpolator::iterator &gt;</type>
      <name>base_class_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>ab07de05ce33b5f79338b2f5e218eeae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>a505921570c714a08939e703212d827e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>aa306fd3c4d8c41c1385214120dd89f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>ac2ae0b3bac1aefdf810e89053f02c26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>ab277c7071b789b77db6c83bbfcfc73f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>a12a29f9eab93da3e4f23625dc4960b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>add69459cec530aaa14cedf90d90716df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>a6653fb735749f37a30af97972ccd9a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>af76b6af4717a8419ba2b81e890e47b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>ad5fdac01d126b7b8ecad075787fab475</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>a8b00771eedb6b1a9dffc453064834adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>a28eb737c6b8db4dba638e6ad8246346b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>container_type &amp;</type>
      <name>cont</name>
      <anchorfile>class_interpolateable_iterator.html</anchorfile>
      <anchor>af9666580c89cb80eddb2f56dae42f4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>first</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a3720bcb63a64de42e4b16cb86df2bb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>last</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a15720a496cb3f3942707583ef80db5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>right</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a4bb5e64387644bd21ca8345e15f5bcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>key_type</type>
      <name>position</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a22d17fb7ce4b73648b28e62b34292382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const interpolator_type &amp;</type>
      <name>interpolate</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>aac41169286738eeb6ef050a87eb1ced3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterpolator</type>
      <name>interpolator_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a1ceb4238f825dc152217058c0c7dc001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::container_type</type>
      <name>container_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a50b68c37524eff1e40fc9b9977476e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>ad73c5dcc647fa3b7a84763a954fe11bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a2c972215632186ddedcda88204012353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a0d498cb8110907ecc04a5a9a005db9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a5c3a2627837864de9aa91b7a8ba4c815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a11cdbe76ac12b7479f1c4697131f6dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a524823dbf762366cded5cfe2ccca2939</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a7539b5f9b0b46a26a33d1f1c22845084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a7de2ff003436372e26b57596da13b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterpolator::iterator</type>
      <name>used_iterator</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>ad651c523db58df483cb6a3369406ef22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_const_interpolateable_iterator.html</anchorfile>
      <anchor>a5ed1c02edab5e7153ef4d29f26e57216</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableMap</name>
    <filename>class_interpolateable_map.html</filename>
    <templarg>TInterpolator</templarg>
    <templarg>TContainer</templarg>
    <member kind="typedef">
      <type>TContainer</type>
      <name>container_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a217448304edf64b46dd8a6450ee6ae0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterpolator</type>
      <name>interpolator_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a4e2dca36f33ea59492d63df8a3b3e8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type</type>
      <name>base_class_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a96883c206968b6fab765146d045232c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a38d70c0bfa85e67af22ae4562ca18279</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>ac22ce1e261decb81e3bdf3514739bcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>ab0e9881a19ace90b9c51c963cecaab6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a7b31595ca7453acefd843882f7c26114</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>ac08e49dfa56e60af0723e27e97eb3543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a4c406f0681ae69646e492c3131786189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>af0d2068655034aa04a27d211e5371caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a9bc116f88a742364c74978f5451dc3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolateableIterator&lt; TInterpolator &gt;</type>
      <name>iterator_intpl</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a8dc26216c7b857ed3d95c1c1ad71653a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstInterpolateableIterator&lt; TInterpolator &gt;</type>
      <name>const_iterator_intpl</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a52de9937ce05597df151f9bf27673994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolateableMap</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>ace7661da5574910780ae447e25166448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolateableMap</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a5c76bbc893b2e8aa705f35e418a4ffb4</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a766980ed7805b730b0f1903eeb14793f</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getIntplValue</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a1548366830c2159110c902750646e6f5</anchor>
      <arglist>(key_cref_type pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator_intpl</type>
      <name>findIntpl</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>aa643292fee63e1ffde54ba2315ac22ca</anchor>
      <arglist>(key_cref_type pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator_intpl</type>
      <name>beginIntpl</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>ab83c65fc629eb8c3319a2915577ba6e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator_intpl</type>
      <name>findIntpl</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a9a6df4d973cec89c8f68b1c26c62ccdb</anchor>
      <arglist>(key_cref_type pos) __attribute__((noinline))</arglist>
    </member>
    <member kind="function">
      <type>iterator_intpl</type>
      <name>beginIntpl</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>a03130591ac495322129d1430f0243de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_type</type>
      <name>interpolate</name>
      <anchorfile>class_interpolateable_map.html</anchorfile>
      <anchor>aba1c44886e1f41cdd93da4f815faaeb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated</name>
    <filename>class_interpolated.html</filename>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a207d72329531eebb671b8cea5ab97b70</anchor>
      <arglist>(value_cref_type v, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a5bc92404ea98f1d8c353a378410be2d9</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>value_ref_type</type>
      <name>operator*</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a53c90a1d6e549581c19e53ef1f65440f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_ptr_type</type>
      <name>operator-&gt;</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>afb3e2c2374f4711a181d1139e4ab4266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>aa79ee9b9410d2c1477bf8cc296a4a418</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a50f7e4a2eb744d4cc2248d04d213541c</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>isInterpolated</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a6b2dcc90823cd33ba7e61f68521bc8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a5ec4d0c5b3342f331ea4b1dd2bc43e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const value_type &amp;</type>
      <name>value_cref_type</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a756b43519b8caf161667b2f95fddddc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type &amp;</type>
      <name>value_ref_type</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>ae30aa0fd552a7f6a8e85daaccec05635</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type *</type>
      <name>value_ptr_type</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>af784a6d2f1a39319ca4606a38fa0c0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a767a013b8c29f231984ac735b4b59955</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>class_interpolated.html</anchorfile>
      <anchor>a1443df9b2916a20ef54693bd489e10c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated&lt; Mapping * &gt;</name>
    <filename>class_interpolated_3_01_mapping_01_5_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>ae6dbef7dabca0ce3f6f3110b28b48c8e</anchor>
      <arglist>(const LinearIntplMapping &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a95f58fb7ed93ec9a752d2d85581796a1</anchor>
      <arglist>(value_type v, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>abcc2242b37e937bac5261d8cc21ba969</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Interpolated&lt; value_type &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a874d4789884a8df189e48b1b127363f8</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>value_ref_type</type>
      <name>operator*</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a2e84fa1860da47f333628f4cab75c376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_ptr_type</type>
      <name>operator-&gt;</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a4e9ca385dff76dca305c1d17c6a77f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a8fa16c929197e0a3f0a1439fea227962</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a7820435c4be5899c98725451d1297a6b</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInterpolated</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a5f5b0e3a8adb3c2ec8b4178476334cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Mapping *</type>
      <name>value_type</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>abfe0e5f0e7bda34ffb30a8bc0a73afa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const value_type &amp;</type>
      <name>value_cref_type</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a105b8f3df84e235b9d97c061d8cf2807</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type &amp;</type>
      <name>value_ref_type</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>ac6fe46e95755e3b9d07e443a4c8d0f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type *</type>
      <name>value_ptr_type</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>ae69d4f775ded2f2a35789c55875da7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearIntplMapping</type>
      <name>mapping</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a41f35d1266c83a26a22d6d0b411ec34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a35663ec8d3ab796e7ad7b20a2526bebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPointer</name>
      <anchorfile>class_interpolated_3_01_mapping_01_5_01_4.html</anchorfile>
      <anchor>a34000edebc6bbcca908e4cf61f0256d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolatorBase</name>
    <filename>class_interpolator_base.html</filename>
    <templarg>_ContainerType</templarg>
    <member kind="typedef">
      <type>_ContainerType</type>
      <name>storage_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a5425b9d0d46fc00e73bfbfd5dac2235b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type</type>
      <name>container_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a08ed542e8cf2d5d5db6a57853d99b395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a77ef89f853cd60547a36139edcc08e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>adc214ec8fb530ba3366e27ed0562afe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a86d79e0651ad28e573d9e459431d1d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>aacd78d74d033b98dab7e6e4a4ff37827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a2a4373ff4faec82f586e83ef61e49ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>afebb8b6a1cee5e65401bcae5fb664bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a728b368da1a67c20b07538eb2a2841ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PairLess&lt; pair_type, key_type &gt;</type>
      <name>comparator_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a0d624c60eda67b0801122c3803a9fc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolated&lt; mapped_type &gt;</type>
      <name>interpolated</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a809a32fb20618d965208bd82424bb853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a3ad648d39fbf37047d763dccbb94adf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ac60b7bfe1d54bb98e6bd9fc86046f8a7</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolatorBase</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>abbba9006a470a5d2838b2c8cd2227423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>continueAtOutOfRange</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a418f7310b70491f3151af9c629de1731</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>af2aaa8a601ff4b04f34578b6e3d9d793</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ad595dcb21de2a3342353a6d537a817e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ad20a467fabf3bf4173251d6f3c6a7deb</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a8cf11628ee68fe8a058021afeb63ac75</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>mapped_cref_type</type>
      <name>getOutOfRangeVal</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a1f80f85cc052c18230de63753ef0455c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>comparator_type</type>
      <name>comp</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a833e51f2e6ce34330574ea3850b906db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>interpolated</type>
      <name>asInterpolated</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ae79c26e2532175da7eaf9b8183c7cfe9</anchor>
      <arglist>(mapped_cref_type rVal, bool bIsOutOfRange, bool bIsInterpolated=true) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ae1e39c73d7d763baea464c1eec0a8b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>outOfRangeVal</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a33d2db2305227e4b7fe5e2ec7e800b80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFading</name>
    <filename>class_jakes_fading.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>JakesFading</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>a8086f34c9ff99c62e99b976082abd40c</anchor>
      <arglist>(int fadingPaths, simtime_t_cref delayRMS, double carrierFrequency, simtime_t_cref interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JakesFading</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>a44991f849a6d094ad73f66063eab8ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>ae02fbdbf7ef6db9b78a3416076074190</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fadingPaths</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>ad28b3b2fd11307bf33869c5bbdd27a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>angleOfArrival</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>a7f9a358fb5cdfd19e6d1e7c97627ad4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t *</type>
      <name>delay</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>a2f0c52cb4f441a2abba9aec17194fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>a8c91a22de8e520176877f7421d033ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>interval</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>aa15d56a2dadede1a0432103d60d6d927</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>JakesFadingMapping</name>
      <anchorfile>class_jakes_fading.html</anchorfile>
      <anchor>a512ebf4ce5a76e1580f7058c9fd49d90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFadingMapping</name>
    <filename>class_jakes_fading_mapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>JakesFadingMapping</name>
      <anchorfile>class_jakes_fading_mapping.html</anchorfile>
      <anchor>a5feea6585c074e1dab16486600db7a25</anchor>
      <arglist>(JakesFading *model, double relSpeed, const Argument &amp;start, const Argument &amp;interval, const Argument &amp;end)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>class_jakes_fading_mapping.html</anchorfile>
      <anchor>a23e8978d7aab4509f846ac6a8044de19</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_jakes_fading_mapping.html</anchorfile>
      <anchor>ab8c347fa961711d3fd2c86b425cddc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JakesFading *</type>
      <name>model</name>
      <anchorfile>class_jakes_fading_mapping.html</anchorfile>
      <anchor>afe3bf29047cfa0f35c20926441261738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>relSpeed</name>
      <anchorfile>class_jakes_fading_mapping.html</anchorfile>
      <anchor>a02aab24700471b25a801010842d54cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>class_jakes_fading_mapping.html</anchorfile>
      <anchor>a52281acdf3981141a525adb9e18792e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LAddress</name>
    <filename>class_l_address.html</filename>
    <member kind="typedef">
      <type>long</type>
      <name>L2Type</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>aea56b60dcb5ae8c2bde465271daf7210</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>L3Type</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>ad85cd9e8d9e7e9cd5d02dd740c4a12a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL2Broadcast</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>a3890f1c7314c5695e32252468e6bd5a5</anchor>
      <arglist>(const L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL3Broadcast</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>a97a5c1c1f73f4255cabc4e292c4ad503</anchor>
      <arglist>(const L3Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L2Type</type>
      <name>L2BROADCAST</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>a9f975ad0433f1fb8a01164f266a41f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L2Type</type>
      <name>L2NULL</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>a6db1e8dbd0d23dec49ce7b59f5c15976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L3Type</type>
      <name>L3BROADCAST</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>a11d63e8d897e072ed94da77028d38f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L3Type</type>
      <name>L3NULL</name>
      <anchorfile>class_l_address.html</anchorfile>
      <anchor>a629f951ff7bc5f42e945bbc5573c4a0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear</name>
    <filename>class_linear.html</filename>
    <templarg>_ContainerType</templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>ae4aff7c07b3e286d4231b3528e20f534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a9b58190e85080e5f0625129ac36d625d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a015cf391305098dc6b77a24d650901c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a36d310d8c19c1213acd89410f44eb452</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>ad160f7737fb0fb36c93371fdd1dabafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a751115e8a051cbc3a73402ddd21dc646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a8e8da73cf46884662fd5e34aefb768f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a1d942a4028e62e8244e4fe0444083088</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a7b8513e26af82a2c8828da7142885a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>acd86c11e235767ca73e44c429be39f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>af09c69fdb1436d1e6287ead51b4eec6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a9b1f8c82b49868ba0c535d63452367fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a5d56885bbe8346505f27dcf8a244fbdf</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Linear</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>aa0cef4541cdfd89031f31144307f8eea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a1927a59614f2880683c9ee3795ab59fd</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a0945731f864d171dbf23386f301b9345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static mapped_type</type>
      <name>linearInterpolationFactor</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a6bc0698641121198130b488f54692c3f</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static mapped_type</type>
      <name>linearInterpolation</name>
      <anchorfile>class_linear.html</anchorfile>
      <anchor>a427fcfc748f399f9ff8a17fb794ce82f</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1, mapped_cref_type v0, mapped_cref_type v1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</name>
    <filename>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</filename>
    <base>InterpolatorBase&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a4040145fe6161ede2994bd6762a1d533</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ac7116a5748d75ea3105be24501b9ec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>aa50b0bf0efe24b268bd2d1338f3d1ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ab59de965f056c3e07cf77dceadd2ea55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a35b6316a117349e57e2b9d66851d2f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a95f8cc4fc9eac2410529e020c445c495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ad633b9d04356417275b775ea432dbc21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a3c815e58c3878a834078d9dd9a13b4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a1d23ddc7054d05e1318a3f29f1c7ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>aff04706e49346c00d4fe1148eda956d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a12116f0bfeffd29c01086e2fdf9ef36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Argument::mapped_type, Mapping * &gt;</type>
      <name>storage_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a5425b9d0d46fc00e73bfbfd5dac2235b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type</type>
      <name>container_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a08ed542e8cf2d5d5db6a57853d99b395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a77ef89f853cd60547a36139edcc08e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>adc214ec8fb530ba3366e27ed0562afe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a86d79e0651ad28e573d9e459431d1d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>aacd78d74d033b98dab7e6e4a4ff37827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a2a4373ff4faec82f586e83ef61e49ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>afebb8b6a1cee5e65401bcae5fb664bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a728b368da1a67c20b07538eb2a2841ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PairLess&lt; pair_type, key_type &gt;</type>
      <name>comparator_type</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a0d624c60eda67b0801122c3803a9fc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolated&lt; mapped_type &gt;</type>
      <name>interpolated</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a809a32fb20618d965208bd82424bb853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>acad49038d3a32b0595949750b846866c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a003c98781f6a5cb06766457bd2b2900e</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Linear</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a0d87ce7b1faa7d5301ae55df19014929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>ae9b11d23c7aa15f1f4f182caa81ce74b</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a3ad648d39fbf37047d763dccbb94adf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ac60b7bfe1d54bb98e6bd9fc86046f8a7</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolatorBase</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>abbba9006a470a5d2838b2c8cd2227423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>continueAtOutOfRange</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a418f7310b70491f3151af9c629de1731</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>af2aaa8a601ff4b04f34578b6e3d9d793</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ad595dcb21de2a3342353a6d537a817e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a8cf11628ee68fe8a058021afeb63ac75</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>mapped_cref_type</type>
      <name>getOutOfRangeVal</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a1f80f85cc052c18230de63753ef0455c</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</type>
      <name>base_class_type</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>a31035d6e59ff98439fc3470be035f74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConstMapping::argument_value_t</type>
      <name>linearInterpolationFactor</name>
      <anchorfile>class_linear_3_01std_1_1map_3_01_argument_1_1mapped__type_00_01_mapping_01_5_01_4_01_4.html</anchorfile>
      <anchor>aab6548d5edb2e331e905f569d0e6cf0a</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1)</arglist>
    </member>
    <member kind="variable">
      <type>comparator_type</type>
      <name>comp</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a833e51f2e6ce34330574ea3850b906db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>interpolated</type>
      <name>asInterpolated</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ae79c26e2532175da7eaf9b8183c7cfe9</anchor>
      <arglist>(mapped_cref_type rVal, bool bIsOutOfRange, bool bIsInterpolated=true) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>ae1e39c73d7d763baea464c1eec0a8b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>outOfRangeVal</name>
      <anchorfile>class_interpolator_base.html</anchorfile>
      <anchor>a33d2db2305227e4b7fe5e2ec7e800b80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMapping</name>
    <filename>class_linear_intpl_mapping.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMapping</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>a6cd4807affa51b25bf4dbad38b0ccc35</anchor>
      <arglist>(const ConstMapping *const left=NULL, const ConstMapping *const right=NULL, argument_value_cref_t f=Argument::MappedZero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>adeef3fecfcb6b2551ee205e6e1e69166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>a8711b30cf4ab9148864caa503240adb4</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>a3a3735ea665eb5d05d8f8d5fc29f408d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>ad0da987f0b7bd22db5a18ca2558533a4</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>a8d7ca5d97f319d6f971564f5fd1dc94e</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>left</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>afafb880ac49c9f688a51b880cd421786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>right</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>a4a77750e0d7b50c0c18b0b55f4d0baff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>factor</name>
      <anchorfile>class_linear_intpl_mapping.html</anchorfile>
      <anchor>a77ebd0c5378c9b518e317578c1b4a936</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMappingIterator</name>
    <filename>class_linear_intpl_mapping_iterator.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMappingIterator</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>ae9431327ab0c4c20b29950cef7af45fc</anchor>
      <arglist>(ConstMappingIterator *leftIt, ConstMappingIterator *rightIt, argument_value_cref_t f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearIntplMappingIterator</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>ae6640d047e2f8fbf1990d07f901d5dd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>afd257e5e5a70bf27869aac0ce2de9114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a43bdceb0dade66a9d763a1a7f9e34119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>ac53a581da221a4467b11d731c6363ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a3e091971d2bb7c505071812fce9e4376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a7d03bb45b115f011b4a1175f67506211</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a4815486cedcd67fad5fe08d86867f527</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>aba27952eacf852f6098aa05bc7bc3c8d</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a431ef331baaeb739d6b7255ccca98fe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>ab8aba8a0341ee7e0731da138486fae36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>af0420a645633bd90a0f7775f2c6f527b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>leftIt</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a45afec325d2566593b51e75ca04b3d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>rightIt</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a39075af633fbfe901e92bde9d2db2fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>factor</name>
      <anchorfile>class_linear_intpl_mapping_iterator.html</anchorfile>
      <anchor>a79eddacf96dbc6279bee80b3c915132f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogNormalShadowing</name>
    <filename>class_log_normal_shadowing.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>LogNormalShadowing</name>
      <anchorfile>class_log_normal_shadowing.html</anchorfile>
      <anchor>a50187c1c7d025725f8fcba3afd01e076</anchor>
      <arglist>(double mean, double stdDev, simtime_t_cref interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogNormalShadowing</name>
      <anchorfile>class_log_normal_shadowing.html</anchorfile>
      <anchor>a1562003748d366431fb43497a711d6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_log_normal_shadowing.html</anchorfile>
      <anchor>abecf1f338dc41facc038dbcd8a863ccd</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomLogNormalGain</name>
      <anchorfile>class_log_normal_shadowing.html</anchorfile>
      <anchor>ab81e4e559d16d59321fe0dced4a45806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mean</name>
      <anchorfile>class_log_normal_shadowing.html</anchorfile>
      <anchor>aee67e375c4b7d3c77626db7cade7dc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stdDev</name>
      <anchorfile>class_log_normal_shadowing.html</anchorfile>
      <anchor>aca2682f5148bf872b64cb1dd6495829b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>interval</name>
      <anchorfile>class_log_normal_shadowing.html</anchorfile>
      <anchor>a7b8e51fa4f9b3e1369cc9f882eef22ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac1609_4</name>
    <filename>class_mac1609__4.html</filename>
    <base>BaseMacLayer</base>
    <base>WaveAppToMac1609_4Interface</base>
    <class kind="class">Mac1609_4::EDCA</class>
    <member kind="enumeration">
      <type></type>
      <name>t_access_category</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_BK</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2af695584c0b18e078223c0ef37300d7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_BE</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2a9ecadf9d2e758c47d63f946763be1769</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_VI</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2a5a0d5c48abfa9f387d8d20caf7813be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AC_VO</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a1ebd8faa51fdcaf3881c5799cb6eedb2a045c33e07a10288c28820266e7bd5609</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mac1609_4</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a0f1db11ef138c86619532e8daf187720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeServiceChannel</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a245aaca6cf34abba6f207a8a4347a272</anchor>
      <arglist>(int channelNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WaveAppToMac1609_4Interface</name>
      <anchorfile>class_wave_app_to_mac1609__4_interface.html</anchorfile>
      <anchor>a8f76e18acdb28159af05e6f1ae156e28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a898fd0c2fee5cc98d17cac36368133a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a0ad9618ca8e21b55ba5834d264bc5e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a2909c6cda932d7e69db061969744ac70</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>ac93bf319ea2065fd7e8c041697e49919</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aa3be1bf4f5bae024352a2dd328630fed</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a551d295ebf0b23896f4d272e3db3961d</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>acd9a4c2d76215c064e5ce9dbc717c280</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setActiveChannel</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aae66bc58b1e0a8bb64accea786b20756</anchor>
      <arglist>(t_channel state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeLeftInSlot</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a85b16cc9c45d0a2ca674f2ee069a0b39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeLeftTillGuardOver</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a41a9c4025c9840048f72a0d758230af8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>guardActive</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a621bca21c2e13d7312361fd86d648a2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachSignal</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a4b45a21c4ab3abe61001009363d0fba0</anchor>
      <arglist>(Mac80211Pkt *mac, simtime_t startTime, double frequency)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Signal *</type>
      <name>createSignal</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a595e16f42f8bcaca1d4dc0a366ac9208</anchor>
      <arglist>(simtime_t start, simtime_t length, double power, double bitrate, double frequency)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>t_access_category</type>
      <name>mapPriority</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>ab9af38c017be622de450cec6aeab649c</anchor>
      <arglist>(int prio)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelBusy</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a9f2753889d64a26c7b2cad5d0698573e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelBusySelf</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a67e75c8cc468f946f320b82d346a157b</anchor>
      <arglist>(bool generateTxOp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelIdle</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a1c6717faaa6b882f1d68153a4a22ae62</anchor>
      <arglist>(bool afterSwitch=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setParametersForBitrate</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a803d37e17046e2f7a46e7993406f390d</anchor>
      <arglist>(int bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>getFrameDuration</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a62c4555fe81ddee2c986a50fd38e6a5d</anchor>
      <arglist>(int payloadLengthBits) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nextChannelSwitch</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aaa14c46dac7942bdc20a0994254bf7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nextMacEvent</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a58ee6fc69df74cc438a2430232e1aa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastIdle</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a343e6979db2dc3bf055c735cd85ca35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastBusy</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>ac1ee54cb2b396a173697300ea8c52d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_channel</type>
      <name>activeChannel</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a5cb56d2693ddba67eccd99c7c97bcfcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_access_category</type>
      <name>lastAC</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a89becf9ddec1491311a2f34c98d9f238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, double &gt;</type>
      <name>frequency</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a7165e727fefefce4b8c511bae86992fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a260353a2e9314987a7627e6dc62f9f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSCH</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a6dc35ed931af0c3234fccbeb34c19449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySCH</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aaa9b5c49afd5c5209dfc6a8ddb66bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; t_channel, EDCA * &gt;</type>
      <name>myEDCA</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a4a6f40d8c74555698700d96f0f936cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idleChannel</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a2f9281812e0647ef557a98e37ba6b199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsReceivedPackets</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>ab00c4fd0a2e9d2f5b9a0a24b3b7c3ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsReceivedBroadcasts</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>ad21f14ef01c0c637663d5aa71b04e8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSentPackets</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a644442457fb78ab8af8f8783f5741769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsTXRXLostPackets</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aa178645ccccb38ddd433a3f3562a2ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSNIRLostPackets</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a673c557c0be2621d0db6804e9477e486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsDroppedPackets</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a0ce51b3f24d069c17456f205f7bf505f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumTooLittleTime</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a2fd24f63561e5537924afca373a32fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumInternalContention</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aea096de5e89047c661f55e5b5b419ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsNumBackoff</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a590a7ab360ba581bdefaf7d03918a1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>statsSlotsBackoff</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aabe3de7563e21195ac6a583630c73d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>statsTotalBusyTime</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a023fd759fac09ecda9cd25e41944334c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMacAddress</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aa379acd97ed72946d97e318113d83ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a89fbb81fdfe80a5ae118c8d39c750b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>ae6e7406b5ba509c46726d22d76070631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>n_dbps</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a63a98bca030a95f14ed2f56482159fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myId</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>a7b67a422ce0f507e3b415a5cb689ef43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mac80211pToPhy11pInterface *</type>
      <name>phy11p</name>
      <anchorfile>class_mac1609__4.html</anchorfile>
      <anchor>aa797b2dc32579c2aea6e6be8241682eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac1609_4::EDCA</name>
    <filename>class_mac1609__4_1_1_e_d_c_a.html</filename>
    <class kind="class">Mac1609_4::EDCA::EDCAQueue</class>
    <member kind="function">
      <type></type>
      <name>EDCA</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>afc1892b3a95d98d9b41e99d60de438a3</anchor>
      <arglist>(t_channel channelType, int maxQueueLength=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>createQueue</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a056a8566b9d7d881bc5b106cfd82ac71</anchor>
      <arglist>(int aifsn, int cwMin, int cwMax, t_access_category)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queuePacket</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>ab6bd1d6758ea4ba621d93d07c479431d</anchor>
      <arglist>(t_access_category AC, WaveShortMessage *cmsg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backoff</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>ab94c6c328029a01f40832b54ddc757ad</anchor>
      <arglist>(t_access_category ac)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>startContent</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a5a4e0df1a7ab5239ce63125322a8a889</anchor>
      <arglist>(simtime_t idleSince, bool guardActive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopContent</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a1ae6241b22b64c5f0bd51a288e05c53a</anchor>
      <arglist>(bool allowBackoff, bool generateTxOp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postTransmit</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a378c2cb7b226501ee33fbefbed1cded7</anchor>
      <arglist>(t_access_category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revokeTxOPs</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>ae04062ff3bd85df50a5067324c419e98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanUp</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a1d3f59cc6488e4aa8cbd0f58d2cb34ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WaveShortMessage *</type>
      <name>initiateTransmit</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a49d443ea798288eca3f6ee2aad537e20</anchor>
      <arglist>(simtime_t idleSince)</arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; t_access_category, EDCAQueue &gt;</type>
      <name>myQueues</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a505d6b6ee4cfee3d8f94b1cb37fa8424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numQueues</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>aebd9709df95d172724b3d054f4a908c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>maxQueueSize</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a414a96e8ee08d2338be8d3d87d327ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastStart</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a27fb605ffa37e23c64007b76a4c27111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_channel</type>
      <name>channelType</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a0f1c7d8635f2859a4c3f1404deb224fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsNumInternalContention</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a856a0c0c2659e1e0019cc485950bc793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsNumBackoff</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a8cf2e47d5c7eb8b4e07a05574728386f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>statsSlotsBackoff</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>a90e175f5528e11762dacd400ba62aa62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myId</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a.html</anchorfile>
      <anchor>ae86ed83198522b2d1fd392d990f074d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac1609_4::EDCA::EDCAQueue</name>
    <filename>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>EDCAQueue</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a59ff6ecede6d3e55381ed2002ebd1be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EDCAQueue</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>ad2f01c281a4b2bc25e2e7827f6f32dfe</anchor>
      <arglist>(int aifsn, int cwMin, int cwMax, t_access_category ac)</arglist>
    </member>
    <member kind="variable">
      <type>std::queue&lt; WaveShortMessage * &gt;</type>
      <name>queue</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a438592247d29082a7d625f28dde8298e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>aifsn</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>af5d57035671b18fe5efa0ac701d2d41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwMin</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a3e608ec0d7c61588240b7bf143567d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwMax</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a55fe1534f0762fa50f80793accc4e399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cwCur</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a49f3d85b4a8a2378692a5ea1ab1098b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentBackoff</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>a13dfc70f4e6bc92d5d6091230f661e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>txOP</name>
      <anchorfile>class_mac1609__4_1_1_e_d_c_a_1_1_e_d_c_a_queue.html</anchorfile>
      <anchor>ac221fa69ef9728273f0407e5bf774db8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211Pkt</name>
    <filename>class_mac80211_pkt.html</filename>
    <base>MacPkt</base>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>acb1acab70511a8f72c91126f9fdfc208</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mac80211Pkt</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>abe7c0c369090d23061c5cf2f37acc209</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211Pkt</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ae9e07f9d3a3a0cfa7baf6bf8e28f65d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mac80211Pkt &amp;</type>
      <name>operator=</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ad331807f8af5caaffb5b5907bb11eeaf</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mac80211Pkt *</type>
      <name>dup</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a776e1a1cbb1ffe3ab3de3021c98dcf73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a1144a74898858f49dad6127b7e8be378</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>aaad500fa35ddd6977afa79bb7be354e3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress3</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a23a4ef5064f02ab3baeb6c981112bd62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress3</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a5b6cc41b76ca9a12d3b1a26603dfca19</anchor>
      <arglist>(int address3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAddress4</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>adc552c838cf52c72aaff37535e8201cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress4</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a6f480b4dbfb1fa3cb505c9ef3b46171e</anchor>
      <arglist>(int address4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFragmentation</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a22e372ef8e329454b1cd5efcd87bb379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFragmentation</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ae2a1e6629066ce50b36aba3f2c507dfc</anchor>
      <arglist>(int fragmentation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInformationDS</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a0fe52502bb84646b6b8847502654565e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInformationDS</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a8c75609ba1415669c33ee6b9b8f6b193</anchor>
      <arglist>(int informationDS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSequenceControl</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ae7d0482b082ff80790aefcf31fd59654</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceControl</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>adbca0d4e46baf13fca1dc387ac6eb920</anchor>
      <arglist>(int sequenceControl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRetry</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ad3617893f55f3c590c5a959a4e124890</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetry</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a589e9b54ec5f59bda2947a6efe4ad501</anchor>
      <arglist>(bool retry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDuration</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a09e39966710115add8cdc1b774313570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuration</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>aabdb5fec5f203e9ba50a01d14cd7b023</anchor>
      <arglist>(simtime_t duration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a1f24bd362499c0ebe6528eff055ca57c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacPkt</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>adc3e316e7e97db79eb6f1a3772b9ef7d</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacPkt</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aee59ef903831b032bb47e54f34466c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MacPkt &amp;</type>
      <name>operator=</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a681e8e899f966bbf57abc045ea336d04</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a54bad417fd6840a8a7bd7e829c0a8244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a564ac532b26d7fac11bdde0f129bbc01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a72fd30a2a508d10258c3fddd7167549d</anchor>
      <arglist>(const LAddress::L2Type &amp;destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a0d65290bfc1bf7687cf53faa80ae9bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getSrcAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a41095230d3e3609da8bf11489c1e3868</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcAddr</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>adbb8351e4adc8c8bc3d8147a80d9917f</anchor>
      <arglist>(const LAddress::L2Type &amp;srcAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getSequenceId</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a0439f6a29f8d1888c6d45ed6841d3fdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSequenceId</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a3396b26a60e9c6564717a308835bc31a</anchor>
      <arglist>(long sequenceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ac28b8ac3d496ad7e1b880ccda716d5cc</anchor>
      <arglist>(const Mac80211Pkt &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>ab0f0ba5f0db2897fc765c2e36c52eb06</anchor>
      <arglist>(const MacPkt &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address3_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>af7f74328cdd7f690d057fa3f5e9a733f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>address4_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ac2a02bf19c58439b1424760faa4f8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fragmentation_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a64030e6443cf9d6e4aad55cc32ab89da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>informationDS_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>ad84dd60877536e0c74274979ab20c868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sequenceControl_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a2aedb86f996b4a010e796041b8b45d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>retry_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a99d65c9640bc92440527ae4ae3b19e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration_var</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a915c6675d8a8ea72deea2192b3c51172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>destAddr_var</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>ad34a8033f7ac0f3e7dfe5d19bdc430dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>srcAddr_var</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a7f1a956c653e6c0f51cfc2956224a514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>sequenceId_var</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>ad90102f16b2ac313c6967ca8e8a08cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_mac80211_pkt.html</anchorfile>
      <anchor>a82252c64f823185043ecd5085da70a6c</anchor>
      <arglist>(const Mac80211Pkt &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211pToPhy11pInterface</name>
    <filename>class_mac80211p_to_phy11p_interface.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>BasePhyMessageKinds</name>
      <anchorfile>class_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a22f71b541e700f61333fcadd25145607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_IDLE</name>
      <anchorfile>class_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a22f71b541e700f61333fcadd25145607a0abe83e48054b6d1c24e150f131251b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_BUSY</name>
      <anchorfile>class_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a22f71b541e700f61333fcadd25145607aeebb40f1f66fb962f7cc5e3b398cc424</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeListeningFrequency</name>
      <anchorfile>class_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a91d9c16438fc0ec7c0e3b4907f178d4d</anchor>
      <arglist>(double freq)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mac80211pToPhy11pInterface</name>
      <anchorfile>class_mac80211p_to_phy11p_interface.html</anchorfile>
      <anchor>a8403db10cea6032fae6725e63c013880</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacPkt</name>
    <filename>class_mac_pkt.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>dup</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aa69f340785a86e94ab9f0a50d3877819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aef7e817d2be4e94a533a89e5b6d78c59</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>aa028fb1b5ccd6142b2078843531e48d9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_mac_pkt.html</anchorfile>
      <anchor>a43007ce645a8100e47fe3fd3d84e5caa</anchor>
      <arglist>(const MacPkt &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToNetwControlInfo</name>
    <filename>class_mac_to_netw_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>MacToNetwControlInfo</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a64db17e5d3c98005d3116db08853960d</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop, double ber=0, double rssi=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToNetwControlInfo</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a9399aa277ab5647efe0576a2651eb2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitErrorRate</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>affe2b8ca5fb613155ffa6818dd5338ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>ac893214f0521cb356739841c63f1c498</anchor>
      <arglist>(double ber)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getLastHopMac</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a308453ed9a395b5150618bca3294d0b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastHopMac</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a789cde71306e4d00c552c502a09e9a12</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double</type>
      <name>getRSSI</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>aa5a3ee1ad3f78209ab7ce2798252e813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRSSI</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>ac912ee19746ecde01512876568c95839</anchor>
      <arglist>(double _rssi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>ab441b40ab3bd8077f452ff1bacbc4da9</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddress</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a94a1bdc4327f5fdefd1b6b8112d21dc4</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddressFromControlInfo</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a3749066e121d0e912e6aeb92dd8a480c</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitErrorRate</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a0be178839f0e97e8695e5915e84b6dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>lastHopMac</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a69d09f2d4b0f7603b5cfa0bd8efafe61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>class_mac_to_netw_control_info.html</anchorfile>
      <anchor>a5cfb3c928d4706098e74ac8e1dc95b7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyControlInfo</name>
    <filename>class_mac_to_phy_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>MacToPhyControlInfo</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>acde623038e9b9a2b756e48cb5b393d8a</anchor>
      <arglist>(Signal *signal=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyControlInfo</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>ad4a56f10fab531b0076aadb0904175b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignal</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>a37b1b75e5bc8026af8d3de5bb3b318ab</anchor>
      <arglist>(Signal *s)</arglist>
    </member>
    <member kind="function">
      <type>Signal *</type>
      <name>retrieveSignal</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>a5e04d8d4088109ccccb7c3fcdae526a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>aba344dd933a50dceb1fe5e80ffecebe5</anchor>
      <arglist>(cMessage *const pMsg, Signal *const pSignal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal *const</type>
      <name>getSignal</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>a5b414803a71b46b62ae03022edb71a3c</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal *const</type>
      <name>getSignalFromControlInfo</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>a2f42fccc127d84cf6853058f501da3ec</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal *</type>
      <name>signal</name>
      <anchorfile>class_mac_to_phy_control_info.html</anchorfile>
      <anchor>a05a564d743e50aa370ee796ee932c8a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyInterface</name>
    <filename>class_mac_to_phy_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a8447e9cc66ba633aa11a59387cce477c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>ad25abbad9aa16bdbf24bf1dd582b1c6f</anchor>
      <arglist>(int rs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a24e146616912b4a59df91a12b81a38cf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getPhyHeaderLength</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>adf27aa5a5e5cbee6f8be1ec58cb9306f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a2e770727361fe1774b88d5667b89417e</anchor>
      <arglist>(int newRadioChannel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>a868ebc7745779bec659390fccd2113af</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>class_mac_to_phy_interface.html</anchorfile>
      <anchor>ad0c647cc4ae7515324d687a1f31ca6c8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mapping</name>
    <filename>class_mapping.html</filename>
    <base>ConstMapping</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>ab8906dfac661d5c6a0a35cf1744f06ed</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>ab78335a7a119893d1e04495f7f587ca3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>a8723ba0f78d2f259f1f150c9db346cb2</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>class_mapping.html</anchorfile>
      <anchor>a95f064bd4bc5a22aef1cf0e4a6052ec7</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingIterator</name>
    <filename>class_mapping_iterator.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_mapping_iterator.html</anchorfile>
      <anchor>a68c80b10de257d7cfd68f49bfd6a2cbe</anchor>
      <arglist>(argument_value_cref_t value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingUtils</name>
    <filename>class_mapping_utils.html</filename>
    <member kind="typedef">
      <type>std::list&lt; const ConstMapping * &gt;</type>
      <name>MappingBuffer</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>ad235ea24201e93c2b28a1c65c2f4fa6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a0c61c76ba04339162563339b23bf42e9</anchor>
      <arglist>(const DimensionSet &amp;domain=DimensionSet(Dimension::time), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>acca15c41da58e61619e67d1ec1538a9e</anchor>
      <arglist>(Mapping::argument_value_cref_t outOfRangeValue, const DimensionSet &amp;domain=DimensionSet(Dimension::time), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a45c56f1ea72b2f8b278d1016ac6228df</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, const Argument &amp;intvlStart, const Argument &amp;intvlEnd, Operator op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a2864c33a93f9ce23403d0c84ca9a19e2</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Operator op, Mapping::argument_value_cref_t outOfRangeVal=Argument::MappedZero, bool contOutOfRange=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a11550dc6dc55beb5a14def9ffb501a40</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a0d8bf65254d099c87948c1c300986696</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a37d38fd0a9593e6f055ac8d90758965e</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>ad5ccda215590380a9798e4dd51ede69c</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>aab8b49872f55a0162ee1c25f0f4af5b1</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a372c8f56f2e7f5dc0ce06daf4e0db128</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a217539e608efcc8ccf7766c9b9733a17</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a2cf2fb8da23ea9c12f9946559fe954c8</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMax</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>afbe1a1e1d2becd66d2c0d5a8ac42b478</anchor>
      <arglist>(const ConstMapping &amp;m, Argument::mapped_type_cref cRetNotFound=cMaxNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMax</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>ac9d1a808dbca5da873af58f1da4cbcf4</anchor>
      <arglist>(const ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max, Argument::mapped_type_cref cRetNotFound=cMaxNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMin</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a5d9c4e3dcaddccfa65f21212d0fee2cf</anchor>
      <arglist>(const ConstMapping &amp;m, Argument::mapped_type_cref cRetNotFound=cMinNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMin</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>adb9e9ced268b9a5d1d4f6d34738654aa</anchor>
      <arglist>(const ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max, Argument::mapped_type_cref cRetNotFound=cMinNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDiscontinuity</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>af1b74160ce464f825e0715f1fc656f5f</anchor>
      <arglist>(Mapping *m, const Argument &amp;pos, Argument::mapped_type_cref value, simtime_t_cref limitTime, Argument::mapped_type_cref limitValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>pre</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a2cf7c04c0adea7f6e9fe49101b0197c3</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>post</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a31183e79401391df3e2d250846ae8d0e</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Argument::mapped_type</type>
      <name>cMinNotFound</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a3db893e8948a5af5fe947fb0740d86ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Argument::mapped_type</type>
      <name>cMaxNotFound</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a2a3f154e68d94b4b5a5ed580bb3e756f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const ConstMapping *const</type>
      <name>createCompatibleMapping</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a6d524e08add1a4a02d7e37425783b094</anchor>
      <arglist>(const ConstMapping &amp;src, const ConstMapping &amp;dst)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>iterateToNext</name>
      <anchorfile>class_mapping_utils.html</anchorfile>
      <anchor>a6a768601098bcb0d998be2c742126433</anchor>
      <arglist>(ConstMappingIterator *it1, ConstMappingIterator *it2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mfcv</name>
    <filename>classmfcv.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>aa1b3b27b74793924dc3709a837971c7c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a185d491d9702571b891bd3e6480872f9</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a5d8c3f6f341b67dc2e74509a52ea0ba2</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a38a6f05fceb02f9ccc823fe4e1fbda57</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a23d37a267ae8e4e826d5ee71a8d1d4ec</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>aaefbc09c7fb2a941ba4297a58c3fa8b0</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParkingUpdate</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a94eebcabfe57a07d47f8ee10626f97bf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a85ddd70c9cc797882fd228f76d2ffbae</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>acc11e6c02a10d0f9cf48f2e60f5867a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a5761d767ad551990b1fa52d1d531a5ce</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual WaveShortMessage *</type>
      <name>prepareWSM_node</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>aa9342e16ddb4c110992eca1cd438f60c</anchor>
      <arglist>(std::string name, int dataLengthBits, t_channel channel, int priority, int rcvId, int serial=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>imprime_wsm</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>af04fa7172a1a49a89b294e67172313cb</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a88eee76d5311680428d2fe4b887731fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a1474b85a3a329908808d8b4c42b02ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastDroveAt</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a8a6a4b4928aba8b6950b15714077a711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>adf0ccee6a9d3e3cdcb9a07ce143780a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a230c16829e67321086301feea8618703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendWhileParking</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>ab2e13abedba402faef84583303269cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; pair&lt; simtime_t, double &gt; &gt;</type>
      <name>speedsList</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a72ad24674d245b3a8f738dafa13fd60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>classmfcv.html</anchorfile>
      <anchor>a0bf71c455b717e5fd6a7b22cf49a6208</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mfcv_rsu</name>
    <filename>classmfcv__rsu.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>ad976117604f7e674fde5ee23ca0b13df</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>afc3ef12d3b68959a98d45c14fcc7b6dc</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>a9a1df5b0aa5c8d3d4098cdfdbd646c1a</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>a41e52e27ab203a6e7a4ff368b40e09a4</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>a977bed514ff365699edd825ed77879bd</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>a812da8da6b5321b1de2e83b99d32c0f6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>a81a66a29d8002b072d2db7ad57f29742</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual WaveShortMessage *</type>
      <name>prepareWSM_rsu</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>ade8aaabaa0bdd838ad2dd248fb758183</anchor>
      <arglist>(std::string name, int dataLengthBits, t_channel channel, int priority, int rcvId, int serial=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>a6ed7c058f75de72c35a55270cc7dcb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>a69e32fd6faf0ba3b6a6be23a2be7f037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classmfcv__rsu.html</anchorfile>
      <anchor>add004171b8dc0cd660bdcab0ab971552</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>minicurso_UFPI_TraCI</name>
    <filename>classminicurso___u_f_p_i___tra_c_i.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a01709524d5113cf544843148035e4193</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a1effdc8a307a1d1b3aaf95c3f50bc8db</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a13623ac92684ab2f823c0a58be229686</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSpeedList</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a8c10ae9ed1d3f160f7f661fd1c93f6a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateCongestionTable</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a0cb512f5978adf4db2353ade9fa8b957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>verifyAndSendCongestionMessage</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a0b204910fdf88dd8e2e54e61946f1c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>aa65508209535beb4d0beeee035c14a5f</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a79b8501a853a65fc0b4e3bac86af9371</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a6e9e716b8c720da4a2d1a763b4da59ab</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>afbdb7dd78a869416c7b02336667befa2</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParkingUpdate</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a36ed88e038d964af69e8ee33c471c16e</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a160678fe2e96ad95f15c43834bcecc47</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a2419fa90c931b6560cbdf6ac279a602b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>ae9cca5f96b26ac4c177830f3ae28ba1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastDroveAt</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a3997df41d9a902fab8abf50bf51725b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; pair&lt; simtime_t, double &gt; &gt;</type>
      <name>speedsList</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a3594ce025253add489776a680089bb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, vector&lt; pair&lt; simtime_t, double &gt; &gt; &gt;</type>
      <name>congestionTable</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a289fc797f444d1785e660f07e6f8353a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastSent</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>aea549898120fe8865186e646625fceef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>updateTablesEvt</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>afb7a08f75a240fb965e36c18db0608c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>insertCurrentSpeedEvt</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>ac6f1d153bd36389375783e98b7c78381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, bool &gt;</type>
      <name>sentMessages</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a0b53a3ebd3ade8b0635097915bb9070f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a28d53f628cd59c158f3745db55b823c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendWhileParking</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a6a89766f75b5784ca3b96beb8ca9098d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>messageId</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>aa4d6ea4f33005a5afc95411f7120a50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i.html</anchorfile>
      <anchor>a95b885a0467e4c56e6b77ae5fb74f1f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>minicurso_UFPI_TraCI_RSU</name>
    <filename>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>aeb35b04ea1cd68bb7a1d9578ad39a4da</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a84b60f38b20c7b17d789d0289883c228</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a255f88382c6c0ca098329eaa8942c935</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a264efd8f4dedfd5539896858eec5b0e9</anchor>
      <arglist>(std::string blockedRoadId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>af7ac0956cfb79dd3cb99b1a5c5c7d958</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a3287965076aa410f9394d6a9ab7e02fb</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>a31f35f3e896e7b832855277cbe6a4813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>aad1735f39fe893c8e086bb0bbe09c405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classminicurso___u_f_p_i___tra_c_i___r_s_u.html</anchorfile>
      <anchor>ab908bced5cce592d288d9f94df834853</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Move</name>
    <filename>class_move.html</filename>
    <member kind="function">
      <type></type>
      <name>Move</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a4b1acc3a67d30c385ad9a6000526393a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Move</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a233b069152737d031dec49095115cd44</anchor>
      <arglist>(const Move &amp;mSrc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a3db12757bf11ac7f025b2496d09e4941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>af80f74d5fc42ec7fcedf9940c9d01655</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getStartPos</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>aeab90c9059a2c9214e491a58833b3c3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getStartTime</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a64e0b58f28e14c338c64548f6559c08f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a385a1d6229f2490fdbe26f9266f29188</anchor>
      <arglist>(const Coord &amp;startPos, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>ab8205e35a3bb42f18da9a3ff7df19c7c</anchor>
      <arglist>(const Coord &amp;startPos)</arglist>
    </member>
    <member kind="function">
      <type>const Coord &amp;</type>
      <name>getDirection</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a13cf0bb336db329a2033506d739c834f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectionByVector</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a1700ddcd2a41917a29747abaf2aee294</anchor>
      <arglist>(const Coord &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectionByTarget</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>ab9947e462db3ca2ce5d21015770655c0</anchor>
      <arglist>(const Coord &amp;target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPositionAt</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a170899b061efdeb55ead25e17bd88b8d</anchor>
      <arglist>(simtime_t_cref actualTime=simTime()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getCurrentPosition</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>ae3bceb166e7924c6ea1620b633b1192d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a0287300e9580229fdd0c4c2c13e9527d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>startPos</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a84550b4f702ceed03c516754d17950f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastPos</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>af933f6fb06f158e628d5b11c839ebbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>acffecfba78dc80213910498f1afd7cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>direction</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>a727f186f109f662811b76aa19dcb58da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>class_move.html</anchorfile>
      <anchor>ac84984d8a41ce30da0a32b049ff07552</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMapping</name>
    <filename>class_multi_dim_mapping.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ae6bc0b889d690c6f0993d0f03a0b159b</anchor>
      <arglist>(const DimensionSet &amp;myDims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a684348697ba51462eccf00c92f99ea64</anchor>
      <arglist>(const DimensionSet &amp;myDims, argument_value_cref_t oorv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a21647d49bf4759d7e1eac552fa518b43</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const MultiDimMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>adf3d7e794c6e10795a4fa18d6e3b67d0</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>aa9694225933d71570d8575dbbad1e55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>af3aab4125df7b412bc7096779593f473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a524f27f6b8f01dc973dbe54f0f9c5ed2</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a7b50181a1d5e38902c6468bc739f6aa7</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a903bef6518f96f54537beed48002b5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a2aa6a9a6b64954e20c6ee15f4bfb9925</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>getDimension</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a85e1d7321d200c9505d25419dcfc4783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a681c187c017568b30ab1f955205642ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a2f7fa4bf02e759ad62d0f546add33ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ac667e856842caea12a716fe6e4468b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a6b0c6123bcf332b028075bbb947bd51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>aa4958aa116b6ce5b1b93cc1b2c1431a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a93d02248ea48308e7ce69761186aa7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a9d4b17004ec39759f5876865a27a4f04</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>aee38eb77b429791423a13e020a3b15fd</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a3ac6685b718a771032556e192752c528</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mapped_type</type>
      <name>createSubSignal</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a1fbdfd6bd7d903fdd388556ead454461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copySubMappings</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>adbef2e27d79c3323d48e4c7a731b8274</anchor>
      <arglist>(const MultiDimMapping &amp;o)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>outOfRangeMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a50d98bf7c2b8070242694fda40ca49ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingWrapper *</type>
      <name>wrappedOORMapping</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ac0623ee0b39d257c2283d4ab6ca9fcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a3109620ad45efea2104ebc7fa80662f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dimension</type>
      <name>myDimension</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>ae9678ee0ab7315c97b0748f793acaaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isMaster</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a45aeec7eead2c432c971ca02fcdb0c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>MultiDimMappingIterator&lt; Interpolator &gt;</name>
      <anchorfile>class_multi_dim_mapping.html</anchorfile>
      <anchor>a6314bc1334b489fad95fbc1affbdb57f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMappingIterator</name>
    <filename>class_multi_dim_mapping_iterator.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a60281ab679beb5b3aff42d24d3d7bb09</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a07b68601d82a9250a0a588be293c1527</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMappingIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>aa90d2e657fa6b0e773eec7c2fa713c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a71f35cd0d6fabecb65019466018c51ca</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a3a3b5ddc5aa1636772b9a89c085acdfc</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a8928195a1fe4bb3af81d3ffe2391827e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ae4f87a308ad4648d289f1f66d8da772a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a89318443b1c2944e453df221ebdd2d3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a6b780009865b8643c7587c2833ee2fb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a3a28409c944c35a15d0353abd689273d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ab41125ce8959de6fafb3347a7691ca52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a99bbed82612268040bb8f5162871fb48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>af1b499c6d24b81cee68e09ad224087c9</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a1b55be43fd47c1879a3761d88a389cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ab54b5dafe1ca46dc46aaa15e734330ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>add0146735b031a0bad279b4652b6b4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a926bab0adcc3f7fd731e4e0c6a391881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a48c928d79af27bc468eb50cc24d15a38</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a37918121567f5a283b209113b2d4983a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a1eb04551f2a3ae22f0eae4844f14ac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const MultiDimMapping&lt; Interpolator &gt; &amp;</type>
      <name>mapping</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a77251b9d1da4418ccb2903fc94c7fcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>a01dc79b6fe25cb048651ae8870e3d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>subMapping</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>aceffeb12d2e2bc67226d32ee4206fa40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>subIterator</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ac2c7a223c07841c72d0ff860b0513e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>afa4ac8d36d24e411a3edce590b3c21a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>class_multi_dim_mapping_iterator.html</anchorfile>
      <anchor>ae3c745c1fea3a1bcd5694b5e1a692297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Nearest</name>
    <filename>class_nearest.html</filename>
    <templarg></templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a9739a423107cd104922bb74e2d385f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>af99ff5ca2d3827ae2be76eab3266fc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a079c6e4fa3a064c59abe1f1e5bebd41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a02dec03a3e49f970334f391a8f8811e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>aeae2c2c12934d612d4d26339f298db31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>ad06e5aaeb684694d3ad67da420282895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a002a2b67afd3e41c4cf614ce17fb4a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a58deee496d9901fb9c862d2e145053fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>acba3659c2c6c8ba7ee3c364ae2ed6c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a92aa015cd152a9ade4654926edb4d019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a00f85b45b973057c33a65465bd880739</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nearest</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a25cc387b45db91c99522dacd3442c196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nearest</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a0dc55fc986dc4e6168470e46f366fbec</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Nearest</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>ad11370045045fdcbe8ddf653afb89d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a97a548579fe73c473c843a883629efa6</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>class_nearest.html</anchorfile>
      <anchor>a66bbd6c5c5d772f74ccdf02804780953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetwToMacControlInfo</name>
    <filename>class_netw_to_mac_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>NetwToMacControlInfo</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>a0168cc7c80b267f832f7395b31f64f4e</anchor>
      <arglist>(const LAddress::L2Type &amp;addr=LAddress::L2NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetwToMacControlInfo</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>a8408a34b9eb11023c61673c5e6cb84ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getNextHopMac</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>af99bf29fa34adcb49a6f53f8c94d43fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getDest</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>a19518c8f5ccf35d44a2813a922e214ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopMac</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>ad3884a518785e93c963552dea18e5909</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>ad9984137a14e4f79e8c3d764a52eaaa0</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>a4a0d5e1cdc823606fab99b915a96263e</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pDestAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getDestFromControlInfo</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>add42e098a1af72c3fbc8be746d04b27f</anchor>
      <arglist>(const cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>nextHopMac</name>
      <anchorfile>class_netw_to_mac_control_info.html</anchorfile>
      <anchor>aa7e33f761452ceb1451769d7c59da91a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NextSmaller</name>
    <filename>class_next_smaller.html</filename>
    <templarg></templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a8c5692345e6644703fe7269de2dab1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a41d8e27717f519902cf3fd846a2c7b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>ac905a5f3ac8d2ad7e86a3d6e68c86564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>aa2541c173414345b17d45e90f23f1b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a51d29aa5d6ba9527e78f6d2ebc9b1fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>ac9bc4d5af5a87581a9dfd82587b0a402</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a060d2af8ab5e5574b1ba41483798c561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a53795d841ed9efed5b6c86562f5408be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a55f6473c02dbec1fa65572b395e713c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a27bd4c4217c213db7950cde753d6a3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>adb043b816c9b3bc8caaf97d8e1936129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextSmaller</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>aa9014184f871c5105d4f73bf0be4fac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextSmaller</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a87a70bc7144eec945007d4017a4105c6</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NextSmaller</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a0ccaac4c2bd885be8d35115eab819195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>a3dae081c993095eaedbdb40af0b3a749</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>ac240448bfa4fd4a033d5d393a5332e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>class_next_smaller.html</anchorfile>
      <anchor>aac2ca2e53a30e482d97621fc9b62ddbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry</name>
    <filename>class_nic_entry.html</filename>
    <class kind="class">NicEntry::NicEntryComparator</class>
    <member kind="typedef">
      <type>std::map&lt; const NicEntry *, cGate *, NicEntryComparator &gt;</type>
      <name>GateList</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a209882de7781ff52db0ae559c1654e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NicEntry</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a59345a3d9d2a9c6b85ff968e87cf7552</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntry</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>afd3d4871304939e9dcbfda49b3ca4585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a32a71bf1823d8ca0d51fd1cbb67072fe</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a0cce4edbe3eb6036ded986482de3de48</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function">
      <type>const GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a731c307d3c7d07c50c5b663192682a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a32f9544fbf045d921b0fb7f1c6f51f9a</anchor>
      <arglist>(const NicEntry *other)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a009149376663e2250c24634879038f7a</anchor>
      <arglist>(const NicEntry *to)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a587d8ee15931df8209b6429b8f81a190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>nicPtr</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>af7819e950101d5062b713eb4c182e34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>af474d9b383b959daecdecce577edcee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a2c78b2c598d5fa3d44080f682adb8d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChannelAccess *</type>
      <name>chAccess</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a8494481fbac4b6efb1166986a18edf58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>af0a6ff3792dac4c0a956b1a16392cf18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateList</type>
      <name>outConns</name>
      <anchorfile>class_nic_entry.html</anchorfile>
      <anchor>a66b957327e66c042028f7b38e4bd0b46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry::NicEntryComparator</name>
    <filename>class_nic_entry_1_1_nic_entry_comparator.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>class_nic_entry_1_1_nic_entry_comparator.html</anchorfile>
      <anchor>a47c8b8f85f6d1b71cc9fd5c039e0fa5f</anchor>
      <arglist>(const NicEntry *nic1, const NicEntry *nic2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDebug</name>
    <filename>class_nic_entry_debug.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDebug</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>a8a318f2611c8fcf9a495525a910f40b6</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDebug</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>a23514a51dfbdba46bf20b2f005a34214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>af97ebc8c81c1f7d8094344d2f7fb6a17</anchor>
      <arglist>(NicEntry *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>a837ccd605ce3df345fcf3f5787673fac</anchor>
      <arglist>(NicEntry *other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>GateStack</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>acb03289d82cdd4035567f3fbc8117105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestInGate</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>aa028678e801ba669ad47a6588b2ad90a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestOutGate</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>ad601c375fa2fd737f88b3a475a06ff45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>collectGates</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>ae4c6e480d8b2f3fc4199a7a8314ab2df</anchor>
      <arglist>(const char *pattern, GateStack &amp;gates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectFreeGates</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>aac3b943e56b211541596a73f6437608a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inCnt</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>ac676487d56ac68916121ce8e52465205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outCnt</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>af1bf7c23c872e6838f8111cf58e4839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checkFreeGates</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>a2aa0dd90daecf5469bc9c8b53b21579c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeInGates</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>ae2e64139016744d1c8a59c4d9f6b009f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeOutGates</name>
      <anchorfile>class_nic_entry_debug.html</anchorfile>
      <anchor>a0564884c56d1bcda68b8797a5bd60af0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDirect</name>
    <filename>class_nic_entry_direct.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDirect</name>
      <anchorfile>class_nic_entry_direct.html</anchorfile>
      <anchor>a264c9a96612b45f99eb5a1de1dd2b7fb</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDirect</name>
      <anchorfile>class_nic_entry_direct.html</anchorfile>
      <anchor>a21eb6f7a68d1dc62b30934651b569ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>class_nic_entry_direct.html</anchorfile>
      <anchor>a56d5f3eb121f931265299294660d70e9</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>class_nic_entry_direct.html</anchorfile>
      <anchor>a4629b3bf3dc1836590016164bd245149</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoNextIteratorException</name>
    <filename>class_no_next_iterator_exception.html</filename>
  </compound>
  <compound kind="class">
    <name>osdp</name>
    <filename>classosdp.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a6aaaee984b1b8e0d921b528e1870a1fe</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertService</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>af69e7e7e856a08639db04ec6953e5ce3</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertService2</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ae700d8a390e2a0fedbe50facd93f86b8</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queryService</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a6e3148393f11441339e46b7ed7d1c73c</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>answerQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a8784f54fd40c0ba86c05342c8ab33324</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a49e7844e80fd6cbd33da6837f6b7980b</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteService</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ab4a704cb618c24379d0b859b8d5a77c6</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ac3f9c34905dd9faf9223f87225a5f99d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deterministQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a13155c4c453ad2c514797886930e03d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>service</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a41dcfa7f4c478ff21c03cafe7e2fbc03</anchor>
      <arglist>[40]</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>lastQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>afb4f0e84fbc2ac959baabab5cf62d7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ns</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ae3b2eb11206f84f2f90fa6fce4789141</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a8f4df1c9a86b1afb3c82e6aad5f78e5c</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>aba653dea9e259b39cec4cc372a7c3918</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>acd607862e391194afc33ab9e0e45d0db</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>af3522ed4ff583a86e5b841dc76c3d461</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a266eb0a16ac37e68f27b2958354325c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a9c95d8ee66825ff88d9cc86ae5350a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a8e953f878d25bcf84ac947b38d13a3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>query</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a2b376300c7fded4ae4db9412c848decc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cont_query</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ade95bf874ba5e7083f2bd30806ba847e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>qservice</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a3f675d92b5b615874c3bb68eb704860c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>queryInterval</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a56fb69cdbfbfc59580d619f0af6ae1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ac129b0a7af30ac303249c85d053c60d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeService</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a226aad6f025dfa10189d3b874c4cc852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>LastTime</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a096f0958ac53fade27d4069f233f0e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initQuery</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ae91c24b2ddd3b1ccec9732aa6aac8b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>serviceQueryEvt</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a872ecd73bf19ebea0f776098892fc058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>serviceExpiredEvt</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a01ddc58fef010e848e47392d6e0e0693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>outVector</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a5a7dc14948c227c17b77201c37c0d008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>outVector2</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ade8b1a6b5816823850dc616a4d48b04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_serv</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a2e682ee7c0f437aaeef457c7742c03cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_adv</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a1bf8c1c7976f6e4371f3ab342d20c814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s_query</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a66a91d14579d7e876af24c5996202f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>c_query</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a30042e4cf939b1a3aa56bcf25a114d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>p_query</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a1a0d498f41cf8427aa601d66d2b769d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>m_query</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>a8b17dca3b2e95cb133ed37535cc5fcec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>r_query</name>
      <anchorfile>classosdp.html</anchorfile>
      <anchor>ade58dc5e001738bbf4948b18959021c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>osdp_RSU</name>
    <filename>classosdp___r_s_u.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>aeba9b3bd5893736bfd9b4f05b0d6c210</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setServices</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a3f795d6e7ab5e0cf2588465e35be292e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>service</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a5a62c59a5a1ca8e6e5da6f330057100e</anchor>
      <arglist>[40]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sleep</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>aa6686cbac3477886d59b8e7862ccc779</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a17f0cc5db55bc1804484773bed588f25</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a869a7454ac2ebe8347213454c4be4af7</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a8f575733dac8cd7da01d562aef34803d</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a7d05038c80d089db60a19999c20c7145</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a269aea680183bede17e5fabeaf3d5a9d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a477ec63734c9fd389f47d266afa28de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a3561d29ef12da312d4545601455268cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>afe0c7cc26c7de48009aea864e2d2c333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serv1</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a9290e36c524ff23e903e2ea16a25bb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serv2</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a11781b634c8ad1dfa00ad2fca816a71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendServiceEvt</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a52478260fddecce25cf6f06b4cd06a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>sent_adv</name>
      <anchorfile>classosdp___r_s_u.html</anchorfile>
      <anchor>a4bda40d94b220819da5fa4d5830cdffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PairLess</name>
    <filename>class_pair_less.html</filename>
    <templarg>Pair</templarg>
    <templarg>Key</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>class_pair_less.html</anchorfile>
      <anchor>a6b33ccdc9efb6d9c56d78a881002fc49</anchor>
      <arglist>(const Pair &amp;p, const Key &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>class_pair_less.html</anchorfile>
      <anchor>a1471222ba1517ac3ea7a1a25a07891b9</anchor>
      <arglist>(const Key &amp;v, const Pair &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>class_pair_less.html</anchorfile>
      <anchor>a57c0f285d2b3a63be1d78ca33e0a7ff7</anchor>
      <arglist>(const Pair &amp;left, const Pair &amp;right) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PassedMessage</name>
    <filename>class_passed_message.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>gates_t</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UPPER_DATA</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6adf76d3ca7bb9a62bed70965639d59859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UPPER_CONTROL</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6aea991e99dac6c91c9e3e89f902f1075d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOWER_DATA</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6a97265ac51f333c88508670c5d3f5ded9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOWER_CONTROL</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a7738b6f08855f784d1012de87fbfd9e6afb379d2a15495f1ef2f290dc9ac97299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>direction_t</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a11c83e74aa007c495b32ec3ed4953a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INCOMING</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a11c83e74aa007c495b32ec3ed4953a50a43c42d4afa45cd04736e0d59167260a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OUTGOING</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a11c83e74aa007c495b32ec3ed4953a50a862e80d4bad52c451a413eef983c16ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>gateToString</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a0f73ac5c7a0ae569ed1fa432a7a58048</anchor>
      <arglist>(gates_t g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fromModule</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a6c340595cb29a4e8a4c55ea0503dffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gates_t</type>
      <name>gateType</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a41f11b3139f3552cf2de3bb648c1ff55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>direction_t</type>
      <name>direction</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>af55219a6ed1e656af091cb7583467f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>kind</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>ab4e2bf6d2317196af7e9c98ed2c406a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>class_passed_message.html</anchorfile>
      <anchor>a8a4eb44ad1e43205d1881fec0c00a6d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PERModel</name>
    <filename>class_p_e_r_model.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>PERModel</name>
      <anchorfile>class_p_e_r_model.html</anchorfile>
      <anchor>a18f4f1553b984e711602679b49fc434c</anchor>
      <arglist>(double per)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_p_e_r_model.html</anchorfile>
      <anchor>ab571e93f422b0e6a299cee2c2b886bc0</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>packetErrorRate</name>
      <anchorfile>class_p_e_r_model.html</anchorfile>
      <anchor>a32ced82d925f432ef880595a3d202be8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyLayer80211p</name>
    <filename>class_phy_layer80211p.html</filename>
    <base>BasePhyLayer</base>
    <base>Mac80211pToPhy11pInterface</base>
    <base>Decider80211pToPhy80211pInterface</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>aa3a10ad37436ef978aa9a0874b0da561</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>ProtocolIds</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a0b31d34140510efcba712787ae1098fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>IEEE_80211</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a0b31d34140510efcba712787ae1098fdac392785e7abffc6438a0495eaa738128</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>aa9c19a4e9aec074db1585455a7474a6a</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeSimplePathlossModel</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a1694c2434fb374bcbbe3ea7b6aea68e8</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeLogNormalShadowing</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a2d543b7a53f299c25c07a4fc3829e80a</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeJakesFading</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a311114a09e1d5f2c8e23d2a523a9735e</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>initializeBreakpointPathlossModel</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a87d6370515d5d7867abb5105c2095a76</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeSimpleObstacleShadowing</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>adfe098a981b32aa82c0cf369bdca29b3</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>initializePERModel</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>aa8d28b20b02c1fe2356202ba40032c38</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AnalogueModel *</type>
      <name>initializeTwoRayInterferenceModel</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a6e9fb3fba8e61140d9c54529ccf1dd89</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>aba4ff7d43c6ee3c6fa550722db94aa86</anchor>
      <arglist>(std::string name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>initializeDecider80211p</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a91727110b53120bd4f008b59ffba2b8f</anchor>
      <arglist>(ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a88a501014c135335bf1e51ac3d92d845</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeListeningFrequency</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a4b14cc407ce1b09717a090313f557c59</anchor>
      <arglist>(double freq)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a6ab453897d17cd1dab056d03594dbb72</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>class_phy_layer80211p.html</anchorfile>
      <anchor>a250e8e0c898c3f861a9132fce82393f0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyToMacControlInfo</name>
    <filename>class_phy_to_mac_control_info.html</filename>
    <member kind="function">
      <type></type>
      <name>PhyToMacControlInfo</name>
      <anchorfile>class_phy_to_mac_control_info.html</anchorfile>
      <anchor>a8e9300c49e9f955c4b5333da109143d4</anchor>
      <arglist>(DeciderResult *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhyToMacControlInfo</name>
      <anchorfile>class_phy_to_mac_control_info.html</anchorfile>
      <anchor>a5b56a9f0cf2b87496f6d19df98216bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DeciderResult *</type>
      <name>getDeciderResult</name>
      <anchorfile>class_phy_to_mac_control_info.html</anchorfile>
      <anchor>a695fcb4091796018a3315486acafc9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *const</type>
      <name>setControlInfo</name>
      <anchorfile>class_phy_to_mac_control_info.html</anchorfile>
      <anchor>a86ea1dc0f0abd29f5057e09ce1aee7be</anchor>
      <arglist>(cMessage *const pMsg, DeciderResult *const pDeciderResult)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *const</type>
      <name>getDeciderResult</name>
      <anchorfile>class_phy_to_mac_control_info.html</anchorfile>
      <anchor>a4da6e96b8aa05a9af2aa5b46317231cd</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *const</type>
      <name>getDeciderResultFromControlInfo</name>
      <anchorfile>class_phy_to_mac_control_info.html</anchorfile>
      <anchor>aa55bf39f48866ffd4c5facd708a3a2ce</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderResult *</type>
      <name>result</name>
      <anchorfile>class_phy_to_mac_control_info.html</anchorfile>
      <anchor>a1dc106d6290a2f4f18b4281e14077545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel</name>
    <filename>class_radio_state_analogue_model.html</filename>
    <base>AnalogueModel</base>
    <class kind="class">RadioStateAnalogueModel::ListEntry</class>
    <member kind="function">
      <type></type>
      <name>RadioStateAnalogueModel</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>a722dae61250442ba49917eceff0bdb74</anchor>
      <arglist>(Argument::mapped_type_cref initValue, bool currentlyTracking=false, simtime_t_cref initTime=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RadioStateAnalogueModel</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>ac076409f51f9df8493e3cccf03428445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>a5373d679bc62e9da7130d93f531adbbf</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackingModeTo</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>a9a3457871c28e3e86759f70a9def9f28</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanUpUntil</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>a8034e0bc85edc2debfcacacafc86cefb</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRecvEntry</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>ad80154bcc09f8db0e08efb2efd75872c</anchor>
      <arglist>(simtime_t_cref time, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>currentlyTracking</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>a576c1bc7398c256153ac9e22bbc84f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; ListEntry &gt;</type>
      <name>radioStateAttenuation</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>a45c2c59a03f370e0814e69e51d4ade18</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMMapping</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>a6ec9262901fa86ea2ef6d08fc9410144</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>class_radio_state_analogue_model.html</anchorfile>
      <anchor>ab901736afc45f0b8dbe019c39356aa09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel::ListEntry</name>
    <filename>class_radio_state_analogue_model_1_1_list_entry.html</filename>
    <member kind="function">
      <type></type>
      <name>ListEntry</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a103b5e4c79f39b84b58341464a697d8b</anchor>
      <arglist>(simtime_t_cref time, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListEntry</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a4c4e280062255215558b3a610a109600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getTime</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a9f9c8dc6262a26e2875eac5b7ced2626</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a498d467b4ad9223646bf3c78ee2626b7</anchor>
      <arglist>(simtime_t_cref time)</arglist>
    </member>
    <member kind="function">
      <type>Argument::mapped_type</type>
      <name>getValue</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>aa2bf26ee7c3020227eff858132485eef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>aa15158ad239ac703da7d93c77ac35e68</anchor>
      <arglist>(Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; simtime_t, Argument::mapped_type &gt;</type>
      <name>basicTimestamp</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a9d66461184f2716ac7d3fb5810d998d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a2871467101970cb463d69dc27772994a</anchor>
      <arglist>(const ListEntry &amp;e, simtime_t_cref t)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a17dd091fbb3d71bcb53c2324f25a695f</anchor>
      <arglist>(simtime_t_cref t, const ListEntry &amp;e)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_radio_state_analogue_model_1_1_list_entry.html</anchorfile>
      <anchor>a96ad143c7a58ddc09f6f2feaa41fea8c</anchor>
      <arglist>(const ListEntry &amp;left, const ListEntry &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMConstMappingIterator</name>
    <filename>class_r_s_a_m_const_mapping_iterator.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a88568a19f3ddbae8645fdabffc2dc2a5</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t_cref signalStart, simtime_t_cref signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSAMConstMappingIterator</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a94df8b87b252de13463b326c7d77e3cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a3740e6b65c335fcde632e296b56070de</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextPosition</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a082fa16cd2eaa7ac2dd0b16b66660317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a3a34a4fb1e22f7e0bbac13e21d08415e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a7694574b32a82ddbfa3e86bed32be016</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a919ae04b93ed239dc2f5566a383f28d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a7dd83432a7cd3ff5d1f827cb34f61a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a1a5d0e40bb42450fb2158e6172cc27d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>af465b20a9a50c6640289e7f53f26134d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a35441df57b5a398c15aefd4696ac9e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a59275f8855f0bda32e25116da54dcd2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateToOverZeroSwitches</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a8387043b9b90a5ea75d3d968cbb87f10</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; RadioStateAnalogueModel::ListEntry &gt;</type>
      <name>CurrList</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>ab27af19743434c8f938fa12240ce2b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>aad2e47c90690500114b0715ac93fdea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CurrList::const_iterator</type>
      <name>it</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a611fd29b7a53da28738c0871132fcc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a9039bc33a7d35f7fefa980d1bc48ad5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a926d1e5571f715a515233de3f245dea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a44e62faddab1436a85e70e80d00080ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>class_r_s_a_m_const_mapping_iterator.html</anchorfile>
      <anchor>a1f51b46c71a890d8331afb993bf1cc54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMMapping</name>
    <filename>class_r_s_a_m_mapping.html</filename>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>RSAMMapping</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>acec9b66637a97c81d45a073f622bf9ee</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t_cref signalStart, simtime_t_cref signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RSAMMapping</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>a91e61fbd18ee4bc68238fc13faa48c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>adfde2753ba641cbdafbd95fc914034e6</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>a0c4471fe51b34fab8f93b644326c1862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>a79e3de9b0f3220b01dd28346e51ae019</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>a7b47c38b2b2c98e251db268c9fe4ce6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>a1e968e40c9c6d55ef033aea16dc7cc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>a83073d619992a38be77157eeaa8de677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>class_r_s_a_m_mapping.html</anchorfile>
      <anchor>ac4a1ed01e6319d66ada6b7bab12ce93f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>service_discovery</name>
    <filename>classservice__discovery.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a885bf6658ad357136fef79a09b7a0215</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertService</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ab28dc797568b56200565c7a3acd1511c</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertService2</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ae38790d6cded3ca76e61bc1785919880</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queryService</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>affa113a945984eeb926f08efd54d7077</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>answerQuery</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ab56f304a992876d68d43a6c18b374f0e</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelQuery</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a8eb6301212a91ebd02811add0ff5cfd4</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteService</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a50f7ecb7bc3ae9bd2975a852988623ee</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contService</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ace437a59842e6529e5ec5e0d7566f2b3</anchor>
      <arglist>(const char *cat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deterministQuery</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a68fe63037c16d85206b1cfb57a0a708c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>service</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a4ed7a605fc5c81a3065fb4bd5c6346be</anchor>
      <arglist>[640]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ns</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ac8c0a8fe1b8608b4861e4d480205ab0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>nq</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>aa12857ad0c530f513f46519530d85940</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a6340cfe2100e371474ead43c129e39c4</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a1c17ba9a9fd81600d74f1d8fb5b12826</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a20bbbd60af7eb2673f46ca399b70723a</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a56dbb650c091f9721d2fd56326f19aee</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>mobility</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ace01920e9603f58daf595b04b90268a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a0ab2c72ccee278c20e09d3b5a6f7b838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a8540875bef50e61f5e08bf66074135e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendQuery</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a32ebfe5deaf4e4799e18c23a5a8f60e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a01d69b1a2ec3a9c0ead8ebf2f4a8d405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cont_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>aa3a6842e7f2a33a77ba573ea8de8e0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>c</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a5c5a6618adac0da034e249c0f245f0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>qservice</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a29c63e7f9c9077bb25512295c3e388df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>queryInterval</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a2ce3039f459eb6b163a20a87790283a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeQuery</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a7fa959b4fa1417f0e9826f2980e30fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeService</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a53dfacf93875dfada4eb5f7aa6f74061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initQuery</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>af401c51bd681b0bbf895ef138214ef32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiver</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a6d5ecfd0d4a9219dfbf3bdcc60a87b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>t</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ae663900fef17585fd7a69e95ba24bfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>serviceQueryEvt</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a7f70cead0d7107a7123c0a300530c70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>serviceExpiredEvt</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ab29457e1abae41f79d3fb3b79dedc7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>mobilityEvt</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ab28aed128879364c1a68e74f0d49eaf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_beac</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a86b2f8336e4dfa079a4e03e22ec2b1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_adv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a753a7e317547f2b8ee684cf1f165eafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont1_adv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a58f0022ffd33ea8ad2ff3a6e20249472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont2_adv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a9a67d6932ccfff74e705b1305d6dcc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont3_adv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a46ab86713219b48bdd163c1f15003fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>c_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a64fe4dab295dcb96697441fe9a411457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>p_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a706c088796a6c5dbd96dd8e7a9c7ac20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_del</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a72e4accf4eda24e8e6964a25203cc157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>us_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a47cef531dce1b43980e274fda699712c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>m_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a0561cbc31263c14353e827bbd9f5abec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>a_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>ae0cb1e06ae6482a5929d59fb1e08a868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a67a6e0048ade2b4df135175ebc386153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s1_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a3b4c25a87dc63865c8d2798162b1c1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s2_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a4dc3892449ff737d1e4d583c1b8905c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s3_query</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>af8b59bd0a96860e5d0e121adff6ddefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_serv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a68fda87f84a9f8f1749424a83c884861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont1_serv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>aeb6ba1aa59eb9efe301cef9c030dbb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont2_serv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a249be85376e01ab9888b4db90d9d093e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont3_serv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a73151d9f4f838f4595014eade144b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>store_serv</name>
      <anchorfile>classservice__discovery.html</anchorfile>
      <anchor>a4332c5e62985e8ebb157aaa482977afd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>service_discovery_RSU</name>
    <filename>classservice__discovery___r_s_u.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>ad90ccf59ff86c1ea3d1b0191db1887e6</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setServices</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a479d921465e079d51118a95f7e6ca76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prepareServices</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>afa6e2aa9de1b79a40ab482008b8e80a2</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>service</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>aaa16be039bdeae17aefee3f12c7a92e2</anchor>
      <arglist>[240]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sleep</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a5e4c80e515282ebfa815e96156620256</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a186d3fe1e517b9ee24c332cd125087fa</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a5a9fab2e5499c26638e5df878f6263b2</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a94b01929201fdd4db5c14e4dc89f6ea4</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>afcd6e3be81b7078ff4034fb1e8489376</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>afe02898eac7b682878c7259532668935</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>t</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>ad713806bff6cb34de4f13468287853c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>aec49c57af8f63660e5af439eaad54d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a9bf453a7fbd9e313eb5b6c698f3f4218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a2fbf6ce8d19e1e95bf2d2fa77bb2fa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serv1</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a4fbb01f3c5f15200f30f62e7cf689bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serv2</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a98f51946ca131d3cf05b01c618201305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendServiceEvt</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>acc86b4e2d913e46597e6136ca4550503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>sent_adv</name>
      <anchorfile>classservice__discovery___r_s_u.html</anchorfile>
      <anchor>a5291e5afab77df4eec91954475891fb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Signal</name>
    <filename>class_signal.html</filename>
    <member kind="typedef">
      <type>ConcatConstMapping&lt; std::multiplies&lt; double &gt; &gt;</type>
      <name>MultipliedMapping</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a484a5f8dfebfd933edcb1a55770df0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>ConstMappingList</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a463671c45cf3099eb81d8840c86a27b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a0da19733584d5de330474ee32b6bc186</anchor>
      <arglist>(simtime_t_cref start=-1.0, simtime_t_cref length=-1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a079cc6bee7380f5744001d5f26505b2c</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Signal &amp;</type>
      <name>operator=</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>aa9c8501095ecc3fb4a60f4f0e2007138</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Signal</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>ae7a1d116cda63e790bf9aab549d57d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingStart</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a0d2a31d69d90186d6f0ba17719f3a9e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSendingEnd</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a65d72906b81304dd63f93408ba8f4b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionStart</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a7c4710243cf87caf7dfc9f313e2619b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionEnd</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a2875223239e124d85949e1116cc12ae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a22f7cede842dbfe895cd8aedf708402f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getPropagationDelay</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a815379c4c75ace99ad262d4abc651f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationDelay</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a2864ac2fa780e25223db94ba3d36b8e9</anchor>
      <arglist>(simtime_t_cref delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransmissionPower</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>ad8c5494d0f7bd564bf14dc0c90f9a361</anchor>
      <arglist>(ConstMapping *power)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a86e4ecdabd5ca03ede5e2c81c6b76002</anchor>
      <arglist>(Mapping *bitrate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAttenuation</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a0beeef0f27c33145a0fca521df1c5f5c</anchor>
      <arglist>(ConstMapping *att)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a392ecf1a624edfb90243e7227370a772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a5e8552f0d95e8faea2dee32ee7ba7212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>getBitrate</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>adfd5ce93e172004046d7714eaefb36c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstMappingList &amp;</type>
      <name>getAttenuation</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a9b949d4e6bd18f6baccd66748c2bcd78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MultipliedMapping *</type>
      <name>getReceivingPower</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a513b1abac0b04549585257f7f5f8ebea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getReceptionModule</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>ac78bb49ae3090d9954722feaad3e88ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getReceptionGate</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a3de107a6c7b0283bb79b7e641616b26c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSendingModule</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a2edb4eb1bb7cb96f389999ba624ad5bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSendingGate</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a687a2fde154487ff1c6516073a5fc0c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceptionSenderInfo</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a6354b073881f4ea6190637d2e0164372</anchor>
      <arglist>(const cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>markRcvPowerOutdated</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a594e926b3d8ff3330375c8850699ae76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderModuleID</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a3e9509d6f61f45994b1bf49d319e4b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderFromGateID</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a7355857ae0852dfe9e415d475585396b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiverModuleID</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a44ca8e70f7bd86a8af28bd382bea7434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiverToGateID</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a539dc4174aaa8ca81c7b40b9e39470fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendingStart</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a56c032041881146f469092037028affb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a8073ad666fac40bf900fe0d9d6a88fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>propagationDelay</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a8549f666048ce96bcfd1b4d9c9a3e95b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>power</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a3570fb45af2a0f7580ee32c57e90e2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>bitrate</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a4a6e1ad1165fc73157c8820739011e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>txBitrate</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>ac60bce52288a4fc2067aa394918edf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingList</type>
      <name>attenuations</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a1fb9da7932d7c4746f2afaaa21153cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultipliedMapping *</type>
      <name>rcvPower</name>
      <anchorfile>class_signal.html</anchorfile>
      <anchor>a9e3d433a61e8188c8a6de5b540da8d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMapping</name>
    <filename>class_simple_const_mapping.html</filename>
    <base>ConstMapping</base>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>aeb10c744b8f4c6df092332b6228e209e</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_simple_const_mapping.html</anchorfile>
      <anchor>a49da397ee4ea25a6bdcf7f08dc6e2ed5</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMappingIterator</name>
    <filename>class_simple_const_mapping_iterator.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>aef703d1c7304041f2594886e902134ed</anchor>
      <arglist>(const ConstMapping *mapping, const SimpleConstMappingIterator::KeyEntrySet *keyEntries, const Argument &amp;start)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>acd9ffe8031190318003512dd72a060ad</anchor>
      <arglist>(const ConstMapping *mapping, const SimpleConstMappingIterator::KeyEntrySet *keyEntries)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>ae024ecc6a05c06a6c1f80cd594c387a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a810c8af9b437ac5bd010cf5f4b154045</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>aff0c387e3cc73d9821078492ae90e82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>af63f318fde0e50bc3383ebf1686d4a7a</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a4984e94b5c551edac1270dc35db8e02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a25c1a14b6104fd53f38f1ffaa0555864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a7d5c3fb31916385945abed1d6a38f797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a54d571cc74688a5ce0b23a8d8ba5f04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>ab76e81f21df7609e4af1d65e570e08ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>acd382b24005d9a14b143b6efd5922eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>KeyEntrySet::value_type</type>
      <name>KeyEntryType</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a54ae3def7249f54515c6683ba554ccf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *const</type>
      <name>mapping</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a0e0ea2154862ca3e6b35c393e87849fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DimensionSet &amp;</type>
      <name>dimensions</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a5600a3c00abb82f8fda8ceb84b13530b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntryType</type>
      <name>position</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a7b29cea82195fd2084e4f63606aeb506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyEntrySet *</type>
      <name>keyEntries</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a55107a3430801eefc9c6130995f7e98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet::const_iterator</type>
      <name>nextEntry</name>
      <anchorfile>class_simple_const_mapping_iterator.html</anchorfile>
      <anchor>a4e274fc2e3dc1900b7c210509fc34513</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleObstacleShadowing</name>
    <filename>class_simple_obstacle_shadowing.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimpleObstacleShadowing</name>
      <anchorfile>class_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a32c9fa5e6c1b258fc3525675ebe3db8e</anchor>
      <arglist>(ObstacleControl &amp;obstacleControl, double carrierFrequency, bool useTorus, const Coord &amp;playgroundSize, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_simple_obstacle_shadowing.html</anchorfile>
      <anchor>ab8f4e9c3b104f4b7fe18e4f275af79ac</anchor>
      <arglist>(AirFrame *frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObstacleControl &amp;</type>
      <name>obstacleControl</name>
      <anchorfile>class_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a66eb87c36db8dd2241060ff981ddc593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>class_simple_obstacle_shadowing.html</anchorfile>
      <anchor>ab857710090727518997552d3c598d6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>class_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a27541aef7ae32f7885c7a993f21c1746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>class_simple_obstacle_shadowing.html</anchorfile>
      <anchor>a9d11af9f7758bc5b18a4d39dd994313e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_simple_obstacle_shadowing.html</anchorfile>
      <anchor>aa402d34d3d0d4d22ec761f6ad5fdce28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossConstMapping</name>
    <filename>class_simple_pathloss_const_mapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>class_simple_pathloss_const_mapping.html</anchorfile>
      <anchor>a05ca5384df78435f54d6126651daaaa4</anchor>
      <arglist>(const DimensionSet &amp;dimensions, SimplePathlossModel *model, const double distFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>class_simple_pathloss_const_mapping.html</anchorfile>
      <anchor>aa263547a6e528cc1acf88fc496510e40</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_simple_pathloss_const_mapping.html</anchorfile>
      <anchor>a07a068298d3682405c07849bbcafac3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>distFactor</name>
      <anchorfile>class_simple_pathloss_const_mapping.html</anchorfile>
      <anchor>a5256f04ca6630c73e38c611472d330a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimplePathlossModel *</type>
      <name>model</name>
      <anchorfile>class_simple_pathloss_const_mapping.html</anchorfile>
      <anchor>acd7441a6db213de39f2286e7e91110b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasFrequency</name>
      <anchorfile>class_simple_pathloss_const_mapping.html</anchorfile>
      <anchor>af4da6a90c9477ea1de2eccfd9ae95e55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossModel</name>
    <filename>class_simple_pathloss_model.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossModel</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>ae8950c3add4334f0f8642a660671c075</anchor>
      <arglist>(double alpha, double carrierFrequency, bool useTorus, const Coord &amp;playgroundSize, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>a632b408d1c0ecac4fd90da5d48d73c5e</anchor>
      <arglist>(AirFrame *, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calcPathloss</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>ade7562b60b0a5ced0d81ca29bee99ffd</anchor>
      <arglist>(const Coord &amp;receiverPos, const Coord &amp;sendersPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlphaHalf</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>a064c70c5c35a1bcb1d6450722d70ec1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>a48902a15501db259c953348f4d50313a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useTorus</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>ab6305bce0317842e0931aebdfb525e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord &amp;</type>
      <name>playgroundSize</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>a5ba93764d5161a8ab7b299a930f3382d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>a659b7135ed6ca2282617b863362f21f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>class_simple_pathloss_model.html</anchorfile>
      <anchor>a917f0958441d102331b9adf788fd63c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>simsignalwrap_t</name>
    <filename>classsimsignalwrap__t.html</filename>
    <member kind="function">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a0cd6dc064fbacefdcbcb7bab6366af0e</anchor>
      <arglist>(const char *const pSignalName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>ae2973c10941420fa7c60f3df329bd108</anchor>
      <arglist>(const simsignalwrap_t &amp;pCpy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator simsignal_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>ac0e7f28a74aad2569ccfa51b2f8486b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getRunId</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a09bb09ab4bdd1da8783a163003200b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>ac9d9d7ef1abbd87d573fe44c0a5692ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>volatile simsignal_t</type>
      <name>ssChangeSignal</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a3ca298b148783eba89d72134a55d485f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *const</type>
      <name>sSignalName</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a4235d46c336709e687bb1aced9983318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>sRunId</name>
      <anchorfile>classsimsignalwrap__t.html</anchorfile>
      <anchor>a1e4eb06d588a1023da2e550a2bcf3bc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SNRThresholdDecider</name>
    <filename>class_s_n_r_threshold_decider.html</filename>
    <base>BaseDecider</base>
    <member kind="function">
      <type></type>
      <name>SNRThresholdDecider</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>a5de72610fa410544fd6ff678b6f72f56</anchor>
      <arglist>(DeciderToPhyInterface *phy, double snrThreshold, double sensitivity, double busyThreshold, int myIndex=-1, bool debug=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SNRThresholdDecider</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>ac07c187348a6d669285c822cc6b94a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>a1e6266fe8a4d10ce5443e37321d3bcaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkIfAboveThreshold</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>a1d796e2f0da1c41810c5f2c5b4cfcd2e</anchor>
      <arglist>(Mapping *map, simtime_t_cref start, simtime_t_cref end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>ace13845f43c5328cea40eb00c59af2b3</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>a6002f2ee8ffa35ded0162c72f93c9fba</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>canAnswerCSR</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>a0946c7a3e2ee04e2bb1c2dce4b7be7ec</anchor>
      <arglist>(const CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>answerCSR</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>aa7e33361b328274b04ff7bd2d6206e6d</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isIdleRSSI</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>ae900f58c344f86cea2dbf21b55a74d85</anchor>
      <arglist>(double rssi) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>abdb6b19743460a19e900c4b6d38c483b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>busyThreshold</name>
      <anchorfile>class_s_n_r_threshold_decider.html</anchorfile>
      <anchor>a8f32acd24c8c84efee941211d1f81c98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test1</name>
    <filename>classtest1.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>aa2cd014fcecf9458585eb65f3ff32ca0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertService</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a47e9f1bcb410ea0c79e5d357399948b2</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertService2</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ac1c74daba70f72c5dfd702c7d2afc1bb</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queryService</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>aa29cea4ff376eee8735ad4791c05da3a</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>answerQuery</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a8ad95903fafe1feec98ccc99be041ede</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelQuery</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a67a347a014fa72c1145f5b74e690d9b3</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteService</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ad4f80504d46aef877b1000cf1a109722</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contService</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a24b3d939aee324a0f73f5a5e9ce76cbf</anchor>
      <arglist>(const char *cat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deterministQuery</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>af3b3bc95327fb76482186c7da17c497c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>service</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a4bba16ed757c0d01cd9aab8e74ae3242</anchor>
      <arglist>[640]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ns</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>aa7ad0699763680f0152f61bfaef345a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>nq</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>add4db5afd52e64ba8081238143e6cb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ae8347de4171f4e81d84d9c77f202dd38</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>abfb909355df8c4447c2fa0d56e036e58</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>acb96bd471e86c4276ba010fef6f3062b</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>adea56f23113457f0a7c389574bdaa614</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>mobility</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a1fd7cb67f7d8a2ed58706fb3b770e6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>traci</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a5ad25ca3f446c0e01008407fb923c2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ad4aa530fe059c15325ee8be07ed59f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendQuery</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a43338c2d6aa9b4045f6a51b32a3effa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ab7d018a5a13d3cdeb1cbffe4f86c6a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>cont_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a2dde892e8b7402d8473b84d8fe724967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>c</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a22bdc24c6adf52d6a293b4fb487170a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>qservice</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>aef4b70b6774b0840a1b7cd5b4babe6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>queryInterval</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a83aa51fdf77b2ca509d67de6fe7fc186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeQuery</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a184f9e9baef84368116b8b33539dede6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeService</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>abb45124e81749556a3baab7fe90c9ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initQuery</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ab48da90c2d548f2097bcac65f5a9839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiver</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ae364533967bf020372721b501c52a2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>t</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a3b168d8226c3c878f2e6eca1fc701f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>serviceQueryEvt</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a74d3104047f96e059c0526bb79ee0c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>serviceExpiredEvt</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a659204c732eea00d7d3e62241691d12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>mobilityEvt</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a78ed50fde51f1233aa83f81c5038138d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_beac</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>adda8882ab1ccb18b611a8dd4e511c049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_adv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a03f5d11218dcfd0bb8709544ed2e82fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont1_adv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a3abd871aa8f32c5d2bbc683e11aebc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont2_adv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a65725f823929fe2772a3fcaf44618ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont3_adv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a2f45fd710a423c803597f3b6af872f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>c_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a28c8dc94a6eba3319bac7fe4cc931a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>p_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a682e98f3b943ad4f851bfc1830281f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_del</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a53f750ed860995e39bafb16b483f834c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>us_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a92de71f41778a780f6d0710385ddd81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>m_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a681b1354386ad37a5255f747463cc3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>a_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ae0c8e849d00d3cbb6a92524efb4ec3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a9fe6a4a61a7abad5a6b975188930d1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s1_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ac27ff78a5ad65efd8ccb97f3db9adb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s2_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ada550445a2e2b62e6a9fe588c2bfd08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>s3_query</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a0e00f51b1667495747e63e993d0d7cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont_serv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a339a5f543715f56f71890d709ded6941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont1_serv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a04aa0507de0a47437bb5378d4808518a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont2_serv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>a419c9a2aaac31f3186f6500914adb3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>cont3_serv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>aa5dfbcd9292e3f3e25ff7ff1b38b506f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>store_serv</name>
      <anchorfile>classtest1.html</anchorfile>
      <anchor>ac47b3cbea6b96388bce22ec408035b53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test1_rsu</name>
    <filename>classtest1__rsu.html</filename>
    <base>BaseWaveApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a391821cd699263b2ceba937ec095eb36</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setServices</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>aa74bfba1cac54621985869e9da05e9cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prepareServices</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a194d6e39dd7d92cddb52d5a6e6d8989b</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>service</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a9c5f779ae9c69f95eac41b571b4e745e</anchor>
      <arglist>[240]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sleep</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>ad3ce73202235107bef88b7b64bf75492</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeacon</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>ab2fc4dee148e57e01edb8bd5b8d10322</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onData</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>af6be99f6604cbc0ab1bbcb5f9e74b688</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a7b8fd0738f085479f6a7bffdd4d1de1b</anchor>
      <arglist>(const char *serv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendWSM</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>aa1e809680cd284f0e460662eabe208de</anchor>
      <arglist>(WaveShortMessage *wsm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a14cc632f49ca87aab471a5effc82cd39</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>t</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a9da30fbcd2918204d7a12f1764b45c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>ad99bdfb8ab882246028aa2a5abe8ad17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseMobility *</type>
      <name>mobi</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>af444a3eb81ec507824ba31f0ff58fdd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sentMessage</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a5ee736536e1d44db8603b6ab1c3a075a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serv1</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a12c9006c0ee93ee44fd9b03fe51bc5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serv2</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>ab30768e38f41636cec61c620e3c49e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendServiceEvt</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a853477d20b76824c723a5c0b530f687f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>sent_adv</name>
      <anchorfile>classtest1__rsu.html</anchorfile>
      <anchor>a5e135b2fa9e917056df00338daa42509</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMapping</name>
    <filename>class_time_mapping.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a3ca434daf1dece372ccc7421b5305720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a1fbcd02d2c6525dc0d89354a146e4efb</anchor>
      <arglist>(mapped_cref_type outOfRangeVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a3d9bde06fb3d637992eb3e60135d96c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a4f46930630d6c6a79b34211992840731</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a453ce64062fa7afd7398735a9cf499a6</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a99f25f5769ab59fd41080fedfa0dbaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a46c922604b76bf239263820a34a6ff29</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; simtime_t, argument_value_t &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a234c05b54a7bb7366b6f40598c925aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a3d3dc8083e25509e01ffeac67792fea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>ade5767a86bf9854bc2c277aec02a1bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>ad3d8288de00e1653af77476e3940f54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>a75b569ea7018b0f3e08a65a84d7ee97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>af8af9735fbd58320b894d961f690c4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>class_time_mapping.html</anchorfile>
      <anchor>adb0dbcc9aec3a052d85ef7e015a89148</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMappingIterator</name>
    <filename>class_time_mapping_iterator.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>TimeMappingIterator</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a0bdf656d6e53fda33b555b0c100af6ff</anchor>
      <arglist>(const iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a41457ef9679298443d01dd5d29d63864</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>adf215619550c90677bb8784e61813c45</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>aa12e17f8a08312b3661671c1c2b6c4ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a787c682f86d90d77fddc92f4045639b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>ab9eb7cfe03f970af00ce999161dc8077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a19cc52d765cc946a004c87e92ebc659a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mapped_type</type>
      <name>getValue</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a29e9cd7dbc9096f8694739faaa3450b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>ac7a2b12c7ac068980d72b374d2ea4182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>abac41f2fb9ad8d503df9d8c27d3d6340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>ac4eef2a5a0b2c899e270048c86d6ec66</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; simtime_t, argument_value_t &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a61386f0c76f3a08c1d35b46924955212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a664b59f81dcbbb62cdca0800d13a7a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a3c5c546c73e7faaccfc94b2e13d8fec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a0f7b37f70b736b69dc5c19341685958e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>afd8d7a3a42b56a8644e063da708c3e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPos</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a1a9382671669207404a7edba9469145e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a178fa9015e993aa264bc1351b218431a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>af9dbee2a6ce9ba1d26d8e2cd82c413f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a228df0793fb7486e617aeb9ba6540863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isStepMapping</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>ac8e1d2adb44399eb29c4b0fc4f84a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>atPreStep</name>
      <anchorfile>class_time_mapping_iterator.html</anchorfile>
      <anchor>a79417d5433894eb05e64574c3c8a3090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>traci2omnet_functor</name>
    <filename>structtraci2omnet__functor.html</filename>
    <member kind="function">
      <type></type>
      <name>traci2omnet_functor</name>
      <anchorfile>structtraci2omnet__functor.html</anchorfile>
      <anchor>aa84d0d67227adc32168108861fdeb305</anchor>
      <arglist>(const TraCIScenarioManager &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator()</name>
      <anchorfile>structtraci2omnet__functor.html</anchorfile>
      <anchor>abef03695023d00ba063cecf8995bce5c</anchor>
      <arglist>(const TraCICoord &amp;coord) const </arglist>
    </member>
    <member kind="variable">
      <type>const TraCIScenarioManager &amp;</type>
      <name>manager</name>
      <anchorfile>structtraci2omnet__functor.html</anchorfile>
      <anchor>a07898ff38f1b010d25b383417c16ff4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoRayInterferenceModel</name>
    <filename>class_two_ray_interference_model.html</filename>
    <base>AnalogueModel</base>
    <class kind="class">TwoRayInterferenceModel::Mapping</class>
    <member kind="function">
      <type></type>
      <name>TwoRayInterferenceModel</name>
      <anchorfile>class_two_ray_interference_model.html</anchorfile>
      <anchor>aa307745f89b85c3818babbe4ff613c6a</anchor>
      <arglist>(double dielectricConstant, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TwoRayInterferenceModel</name>
      <anchorfile>class_two_ray_interference_model.html</anchorfile>
      <anchor>ab2fd59f8ff378897fcbf2ab4a7a3d81a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>class_two_ray_interference_model.html</anchorfile>
      <anchor>a4488ba8c6127ff2e016edaa6bbd6a4c0</anchor>
      <arglist>(AirFrame *frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_r</name>
      <anchorfile>class_two_ray_interference_model.html</anchorfile>
      <anchor>a759b4daf5d7ee63761487a327cdf765b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_two_ray_interference_model.html</anchorfile>
      <anchor>af42413a25e44da60e4e79ab402f7c12f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TwoRayInterferenceModel::Mapping</name>
    <filename>class_two_ray_interference_model_1_1_mapping.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>a213028d2da53563f4c3b069e7c6b1608</anchor>
      <arglist>(double gamma, double distance, double directDistance, double reflDistance, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>ac293b9b7bf938aa591ec122d5b1172a4</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>a5b7dadcd022ec915ac180fd03f02caed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>af9f7c330e6c9f73581aa0ccf258025e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>a3f15d5ae55ea0f4c38b6e466a2da27cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d_dir</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>a538f9403d4af3cbe25408e47747dfed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d_ref</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>ab1bf53c80d53a51809d7cb2bb8fa44f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>ab96733624efeb51822cb98ccbca4e2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>a004bcb5773d7f444976f4bab32d3b32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>class_two_ray_interference_model_1_1_mapping.html</anchorfile>
      <anchor>a517c64ce3d3f928aa3c1a353f2781e11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaveAppToMac1609_4Interface</name>
    <filename>class_wave_app_to_mac1609__4_interface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>changeServiceChannel</name>
      <anchorfile>class_wave_app_to_mac1609__4_interface.html</anchorfile>
      <anchor>abda213fbe366fbb7ff579e5fe2e7ef40</anchor>
      <arglist>(int channelNumber)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaveShortMessage</name>
    <filename>class_wave_short_message.html</filename>
    <member kind="function">
      <type></type>
      <name>WaveShortMessage</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a8d66edc68ebe3ec56c8df75d5b367310</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaveShortMessage</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>acc0d8ea5209914167a63d102b2cda92d</anchor>
      <arglist>(const WaveShortMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WaveShortMessage</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a31f1ec10a3fa8583810299869b63be25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WaveShortMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aecc8cda9139f85065f5eebde4301ccc9</anchor>
      <arglist>(const WaveShortMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WaveShortMessage *</type>
      <name>dup</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a2a994de6e6306a0d3b6792e35ae40a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a7d544ef4bbf144936365be1365165b14</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a5fe4c2e8cbf904d104931c12b8bfc170</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getWsmVersion</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a6851e8a2af35b6e55d5bec81057ae51f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWsmVersion</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a980ce99a99ced19d20878103bb5a671e</anchor>
      <arglist>(int wsmVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSecurityType</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ab2e705e3c3b31bb8adc1d994852feb2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSecurityType</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a32f8c9d2a6700ebfda0d83701c4834f7</anchor>
      <arglist>(int securityType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChannelNumber</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a52905629f571c9c91557e744b199722f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChannelNumber</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a33ef604b6a5878e11a3bc4c2477e242e</anchor>
      <arglist>(int channelNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataRate</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a4dcbc909d1971cdcdd66b530031b2caf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataRate</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ac68cf638b21c4e7e90666cad683aecf3</anchor>
      <arglist>(int dataRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ac3117615566fa0a605f81bbaf53d5921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a21ccdbb5f448dbc3853885bc16bc3b3c</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPsid</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ab5790460483faa5713077d73007b1033</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPsid</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>adaf66b336060aff74a296c29f41509d6</anchor>
      <arglist>(int psid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getPsc</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aca2e9cfedb05afc037038641ab7e0583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPsc</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>af639cc8eefd79ebff975aa6c13cc34f8</anchor>
      <arglist>(const char *psc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getWsmLength</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a72950d93ddfe661721a53389e293c5c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWsmLength</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ae4d6bd7437dd170241b3d95c754a39a2</anchor>
      <arglist>(int wsmLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getWsmData</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a88e397ba4444c1e4bb00f94d344014f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWsmData</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a138e7425f6286d388541280dceab0352</anchor>
      <arglist>(const char *wsmData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSerial</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a9ffe0a30a78e7192e643e0ac5427db1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSerial</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a89a1fd291250ae9c6e16b104d3a76e8e</anchor>
      <arglist>(int serial)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord &amp;</type>
      <name>getSenderPos</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a47e866d383c3454e186dbe9c869fbc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Coord &amp;</type>
      <name>getSenderPos</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aef5363629ec88acfca41b3c56ecb2698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderPos</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a66e2d0a9a7bb00d63cf79837fe0de6a3</anchor>
      <arglist>(const Coord &amp;senderPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimestamp</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a26d848cf954f3c04bc78063e8c16d956</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestamp</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aed9bcc826c641cf992fe9bd82b2d5ca6</anchor>
      <arglist>(simtime_t timestamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSenderAddress</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a71a1969325dc1e97be41c1163f31af3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderAddress</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a088963cd05b8b2d4ba9da752e91c06f8</anchor>
      <arglist>(unsigned int senderAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecipientAddress</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a15fe47fd5025d6e06a9d9a60e05c025b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecipientAddress</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ad7cbabdfdaf2620d1ad8f7ea6eea9c89</anchor>
      <arglist>(unsigned int recipientAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSource</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a9fee46e80789894357a0da88fc0f8458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aefc55f16ac16be615b58ecb0b724ea87</anchor>
      <arglist>(const char *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTarget</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a2bdb99e260528ad12afd44b16f8c1e10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTarget</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ab089299581a136da502bf3dec5475436</anchor>
      <arglist>(const char *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSummaryVector</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a017e4a44a8acfc490e33f25732220f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSummaryVector</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a5ce6a4923a9e3a9908cf0ab236597445</anchor>
      <arglist>(bool summaryVector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRequestMessages</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a39832f2b630e991d68aa71fa1490f7ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestMessages</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a8d42f5967b9f16bae543f3b6bcbd1e08</anchor>
      <arglist>(bool requestMessages)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getGlobalMessageIdentificaton</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a45f745e1750b2a1b6ca9c31f5e513a89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGlobalMessageIdentificaton</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aae6c742a65f7ab57b5a86e9791a68546</anchor>
      <arglist>(const char *globalMessageIdentificaton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getLocalMessageIdentificaton</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a1d089fb4eb35580a32b7d89f9ac17dc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalMessageIdentificaton</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a1db07fc59effbf6587a97d3271ce247d</anchor>
      <arglist>(const char *localMessageIdentificaton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getHopCount</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a03e76e79afecdc031715444921f9ba6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ae8f272dda7636725afecbf45a2ae8c0f</anchor>
      <arglist>(unsigned int hopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAckRequest</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a2c34df954ec68ff80c8161014feeda6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckRequest</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a5ab53c33d2e93480e4d3da63c7679881</anchor>
      <arglist>(bool ackRequest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRoadId</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>adf5cb9bc6fecd753f31f94ce36a7dddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoadId</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a48b6d8b5e1e6bbc9cc45524bc5abef41</anchor>
      <arglist>(const char *roadId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSenderSpeed</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a0d77d3d5803131eaa252e9344964ef70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderSpeed</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a1fc976c2340d3c7b10e3f560efb9dbbf</anchor>
      <arglist>(double senderSpeed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCategory</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ac56b4e6f5c09e83aca7056854ea44b5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCategory</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a8ae71835284c1c771f8dd3413d4c8aaa</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVehicleId</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a3514a24893254d6b1691b2915d3f6e4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVehicleId</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aedc2467543d47137f3553f20bd5677a3</anchor>
      <arglist>(int vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aa0b6d55f5de67f4c0239e51439ddd3a3</anchor>
      <arglist>(const WaveShortMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>wsmVersion_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a046c5f1ea5c6a3682a428ca45530024c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>securityType_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a2784decc747424d85dee5b479c342304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelNumber_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a77621cbf05994838673ea0622149adb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataRate_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aee970d599d0efd480841c37af09ee01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>priority_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a09e08fcdd074881b33101f765d968e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>psid_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>af4c73b65a886df201a613ea457e068c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>psc_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aed6c40c3bf9e9537b288307b2cd6a3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>wsmLength_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aa006bd6b37a2d4cfa316d91cead6247b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>wsmData_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a451aac501c89cfe9cae36d82739e0311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>serial_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ad4aa751d16536190049b740580067895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>senderPos_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aadbb99ab6b73089e01967ec6d57ad9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timestamp_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a33b24de6e0d97218a2f69cc4ad575e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>senderAddress_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ae1773ce56c973b9d25783f30ba617e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>recipientAddress_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ade8ebe19bad346bb01779d09b481a4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>source_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a44093530d9b4d192a0c578334d0457c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>target_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a9c53d91dc9c7e82b32f9a44d3f2a17ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>summaryVector_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>ac3b379c273f11f3fc075d25bd4c33a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>requestMessages_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a2a6144800c0e81db4a93c2fe01b0fbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>globalMessageIdentificaton_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>aac3405d9f5e25df383ab7130cae2bec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>localMessageIdentificaton_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a6bc9e1f02228500a36ef89f4b88a49e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>hopCount_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a19d8f27cf4646af8c09c9e8100435d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ackRequest_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a574627f9e2162fa2483c0441683664d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>roadId_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a73c08268aed9a6c67b9ca865698f59f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>senderSpeed_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a0b52e3fb5fdd4fe37005673462c7ebaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>category_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a2dba612db6ad9e2b7d58c063e53a252a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vehicleId_var</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a8e589d8db8e7d50f7849f51acbb102d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_wave_short_message.html</anchorfile>
      <anchor>a886da023d7a335201fdbce036c9f7cb3</anchor>
      <arglist>(const WaveShortMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Channels</name>
    <filename>namespace_channels.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ChannelNumber</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CRIT_SOL</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcab12b043ef121a55f7798b8d88f3435ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH1</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca4cd9253ed42cb3f1acfcc858a800bec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH2</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca33e2709732ed8a9d5d26e0671d465dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CCH</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca5b15c7f06aa1608e57faa584bfed0974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH3</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fcacde39da5e71b24a5f2930033049547ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SCH4</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca3f6fadf251397cd3ffe1b485d7f91cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HPPS</name>
      <anchorfile>namespace_channels.html</anchorfile>
      <anchor>a996d22a04f889e08633e95c841da11fca9719348cf725d818dfdd2f2bdbe849d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>debug</name>
    <filename>namespacedebug.html</filename>
    <member kind="function">
      <type>def</type>
      <name>relpath</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>a126e33a9c30781a294de4f7ced8b43a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_libs</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>aa470b527584549f9d1a8306e98b72ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_neds</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>a369de672f620ada372eb34e6e6599d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>lib_flags</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>a0e8cfe6792c7a649455486ffa9488da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>ned_flags</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>af698897781e39e06ce4040bf40e28fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>prefix</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>ae8a882429b0065cf1d46a8985f218025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>cmdline</name>
      <anchorfile>namespacedebug.html</anchorfile>
      <anchor>abfa92bec292237ea4cc1df93291db0a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>memcheck</name>
    <filename>namespacememcheck.html</filename>
    <member kind="function">
      <type>def</type>
      <name>relpath</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>abc9f2bd47bf277d872336feb8c3237f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_libs</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>abef10f5e361e62ca2831502fa3c11c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_neds</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>ad357faeb491d822d6d926a1c4391864e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>lib_flags</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a65bd66a14457c4a3c219e0632e767e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>ned_flags</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a7bc865603d5f94ced762580c5a600f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>prefix</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a3835c890fcbd0ad82917950824eafa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>cmdline</name>
      <anchorfile>namespacememcheck.html</anchorfile>
      <anchor>a971d739c77ea348507b183cf26ee1752</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mixim</name>
    <filename>namespacemixim.html</filename>
    <namespace>mixim::math</namespace>
  </compound>
  <compound kind="namespace">
    <name>mixim::math</name>
    <filename>namespacemixim_1_1math.html</filename>
    <class kind="struct">mixim::math::mW2dBm</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, false &gt;</class>
    <class kind="struct">mixim::math::mW2dBm&lt; T, true &gt;</class>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm</name>
    <filename>structmixim_1_1math_1_1m_w2d_bm.html</filename>
    <templarg></templarg>
    <templarg>B</templarg>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm&lt; T, false &gt;</name>
    <filename>structmixim_1_1math_1_1m_w2d_bm_3_01_t_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmixim_1_1math_1_1m_w2d_bm_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>a1493328ab1ee54fd4ff6e8cd61326b96</anchor>
      <arglist>(const T &amp;mW)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm&lt; T, true &gt;</name>
    <filename>structmixim_1_1math_1_1m_w2d_bm_3_01_t_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmixim_1_1math_1_1m_w2d_bm_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>a8ad42782121100d0c3b9a0a5a79a96ba</anchor>
      <arglist>(const T &amp;mW)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>run</name>
    <filename>namespacerun.html</filename>
    <member kind="function">
      <type>def</type>
      <name>relpath</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a5513d7aa204a0d2ed348e77a0e03513c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_libs</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>aa8897745da4c05b633810e1dc845e672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>run_neds</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a05378980682b60afac8590a283d4185e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>lib_flags</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a2ef50300891f044e6c027e57d86b545a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>ned_flags</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a6fedc5b0702a7c39a6c8fbd72a99aa3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>prefix</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>aa2810c9ec946e64b87771a4a41d8c663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>cmdline</name>
      <anchorfile>namespacerun.html</anchorfile>
      <anchor>a697c418a3e1daa658006c983de333de6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Veins</name>
    <filename>namespace_veins.html</filename>
    <class kind="class">Veins::ChannelAccess</class>
    <class kind="class">Veins::AirFrame</class>
    <class kind="class">Veins::BatteryAccess</class>
    <class kind="class">Veins::Radio</class>
    <class kind="class">Veins::default_veins_TraCI_TestApp</class>
    <class kind="class">Veins::epidemic_app</class>
    <class kind="class">Veins::minicurso_UFPI_TraCI_TestApp</class>
    <class kind="class">Veins::TraCIBuffer</class>
    <class kind="class">Veins::TraCIColor</class>
    <class kind="class">Veins::TraCICommandInterface</class>
    <class kind="class">Veins::TraCIConnection</class>
    <class kind="struct">Veins::TraCICoord</class>
    <class kind="class">Veins::TraCIMobility</class>
    <class kind="class">Veins::TraCIMobilityAccess</class>
    <class kind="class">Veins::TraCIScenarioManager</class>
    <class kind="class">Veins::TraCIScenarioManagerAccess</class>
    <class kind="class">Veins::TraCIScenarioManagerLaunchd</class>
    <class kind="class">Veins::TraCIScenarioManagerLaunchdAccess</class>
    <class kind="class">Veins::Obstacle</class>
    <class kind="class">Veins::ObstacleControl</class>
    <class kind="class">Veins::ObstacleControlAccess</class>
    <class kind="class">Veins::AnnotationDummy</class>
    <class kind="class">Veins::AnnotationManager</class>
    <class kind="class">Veins::AnnotationManagerAccess</class>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a3b3f2a57b7ea45d25c3621ae72dcacb7</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a2bbc3cd13c02338fcad7ebdf40d8e3df</anchor>
      <arglist>(cCommBuffer *b, AirFrame &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a9701754031a4d3de7cc9eeaae1bf9e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SOCKET</type>
      <name>socket</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>a6eeefaf3bbdaff6c10cfcd01200016d3</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>makeTraCICommand</name>
      <anchorfile>namespace_veins.html</anchorfile>
      <anchor>ab52db5bfe6d9095440c0b0ac309bb99d</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::ChannelAccess</name>
    <filename>class_veins_1_1_channel_access.html</filename>
    <base>Veins::BatteryAccess</base>
    <base protection="protected">AccessModuleWrap</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1_channel_access.html</anchorfile>
      <anchor>af4c4d6652f6e3d4846cb3d2e826f4bed</anchor>
      <arglist>(int stage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AirFrame</name>
    <filename>class_veins_1_1_air_frame.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>dup</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>aee5f9a707b1cf1669b506ae8f360b40a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>aa58183eb744a1c500fb394f1866f9d24</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>a28b9e0d4a9c79151518467a40f3b4815</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>class_veins_1_1_air_frame.html</anchorfile>
      <anchor>adea4dabe0c35a5e04c848d4d431b1f16</anchor>
      <arglist>(const AirFrame &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::BatteryAccess</name>
    <filename>class_veins_1_1_battery_access.html</filename>
    <base>BaseModule</base>
  </compound>
  <compound kind="class">
    <name>Veins::Radio</name>
    <filename>class_veins_1_1_radio.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>RadioState</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RX</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267a85301d7d7e53978ceb1d1bcd986ceb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TX</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267a801f851998c6c935794b02b51c4a564f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SLEEP</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267af7a031c37e397e9cb27fa719a0602f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SWITCHING</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267aa3a2ccc5df99f1f1784a24ff231fcfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NUM_RADIO_STATES</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afab1f516f9defc9c79e022c4f0d13267a3545d50f62a2fbfdc733dc0c8bd73f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Radio</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a9fb63e8ebc78c18b4eb5a8040d684174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>switchTo</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>aab434b342c42f1dbfa1df3640afbb4b0</anchor>
      <arglist>(int newState, simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwitchTime</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>aed80922c736427067f27669c87aaf4f8</anchor>
      <arglist>(int from, int to, simtime_t_cref time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentState</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>aa6255c987dcff98f53fb9eed5e056d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSwitch</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>aceb966be7e36e87068ae3424de8a5928</anchor>
      <arglist>(simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadioStateAnalogueModel *</type>
      <name>getAnalogueModel</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a38a6c78b55f1442108b44a0bd27abb9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanAnalogueModelUntil</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a25501a63aaa78e00dda4e5b868874407</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackingModeTo</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a803442f32c2eced5bda170cd3a9b5772</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentChannel</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a8304dc1fea7754a1cd9c26713e39f234</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentChannel</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a6e7fa250ec1b1793c51931a7cb7ae914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Radio *</type>
      <name>createNewRadio</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>ace59f406149ca9de32fba8f64a10c239</anchor>
      <arglist>(bool recordStats=false, int initialState=RX, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Radio</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>ae01993661828f9efbb5053a78227789e</anchor>
      <arglist>(int numRadioStates, bool recordStats, int initialState=RX, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeRSAMEntry</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a0cdbbabf0ca4bab58eed854b22bb60f2</anchor>
      <arglist>(simtime_t_cref time, int state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Argument::mapped_type_cref</type>
      <name>mapStateToAtt</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a78f899bc34a9ff0a67d887d166c4651d</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioStates</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>aba0037435265ef0fc59ba4d23ae550c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioChannels</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>ac41ffe7b9281ca385d33da1b29540c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>aa9faccaa07ecb115e054d56a6f6e27f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextState</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a026c484da4fddae621754b604b017c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>numRadioStates</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afd3042e4411274936dc29107ba55a82d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t **</type>
      <name>swTimes</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>ac54427080e05dad5b76117fc05f6180a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Argument::mapped_type</type>
      <name>minAtt</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a48211299a136eeacfad9a48137e656ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Argument::mapped_type</type>
      <name>maxAtt</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a166724a9c8ebdba2891de103ff4ce38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioStateAnalogueModel</type>
      <name>rsam</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a73c0c7ea78d32d4782e4025fa5cb0b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentChannel</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>a1ac015184bd8d52e3ea781c16092da6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbChannels</name>
      <anchorfile>class_veins_1_1_radio.html</anchorfile>
      <anchor>afa761671ebe5c75db5d957f5283eb7a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::default_veins_TraCI_TestApp</name>
    <filename>class_veins_1_1default__veins___tra_c_i___test_app.html</filename>
    <base>BaseApplLayer</base>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a582b14f06e79774036348109e254a593</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a4e328610e19ff9d1a441131a8b323c96</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a284614d514f1bfcd375f33be0f7c0f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a1adfffec5fd7e5a80bcfcce34a0e9f04</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>adbfcc8e6b81a9ec5e9b97b667594d5bc</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>aa1bb9b88b7f8f4dc311c864b087c2640</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a509a641698a4887986424f07452a1807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>adba171833eb59554ff82f97b315455c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>testNumber</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>aa5913f7f9908b1d3e38e8936006b9aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a6d0f648557b417676ba1b689f31c3aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>visitedEdges</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a54317278fb7bf98481e752f6cd6c6eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasStopped</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>a161b2bcbce1a920308be68fc838218e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>class_veins_1_1default__veins___tra_c_i___test_app.html</anchorfile>
      <anchor>abfd5766ab9397a041ab3dbe8b5b7caed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::epidemic_app</name>
    <filename>class_veins_1_1epidemic__app.html</filename>
    <base>BaseApplLayer</base>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a1ed1f46e5b75675bcde2f534364aab5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a2e4ff5ee0e6c7bb3363ad408bb703b24</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a70087a0550261b1770a89dc17522dce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a58e1701b4782d50f301931ff37dac297</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>afeaa48ed52206a23881b376ba4f4c297</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>ab1558c0812fe48f47d1aac6f30b5dae8</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a3d0f4fc6d7a18896ed87669ab37670a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>ae69611e1cb87ee187ee6c4704474d3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>testNumber</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a4bc387684de3bf23a8471a1ca127a74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>aa780119f49aaf2c4d642adedc9120e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>visitedEdges</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a855a0c9182668485fac6a2f012eec96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasStopped</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>a1a1feaed101ef2423c1d227c6d47e4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>class_veins_1_1epidemic__app.html</anchorfile>
      <anchor>ad2302e7ec0842f5f3261c075fc5ee5af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::minicurso_UFPI_TraCI_TestApp</name>
    <filename>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</filename>
    <base>BaseApplLayer</base>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a009cdf3c506a70c2724a4c5d2bb8685f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a800673c5b14342a3aad82f8e631ae83c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>af3b04559a9272a56fff1341e0002c973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>acc59db239c42e0d52d60461eafb1e924</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMsg</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a0ca51ec47e8c09993c56d845f98d9e0b</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receiveSignal</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a97b60a9b8c45ef73e4922db7f3af1024</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePositionUpdate</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a68051be72ee51dd27b4e373ac1058c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>afb2e77b47c72bd6180b8e038c3189bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>testNumber</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a7c39e046652a7ab343b10ff29cdd026c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIMobility *</type>
      <name>traci</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>aeca90e4db76a7c3bf13a0a7a9053db6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>visitedEdges</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a22b41497a9a69d9ee66eec6acb326084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasStopped</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a5ae471dd403894c65075f4f0cd8a3bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>class_veins_1_1minicurso___u_f_p_i___tra_c_i___test_app.html</anchorfile>
      <anchor>a64e7f426b60afd8fbeb41391c2921ef9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIBuffer</name>
    <filename>class_veins_1_1_tra_c_i_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIBuffer</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>afa9eff9c2aaaa0cfc3e36b5a74f12b34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCIBuffer</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ab130a3b48f90499123bc71e1cda68d8b</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>af77b1459cfce5455936a14352428a6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a5716cca2373bc83b19f9182bc2b916b4</anchor>
      <arglist>(T inv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a7a18c5f9feeb6e912830a5b218f6767a</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ad44ad367a05d0a805bef431d9aec64fc</anchor>
      <arglist>(T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a60197679448ddfc14c396977c2670932</anchor>
      <arglist>(const T &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a0065f3b4bf17cac8e10dc94b551eb9f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>aeb7e03740d7a8764353901c71e0d6472</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a2e04ebc5fcc8dc86eb2a2f5b9f41e1b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ae0833eeb81079e14eed3f13d0ae5d2b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hexStr</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a31246320789a4ca84735a1065517d3b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ac59eb5ee7265be3ebbeed96063d3c1b3</anchor>
      <arglist>(std::string inv)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a05a88a2e7d1a3cabbd7a226cba57ead8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a253db8c674035879cda1c4221089e8da</anchor>
      <arglist>(TraCICoord inv)</arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>read</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>ab4b90aa3cc711e747de159ee22608efe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>buf</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a00529498a04c7cd194ddc7b58f72b2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>buf_index</name>
      <anchorfile>class_veins_1_1_tra_c_i_buffer.html</anchorfile>
      <anchor>a54e7ced5a3738c60dbe129e31938b0dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIColor</name>
    <filename>class_veins_1_1_tra_c_i_color.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCIColor</name>
      <anchorfile>class_veins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>aed4c0a7c62bb97cd300b23f3f932e6e7</anchor>
      <arglist>(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TraCIColor</type>
      <name>fromTkColor</name>
      <anchorfile>class_veins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>a298f34374f0c11021d65018040152c98</anchor>
      <arglist>(std::string tkColorName)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>red</name>
      <anchorfile>class_veins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>ad37e5e02d99901d9570541f409148f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>green</name>
      <anchorfile>class_veins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>ad6549105aa768ce2873b58c064aab2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>blue</name>
      <anchorfile>class_veins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>a679d0266ef7f48273a4f3088cfef92d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>alpha</name>
      <anchorfile>class_veins_1_1_tra_c_i_color.html</anchorfile>
      <anchor>a6f2468068ff160a79c3c4e5a5da76755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCICommandInterface</name>
    <filename>class_veins_1_1_tra_c_i_command_interface.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DepartDefs</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_NOW</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a05907030057ed2a135be6fc1a7ecbad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_LANE_BEST_FREE</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a0c9d22c391c09a99215d9be0584a8202</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_POS_BASE</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a4310ac09e76e6acda3650d56ada96e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEPART_SPEED_MAX</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a51c2de8a5a712fffd9e7e54da214ab20a0bf04ef3110b142713ea44517a14372a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCICommandInterface</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ab3aca7b9763e17fcc636181bb1951ddf</anchor>
      <arglist>(TraCIConnection &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; uint32_t, std::string &gt;</type>
      <name>getVersion</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a5ec16879b2f125f96cca09406ba948d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMode</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>afc80a994bf28aed81292800c59ea8766</anchor>
      <arglist>(std::string nodeId, int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a2217dba9af605fa6c8a4ed3cad2ef8c8</anchor>
      <arglist>(std::string nodeId, double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a9a8c9a38fe1d0e175c3ebd37361dfd77</anchor>
      <arglist>(std::string nodeId, const TraCIColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>slowDown</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a09e1fc2850dc6eaebc14b12afee971e8</anchor>
      <arglist>(std::string nodeId, double speed, int time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newRoute</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a7f572d175dbee1fa443577a0dbbde9ea</anchor>
      <arglist>(std::string nodeId, std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVehicleParking</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a0e7ff21d0f70a5e9bcf19c1cb2911bbb</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEdgeCurrentTravelTime</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a90f17d035256946ebf1d883ae04eb46b</anchor>
      <arglist>(std::string edgeId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEdgeMeanSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ac4338b211f2c21d5b978c1516491577d</anchor>
      <arglist>(std::string edgeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getEdgeId</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a90a053e718c42f191f9516da25a9e156</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCurrentEdgeOnRoute</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adf4b5219ff417d1807b28c5c682aef3c</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLaneId</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a8479bac5e1025be062d022fd31357ba0</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLanePosition</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aea3bcd95e6559e9ea9b20cdb8b79f996</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getPlannedEdgeIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a1039cb6cd07892f230444ddb7e3f6b71</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRouteId</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a9c968010640906fa2d949d3e1801fa0f</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getRouteEdgeIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>aae603daa947aa28d14f99b971d7b12ff</anchor>
      <arglist>(std::string routeId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeRoute</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>afbf9fb50998c427ef9a788e9c8ade7ff</anchor>
      <arglist>(std::string nodeId, std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceRequest</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a78362723702727e640628bef4d5b13ef</anchor>
      <arglist>(const TraCICoord &amp;position1, const TraCICoord &amp;position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopNode</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a186cc95b6542656bf0be285ee754b875</anchor>
      <arglist>(std::string nodeId, std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrafficLightProgram</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ab1e0798bb31be6991c3e75cc33f68c2d</anchor>
      <arglist>(std::string trafficLightId, std::string program)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrafficLightPhaseIndex</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a684c3cb6e0735b42af742d5967943177</anchor>
      <arglist>(std::string trafficLightId, int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getPolygonIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a77573e8424c15196246040763be4a926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPolygonTypeId</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a9d96dc4166adb4055e924aa9e5b2c627</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; TraCICoord &gt;</type>
      <name>getPolygonShape</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a4d673ca4ad88f229b75648f227c56c97</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolygonShape</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>afd701397f390d4f6ce48c326f6a126de</anchor>
      <arglist>(std::string polyId, const std::list&lt; TraCICoord &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPolygon</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a461a0c6e0919a5c0c9432a2abdd01d8e</anchor>
      <arglist>(std::string polyId, std::string polyType, const TraCIColor &amp;color, bool filled, int32_t layer, const std::list&lt; TraCICoord &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePolygon</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a907c785e9a9f033e3f8df23e948c9d0d</anchor>
      <arglist>(std::string polyId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoi</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ab96a689984239c3b71b26e789de6bc76</anchor>
      <arglist>(std::string poiId, std::string poiType, const TraCIColor &amp;color, int32_t layer, const TraCICoord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePoi</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a52ddaeea1ebceaf387c6f250a221a10c</anchor>
      <arglist>(std::string poiId, int32_t layer)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getLaneIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a4276dd21a299f0d08f6f43252aad4601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; TraCICoord &gt;</type>
      <name>getLaneShape</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ac321eba394eb9c41a0a0c6284dfc4452</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLaneEdgeId</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>acf6d801e6e4b4b5debca3a15f0e85167</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLaneLength</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a21a58a8611558cdfb01ca666797a4643</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLaneMaxSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>acb4b737672dc93997cf09f522fdeaca9</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLaneMeanSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a468a556d1aaf5ef0610db43cfd10512e</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLaneIndex</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a30bc9c3300033d391020536ef32a92cf</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getJunctionIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a0a96e941c026a81d8de8de348002fd55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>getJunctionPosition</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a5abc8b1965f73816fc72bafa6060a5cb</anchor>
      <arglist>(std::string junctionId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addVehicle</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6ac5b17a01d5e6034ed0f806587b4829</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-DEPART_NOW, double emitPosition=-DEPART_POS_BASE, double emitSpeed=-DEPART_SPEED_MAX, int8_t emitLane=-DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getVehicleTypeId</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a8a87a1988c817c120887daf189f7aae4</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getVehicleTypeIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a66890d755c53a0fd4649b6bd852e102f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>getRouteIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a68b81d22921e5d51e810fa7f56b59195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeVehicleRoute</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a574015e5fb2e460634f28ef510d6f8cb</anchor>
      <arglist>(std::string nodeId, const std::list&lt; std::string &gt; &amp;edges)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>positionConversionLonLat</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ad8985afa0ca072941b12456557f03b5c</anchor>
      <arglist>(const TraCICoord &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>genericGetString</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>adfa71f32d366ee0b702a4a59f822a0a4</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TraCICoord</type>
      <name>genericGetCoord</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a0401641eb2dcf84a31bab71f5cd5fbb0</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>genericGetDouble</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a9bd02d0be1222e43bd321ccf8ca8263d</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int32_t</type>
      <name>genericGetInt</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a06bdb5ff8829cb2cd25ea5176c7d69d9</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::list&lt; std::string &gt;</type>
      <name>genericGetStringList</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>ab95ab875524c5556aac9d53f20ba0532</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::list&lt; TraCICoord &gt;</type>
      <name>genericGetCoordList</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a6ca67c63f0e2e095693fce07dc6e90cd</anchor>
      <arglist>(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraCIConnection &amp;</type>
      <name>connection</name>
      <anchorfile>class_veins_1_1_tra_c_i_command_interface.html</anchorfile>
      <anchor>a7cf0200ecef0b74717444e3547f534de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIConnection</name>
    <filename>class_veins_1_1_tra_c_i_connection.html</filename>
    <member kind="function">
      <type></type>
      <name>~TraCIConnection</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a58abd901783fb79c052a7a93387da0a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer</type>
      <name>query</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>ac0f5129ad1e50365588ec39112432c7d</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf=TraCIBuffer())</arglist>
    </member>
    <member kind="function">
      <type>TraCIBuffer</type>
      <name>queryOptional</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a9c6888b53a5f172a43361f3fee995a85</anchor>
      <arglist>(uint8_t commandId, const TraCIBuffer &amp;buf, bool &amp;success, std::string *errorMsg=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>aaf6acde79a0ba73113c46ea92bd567d2</anchor>
      <arglist>(std::string buf)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>receiveMessage</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a634ce6c27d5e98f7d96f65706f3460df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TraCIConnection *</type>
      <name>connect</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a0b03b7d7e0f3955936ee7a2c17039bd5</anchor>
      <arglist>(const char *host, int port)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TraCIConnection</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a2c7d80df94985316a7b6599091006175</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>socketPtr</name>
      <anchorfile>class_veins_1_1_tra_c_i_connection.html</anchorfile>
      <anchor>a31fdf693fe2c82c6e00b79afaeb2bc14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Veins::TraCICoord</name>
    <filename>struct_veins_1_1_tra_c_i_coord.html</filename>
    <member kind="function">
      <type></type>
      <name>TraCICoord</name>
      <anchorfile>struct_veins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>aacbd9709ddfdc38df32362dccc7420c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCICoord</name>
      <anchorfile>struct_veins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>a85685169dd692ec2e4ed2c433f0f23a4</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>struct_veins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>aa875ad4fcf518b402978533cf4d3812b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>struct_veins_1_1_tra_c_i_coord.html</anchorfile>
      <anchor>a4a2139b44f9a8f49b908dfdabeafe285</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIMobility</name>
    <filename>class_veins_1_1_tra_c_i_mobility.html</filename>
    <base>BaseMobility</base>
    <class kind="class">Veins::TraCIMobility::Statistics</class>
    <member kind="function">
      <type></type>
      <name>TraCIMobility</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a55255b2a792d2355036b32606695fc16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a508c83b198cc326da67bd8ed1decfb75</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a07c35ffc4230bc632e0233c723d719d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a0f6b3ea2a2e2dc2a308c8db11bc09172</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preInitialize</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a0f5910264711db6f973c47789e615c79</anchor>
      <arglist>(std::string external_id, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextPosition</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a2b8432d33ff6bcadf7a5c4d30d5636b3</anchor>
      <arglist>(const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1, TraCIScenarioManager::VehicleSignal signals=TraCIScenarioManager::VEH_SIGNAL_UNDEF)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changePosition</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a3137899bb330551c9823c40b4ed8b8fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParkingState</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>add18338b0358fd50ff570922ab39c0e6</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aa01f8917bba28cc6b9760ec771b973e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExternalId</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>af3d20ebfc59ea6512fdc24bf545676cb</anchor>
      <arglist>(std::string external_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getExternalId</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a5d901e593ed0fcb4ee5214564f81ed95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAntennaPositionOffset</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aacdae64976e6e89082040bea5933f6f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getPositionAt</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>af3dcd8e7c2046fa939aaee6e3a087e03</anchor>
      <arglist>(const simtime_t &amp;t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParkingState</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ac730da06609e16bbf5ce9e8588c0c388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRoadId</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>afd3a0636a9a5bbe834f71a59108eeda4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a0c0e1114d451023eeb819c443f81bb89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCIScenarioManager::VehicleSignal</type>
      <name>getSignals</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a2d3091a2fc3025eccb744f98bbd73eaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAngleRad</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a6b9658651943c7ed6dc4825ccad654c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCIScenarioManager *</type>
      <name>getManager</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a9112501e8dffb3ef22fc5c571a016ed1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TraCICommandInterface *</type>
      <name>getCommandInterface</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a180ae1e009f8c81f66a167e21b7b5b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeedMode</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a686f62e55282c715d50da5f8c8a93b96</anchor>
      <arglist>(int32_t bitset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a19446d0b35ddc06910584035f448caf0</anchor>
      <arglist>(double speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetColor</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>acfe0eb11dba7e58ceb8a73a1fc546dc4</anchor>
      <arglist>(const TraCIColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSlowDown</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a8dba82d0b5d3ca0b4ee808cd232ac10d</anchor>
      <arglist>(double speed, int duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandChangeRoute</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>acb8588a5bf9a1935ae2c56665e4b8c14</anchor>
      <arglist>(std::string roadId, double travelTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandNewRoute</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a394eacba927cdd8c775f8cbe447b88b8</anchor>
      <arglist>(std::string roadId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandParkVehicle</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab6699c46462926214843851676a9b7b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandDistanceRequest</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ad12b4eeeda71908c5ef92e2c898bb223</anchor>
      <arglist>(Coord position1, Coord position2, bool returnDrivingDistance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandStopNode</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ac4c947a71721873747ef1dbefe9d47a7</anchor>
      <arglist>(std::string roadId, double pos, uint8_t laneid, double radius, double waittime)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>commandGetPolygonIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a921319d7673fb47c6f88eecf625d7edb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetPolygonTypeId</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ad6dae54ea3da130e4c74e5cbfb23d45e</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>commandGetPolygonShape</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a668e0a54db3c6cea0f10b9f503c5c098</anchor>
      <arglist>(std::string polyId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commandSetPolygonShape</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab7240e81be9c67822c1dc7786939fb00</anchor>
      <arglist>(std::string polyId, std::list&lt; Coord &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandAddVehicle</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a5701e3f37cb8ff4d7f1348808620aa76</anchor>
      <arglist>(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st=-TraCICommandInterface::DEPART_NOW, double emitPosition=-TraCICommandInterface::DEPART_POS_BASE, double emitSpeed=-TraCICommandInterface::DEPART_SPEED_MAX, int8_t emitLane=-TraCICommandInterface::DEPART_LANE_BEST_FREE)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>commandGetLaneIndex</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a8b023301d16f807c7bf913c3916e2b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commandGetLaneId</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a2b9f54cd4a0d1e11b588b13f90597c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commandChangeVehicleRoute</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>adfe169703507b3944df0156131bd6b0f</anchor>
      <arglist>(std::list&lt; std::string &gt; edges)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>commandGetLaneLength</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>af8ba92d5ff2801b04fdf66268a2bb73a</anchor>
      <arglist>(std::string laneId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a0fdea350639a2c9e1a71d91c4d4cb8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateCO2emission</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aaab12d7d5b612bc5eed8ce9567184774</anchor>
      <arglist>(double v, double a) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>calculateAntennaPosition</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ad717a66b60ffceb73d95bf7c1c4eb87e</anchor>
      <arglist>(const Coord &amp;vehiclePos) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a65b04a95b0040f33d0c2800141bbecf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>accidentCount</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a38b51524117427dacb80821db1a56500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosXVec</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a1a9fe7ad61be9a60293b00d0463292a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentPosYVec</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aef60f5d90a20ff76373c8522f69be91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentSpeedVec</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a977eb0a14f0676e4d9e72c94e7d7e0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentAccelerationVec</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aaa8e945ee67a283dbb42211f89386c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>currentCO2EmissionVec</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ac1f32ea7b1134c42998e2dac7ad8cb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Statistics</type>
      <name>statistics</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>acefb4665d12d3a75d69874e35249430d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPreInitialized</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aadaf980849adcbdb710fcfa13dce88bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>external_id</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a21d84d4b4a06d92a3b028ebc180391c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>antennaPositionOffset</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a392148b42719087888a93337ff6db9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a32fefbe860c085895e9616d696a7558d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>roadPosition</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>abe64e236db4381e34c0357b0140fdf22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>road_id</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab88b5d1498ff55efb8e3ffac41ea8add</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a4b77003a6a823808c1daa781532a67c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a6c12363a9e734c10e3f8a3d43c4f923b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIScenarioManager::VehicleSignal</type>
      <name>signals</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>aba391505e39e444819f88a4f90a509c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startAccidentMsg</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab3736378b8b2000c37ca49a4a5f11cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stopAccidentMsg</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a450b898fcfa33db6459ea4cbcaa5cbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIScenarioManager *</type>
      <name>manager</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a54f13e4047151443c4ec5c69fcf2a30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>last_speed</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a9be0cb7856726d18428f7ffbc9755d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isParking</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>ab3ef5616a0e34e0f9e16780327853950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>parkingStateChangedSignal</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility.html</anchorfile>
      <anchor>a1d8738a560d88611b05bee8f91b93b7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIMobility::Statistics</name>
    <filename>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a85d464690436867cd9b877aaad2d3aeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>watch</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a091df9b48ee304cfe9cfbba7af0f7e96</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalars</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a063d5799a5ff7686056398d91a85f872</anchor>
      <arglist>(cSimpleModule &amp;module)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>firstRoadNumber</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a8f645d2cc3466bc839fbbddaaddbb22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a0b88fb71f3cd4e4ccbfbc7b79cc75278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>totalTime</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>add067f8844e6ec039a8bd3f606c582e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>stopTime</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>ac5b49b1c5689826d270e69037a913a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a24520419556ab1264b03793215169f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxSpeed</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a0aa0c82095f8ec615c8a716b89b3424c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDistance</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>a139b8ae9da27d588390125f4b742861e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalCO2Emission</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_1_1_statistics.html</anchorfile>
      <anchor>ae43f21422382132400b6e2d06fc1e2fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIMobilityAccess</name>
    <filename>class_veins_1_1_tra_c_i_mobility_access.html</filename>
    <member kind="function">
      <type>TraCIMobility *</type>
      <name>get</name>
      <anchorfile>class_veins_1_1_tra_c_i_mobility_access.html</anchorfile>
      <anchor>aa2788845910c6afc0b6068d9bf71bdd3</anchor>
      <arglist>(cModule *host)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManager</name>
    <filename>class_veins_1_1_tra_c_i_scenario_manager.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>VehicleSignal</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_UNDEF</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aabc3b2630007242bd2e85c54915a5aca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_NONE</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aaf6049a070392297e92acedac6d3018d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_RIGHT</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa22625945bf7f8341a7a563672b546302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_LEFT</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa692ff08eb077493883b18a870bb948e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BLINKER_EMERGENCY</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa6d0243408cfc2c3cd9d3a8307b858865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BRAKELIGHT</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aaa0ed439b45fd825bb1349d4bbe04c129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FRONTLIGHT</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aabb8fe5d897ff299726c5c56b65afa561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_FOGLIGHT</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa3d9085d5dc170956afdcad3528a57489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_HIGHBEAM</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa2d2884d4d794a6f6482978cc07a6c810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_BACKDRIVE</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aab44798483cc8a77424997bbf3e2fe605</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_WIPER</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa16b6d8328522c827334537d93a2f7bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_LEFT</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa81a8f3dc475f680bec58335d62340805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_DOOR_OPEN_RIGHT</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aaa6235feea29e1778334fbef324e37dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_BLUE</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aac9a2f1fe9411897cb3d3586608ad7b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_RED</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa952bdd9bad89b4f739f5c2d900f50d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VEH_SIGNAL_EMERGENCY_YELLOW</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afa3fe3951bcea5da7557567b8142f32aa66706db19e32b3425a014d05b322191d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TraCIScenarioManager</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a54a7ac1f30470a59a6bf661499621ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraCIScenarioManager</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a074db4486fe1f85539c46c9efb47d3dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aeae3d3c4c49532b7de2caa34cc6861f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aad635968bbaf0a2b9ed0cade319a8830</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a95586be7e5fa2b6f0bb15a5768559dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a7ca227c28f036e04e42ef08d1639dbf1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a86a0b91aab8823c087c33b99f3a06b1f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ab25b8a9284329844c1fb4f48124ddfa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TraCICommandInterface *</type>
      <name>getCommandInterface</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>af9d96f6e40de409df2f1d04b617433d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAutoShutdownTriggered</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a1071045e264232b4ccf0ce5542b595ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, cModule * &gt; &amp;</type>
      <name>getManagedHosts</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a41d208f63678d3ca5701466775ed922f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>traci2omnet</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a29b5e7883ae664783dc581bbf7e10084</anchor>
      <arglist>(TraCICoord coord) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Coord &gt;</type>
      <name>traci2omnet</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ac09bba0ac49fb769cbee0164dd34128e</anchor>
      <arglist>(const std::list&lt; TraCICoord &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>TraCICoord</type>
      <name>omnet2traci</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2402ac6e732d3d969edb739ac1bb32f8</anchor>
      <arglist>(Coord coord) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; TraCICoord &gt;</type>
      <name>omnet2traci</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a4ad5eb6538c9948243ab66f32f8eef71</anchor>
      <arglist>(const std::list&lt; Coord &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>getCurrentTimeMs</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a7196c70a935847c9fc52724e928d5956</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeOneTimestep</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a84ebe9fb50441189bd39f949f2593115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a5389f3fc889b1fe3fd126c33a7d9ae36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addModule</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a08e1ff8c735af701665a197839515aa6</anchor>
      <arglist>(std::string nodeId, std::string type, std::string name, std::string displayString, const Coord &amp;position, std::string road_id=&quot;&quot;, double speed=-1, double angle=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getManagedModule</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a600d697200c9ed997ed6551cbc8e81d3</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteModule</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a51fba19aa4d310e5a3bb5ecb27b11d0c</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isModuleUnequipped</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a52691baec11c32dfe08f2cc721751075</anchor>
      <arglist>(std::string nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInRegionOfInterest</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ae51091825641970ee901cec6394f0c18</anchor>
      <arglist>(const TraCICoord &amp;position, std::string road_id, double speed, double angle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>traci2omnetAngle</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a3f044696709aebf39b9aee1c133f1ad7</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>omnet2traciAngle</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a95642ec04cba06fa237ab50c0e2a9fac</anchor>
      <arglist>(double angle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertNewVehicle</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ac54fb91923466d530f0f0d683124077a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertVehicles</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2950402455646afe8ed6c36254cc9fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToVehicleVariables</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a999d945fca20d45532a24b492430d742</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeFromVehicleVariables</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a53c90abb9587bfef622c410ea9ca31ae</anchor>
      <arglist>(std::string vehicleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSimSubscription</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a1dba6b09e84d2d3d91c552bc9172119f</anchor>
      <arglist>(std::string objectId, TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processVehicleSubscription</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a4b6aa1aa798b245ff323c5759a3b848e</anchor>
      <arglist>(std::string objectId, TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSubcriptionResult</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2f149bc15c3119ab19850b6960689eeb</anchor>
      <arglist>(TraCIBuffer &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2fcc8edee3707edb30d1fb497d5fa617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>connectAt</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a7f6e9f5a76090d181dfc25adcc75d1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>firstStepAt</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a51d1f1892cf60111262ab822c61e0bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>adc1ecaab960a23eaed61da0f25fbb107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleType</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a59d27f22218270e6af5d22809c79c6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleName</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aef27822edeb236bcd892ad88a15cde90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>moduleDisplayString</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a7bbf0dd3845ae451d6003f0768732bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a3dfd5a089d235df9f6cb57737a16f46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ae5bb0fd35f45fe67fd226e0279bc042b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>vehicleNameCounter</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a3201a3a4cdd00acb9c2cd0fecf9e9a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>myAddVehicleTimer</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a756be80f6586f1622de6ea90fd06c01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>vehicleTypeIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ae7c22ec07f52d59f8e45c0c12f1cca64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::queue&lt; std::string &gt; &gt;</type>
      <name>vehicleInsertQueue</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a79b8d8cf39d4a42bd7569ed5fd9a2018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>queuedVehicles</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a6b6cea898d3b2ae69edc2c66a3c24184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>routeIds</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a369cb820f4c3314eac96da8f867ef933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vehicleRngIndex</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ac6e13f93526078c81f5cee451d4995c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numVehicles</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ab9806e21062f489b23c4b86433246a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cRNG *</type>
      <name>mobRng</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aab2d2fa99a102a93487573797c5182c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdown</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ad81b1b3f1bdc22dbef3530461c080849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>margin</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a45df1010a586dbb3856e5eb8cf111a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>penetrationRate</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a5967b0824d1b7566cfbcf27a78ce360e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>roiRoads</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a9a29c530c8570f246591c8b9059d9ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::pair&lt; TraCICoord, TraCICoord &gt; &gt;</type>
      <name>roiRects</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a9f165e9d33765f513e940ddf7f5f7495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCIConnection *</type>
      <name>connection</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a1133aeadadd4513413fdcfd8478015f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICommandInterface *</type>
      <name>commandIfc</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ab582d692b149758e8d78836723e2b3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICoord</type>
      <name>netbounds1</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>ae531654c5722774573d8ae2d2d7a3c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TraCICoord</type>
      <name>netbounds2</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a0e6d3137f934213b4cb5957e70d0dc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextNodeVectorIndex</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a76bc9191ec2a5e51659f774ea485c80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cModule * &gt;</type>
      <name>hosts</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a9b843bd56ca321e1642a26988c344556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>unEquippedHosts</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>aa3817b2b12aa8d874e89996673ad267e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>subscribedVehicles</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2f731af13e5becd60dbf9fc476704ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>activeVehicleCount</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a5491031b97ad839ad721b3677c2f36e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>parkingVehicleCount</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>af96a26fbb86d8a655b504bcd8508217e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>drivingVehicleCount</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a2b2fb8ca878b36aae5d93755f2a5117a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoShutdownTriggered</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>adfbec67374cb78dbdf38b8bb328c54ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>connectAndStartTrigger</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>af116554ea3dcefafb7ad8c2d9c0b1a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>executeOneTimestepTrigger</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>af7d47a3cc68cd21f3fd1835995f955fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>a4b1efd9656294ac427082c2b88458608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>cc</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager.html</anchorfile>
      <anchor>afc45f29600216b9d3abeec2cc96e0afa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManagerAccess</name>
    <filename>class_veins_1_1_tra_c_i_scenario_manager_access.html</filename>
    <member kind="function">
      <type>TraCIScenarioManager *</type>
      <name>get</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_access.html</anchorfile>
      <anchor>af6404515b1b992848f352b03d325b10d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManagerLaunchd</name>
    <filename>class_veins_1_1_tra_c_i_scenario_manager_launchd.html</filename>
    <base>Veins::TraCIScenarioManager</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TraCIScenarioManagerLaunchd</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a11c07c153f39ca66e738d3c53f9924a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a80960dd89b68e6c6efbd2a06b16a91cc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>ad29dc12c41e262b7d59b44183dda06bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_traci</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>a4c5b4cac20e03a2e333fd3e49a6a7e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>launchConfig</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>ad1bf8415d12b738554b76dcb35b72101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seed</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_launchd.html</anchorfile>
      <anchor>ab917fd44dcdbf873c314ff4a7271b070</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::TraCIScenarioManagerLaunchdAccess</name>
    <filename>class_veins_1_1_tra_c_i_scenario_manager_launchd_access.html</filename>
    <member kind="function">
      <type>TraCIScenarioManagerLaunchd *</type>
      <name>get</name>
      <anchorfile>class_veins_1_1_tra_c_i_scenario_manager_launchd_access.html</anchorfile>
      <anchor>a0d630ea2a92db7e07d4bfe0d5a55ca10</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::Obstacle</name>
    <filename>class_veins_1_1_obstacle.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Coord &gt;</type>
      <name>Coords</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a586acca0929eb10cc73ea7be825d3637</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Obstacle</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a5419e7a639a042db9a4bd990f2911993</anchor>
      <arglist>(std::string id, double attenuationPerWall, double attenuationPerMeter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShape</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a805aed4d3b239e0163f06aa70bfb0b73</anchor>
      <arglist>(Coords shape)</arglist>
    </member>
    <member kind="function">
      <type>const Coords &amp;</type>
      <name>getShape</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a1e5a701e21f19186862a7e93fbf3727f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coord</type>
      <name>getBboxP1</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a85c7631c055aa999d73c1f57a2f01d46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coord</type>
      <name>getBboxP2</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>aca5158acb83145623179b40756afbc76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculateAttenuation</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a637ef6f4ebd448f7f2f3f68a6fb7466a</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos) const </arglist>
    </member>
    <member kind="variable">
      <type>AnnotationManager::Annotation *</type>
      <name>visualRepresentation</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a8db69ca6572f8f581506296acc5d1f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>id</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>ac09d50568b4975b446cfc905d1094661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>attenuationPerWall</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a5ac2b0bb7e40b1a32481bb5b2b1d196c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>attenuationPerMeter</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a63e08c8bd92f0c41738164b7f55592b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coords</type>
      <name>coords</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a088a171fc183b5fcde7a4d36a5f700b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>bboxP1</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>ae7926cbc6c3ed67090398a87b27ba0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>bboxP2</name>
      <anchorfile>class_veins_1_1_obstacle.html</anchorfile>
      <anchor>a1ef3b86c63ee37c99e9bf6319de2ced9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::ObstacleControl</name>
    <filename>class_veins_1_1_obstacle_control.html</filename>
    <class kind="struct">Veins::ObstacleControl::CacheKey</class>
    <member kind="function">
      <type></type>
      <name>~ObstacleControl</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a9a0f4a4b066ead07a7dc35064bb43b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a199ba1a4bd7eb58b6365fcaa5c0b1a90</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>aeb33ecdba9a10cdcb33bd5eb8c0ca8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a9c07fdcd59de3e83ff27779c262a58b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a42efb429b16cdbc17cac51f5aabc682b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>ae44772f7d064e31ab18301a0df6f2bd5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromXml</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a1e5fceb8e8d9616622cc12551231c9d3</anchor>
      <arglist>(cXMLElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a206a6e9155d1b201841d0718e65ed30f</anchor>
      <arglist>(Obstacle obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a3c5fb281ac00c947afe86d5e4bf99759</anchor>
      <arglist>(const Obstacle *obstacle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculateAttenuation</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>ae3bc0ffe81dd2ca3145636656f392204</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos) const </arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>GRIDCELL_SIZE</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a52b4b8a1266881ac99132284901a01f8aaaeaef90dbfcc889ad54819353cc909f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Obstacle * &gt;</type>
      <name>ObstacleGridCell</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>abf6a8e49836cc2e84083efdfb0ce443a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; ObstacleGridCell &gt;</type>
      <name>ObstacleGridRow</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>ae6b90bea0712db25767a1466cf2190b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; ObstacleGridRow &gt;</type>
      <name>Obstacles</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a009f96eba63cb6ad81abf49f34810ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; CacheKey, double &gt;</type>
      <name>CacheEntries</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>addca106e90b550928f647d1357ef4e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>acc889e39d0cdc996e752ef6b00df13ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>obstaclesXml</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a153bba91af5185e8215e8e80c1c6aea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Obstacles</type>
      <name>obstacles</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a7239ec57e6d0791e5d85f60e5c4617c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager *</type>
      <name>annotations</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>aeb42826c4ddc4e97d6c58f232e8615f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnnotationManager::Group *</type>
      <name>annotationGroup</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a09cdae70c3aae4bee6d129cc8a8d3ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CacheEntries</type>
      <name>cacheEntries</name>
      <anchorfile>class_veins_1_1_obstacle_control.html</anchorfile>
      <anchor>a3ac5aade85e956c70ef0c071cc7b914b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Veins::ObstacleControl::CacheKey</name>
    <filename>struct_veins_1_1_obstacle_control_1_1_cache_key.html</filename>
    <member kind="function">
      <type></type>
      <name>CacheKey</name>
      <anchorfile>struct_veins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a040d7b2534bdc24c129f7bd61acc636e</anchor>
      <arglist>(const Coord &amp;senderPos, const Coord &amp;receiverPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>struct_veins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a6c13eab0ef252053747305ea891e3ae8</anchor>
      <arglist>(const CacheKey &amp;o) const </arglist>
    </member>
    <member kind="variable">
      <type>const Coord</type>
      <name>senderPos</name>
      <anchorfile>struct_veins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a2597f4f25a4c95adca4e480a4bc9bd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Coord</type>
      <name>receiverPos</name>
      <anchorfile>struct_veins_1_1_obstacle_control_1_1_cache_key.html</anchorfile>
      <anchor>a66f2e4f792d5f4afb40ba9773123e53a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::ObstacleControlAccess</name>
    <filename>class_veins_1_1_obstacle_control_access.html</filename>
    <member kind="function">
      <type></type>
      <name>ObstacleControlAccess</name>
      <anchorfile>class_veins_1_1_obstacle_control_access.html</anchorfile>
      <anchor>a4a1c00dc526e36376d9ad0cb16c319ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObstacleControl *</type>
      <name>getIfExists</name>
      <anchorfile>class_veins_1_1_obstacle_control_access.html</anchorfile>
      <anchor>aa91c56b9eab7ff107096256d861b7ca4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationDummy</name>
    <filename>class_veins_1_1_annotation_dummy.html</filename>
    <member kind="function">
      <type></type>
      <name>~AnnotationDummy</name>
      <anchorfile>class_veins_1_1_annotation_dummy.html</anchorfile>
      <anchor>a8a512752f44140186a0c3e768d21f698</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager</name>
    <filename>class_veins_1_1_annotation_manager.html</filename>
    <class kind="class">Veins::AnnotationManager::Annotation</class>
    <class kind="class">Veins::AnnotationManager::Group</class>
    <class kind="class">Veins::AnnotationManager::Line</class>
    <class kind="class">Veins::AnnotationManager::Point</class>
    <class kind="class">Veins::AnnotationManager::Polygon</class>
    <member kind="function">
      <type></type>
      <name>~AnnotationManager</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a4c128a4092e49809d991d4c46a2fee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a4e45767a1dabba9ee81112336be01786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a6b000dd9d5d40d81b5b3b9d4581cfa19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a030910f3c70bf5205be6f7865bbf3073</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleSelfMsg</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a15b1bc8dc418c545c8ff4e2b1f14833b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleParameterChange</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a8bf0a36cd6e242341fa5a5b39fefd898</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFromXml</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a946e1967906528815fbe61cb8cfb2986</anchor>
      <arglist>(cXMLElement *xml)</arglist>
    </member>
    <member kind="function">
      <type>Group *</type>
      <name>createGroup</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>ac579f5fef019464b16a2e93a36868274</anchor>
      <arglist>(std::string title=&quot;untitled&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Point *</type>
      <name>drawPoint</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>ae661e9164bc6810b5296e330a6923cc5</anchor>
      <arglist>(Coord p, std::string color, std::string text, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>Line *</type>
      <name>drawLine</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a4e92e8dd00db918dda24085571ef234e</anchor>
      <arglist>(Coord p1, Coord p2, std::string color, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>Polygon *</type>
      <name>drawPolygon</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a250a47fb5e1390f8b4de2128a4aed175</anchor>
      <arglist>(std::list&lt; Coord &gt; coords, std::string color, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>Polygon *</type>
      <name>drawPolygon</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a09a32830153c4132dc54290197b94dba</anchor>
      <arglist>(std::vector&lt; Coord &gt; coords, std::string color, Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBubble</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a0b53a21c767d536a5a7ed72335cb9331</anchor>
      <arglist>(Coord p1, std::string text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a990948888917eff8840f899714d4e754</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAll</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>ae4e81c01b715f94d40b5e6cfdb81279a</anchor>
      <arglist>(Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleErase</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>ac782dda85f42f36488d8a2eb91de6b11</anchor>
      <arglist>(simtime_t deltaT, Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>createDummyModule</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a5913c22f5ec33e8a4d6531bc0b016899</anchor>
      <arglist>(std::string displayString)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>createDummyModuleLine</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a9f62775132e28042c0e239c79131fa61</anchor>
      <arglist>(Coord p1, Coord p2, std::string color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a87ffa1c7edbccb8372a4551b73c73def</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>ae7cd5fba58d72f4351963b9a6c95e669</anchor>
      <arglist>(const Annotation *annotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showAll</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a5aeb55b31919c887fce7332cd8d98152</anchor>
      <arglist>(Group *group=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideAll</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a00d8af6a3eb73ccacec8bb3083bf0fd8</anchor>
      <arglist>(Group *group=0)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Annotation * &gt;</type>
      <name>Annotations</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a1cbcbd690c9d1a3563543462ac8c4399</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Group * &gt;</type>
      <name>Groups</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a2717a95d56eac90ac6f555bc4c462599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a45613c9c343e0bcc81880a3945a8914a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>annotationsXml</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a3eabd7f3c3646048dcb2a3f995aaa31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; cMessage * &gt;</type>
      <name>scheduledEraseEvts</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a11e9c9ea7279bf7f7594699894d62259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Annotations</type>
      <name>annotations</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a0abeb462e7e2bb05356d49435567b27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Groups</type>
      <name>groups</name>
      <anchorfile>class_veins_1_1_annotation_manager.html</anchorfile>
      <anchor>a54f1b2c0453b30de97e41ce85bfc3f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Annotation</name>
    <filename>class_veins_1_1_annotation_manager_1_1_annotation.html</filename>
    <member kind="function">
      <type></type>
      <name>Annotation</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a6ebfb21012d46f500c139b10b17cc6a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Annotation</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a3aba415662f60e0ef3b917c1683aec41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Group *</type>
      <name>group</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a479f5696b5b0a2afda2b18038c17486e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; cModule * &gt;</type>
      <name>dummyObjects</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a0556d014251f5fa7fa9f154c53584e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciPoiIds</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a512752570656c6d644c65bb15c622e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciLineIds</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>ac364f9c1aeb95786a3b80ca2132db090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; std::string &gt;</type>
      <name>traciPolygonsIds</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>a03e42cc7376f26b7337346c9b9b9da46</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_annotation.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Group</name>
    <filename>class_veins_1_1_annotation_manager_1_1_group.html</filename>
    <member kind="function">
      <type></type>
      <name>Group</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>a1cb047eabfba52e74aa2fb484b155c52</anchor>
      <arglist>(std::string title)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Group</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>a0425359af860abe5eedf8cbce884f229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>title</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>a3c038e4ad344576d1120d35cff76373e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_group.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Line</name>
    <filename>class_veins_1_1_annotation_manager_1_1_line.html</filename>
    <base>Veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>a2e87e0d96c6643262475caef5b16db7b</anchor>
      <arglist>(Coord p1, Coord p2, std::string color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Line</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>a9eeb3a88e96e6a6ec2b75fd7e0ff4e27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>p1</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>ae677f7b0251cca20047d694deaedc7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>p2</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>a1cf459744ee8c362e57a968cdb1aa1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>a724cf173b2bc072c99773b2c9dfdef9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_line.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Point</name>
    <filename>class_veins_1_1_annotation_manager_1_1_point.html</filename>
    <base>Veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>ac2031dd1c71776509a37dbea5fb7b0d0</anchor>
      <arglist>(Coord pos, std::string color, std::string text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Point</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>ae2f297b382e2e64c3689f8b009ddd420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>a03acdeeb3a6e195fb13548be2da419c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>a29eff86d1859e0de89e1bba3d9e48fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>text</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>abbabca09a291dc3b26641bd8d62216ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_point.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManager::Polygon</name>
    <filename>class_veins_1_1_annotation_manager_1_1_polygon.html</filename>
    <base>Veins::AnnotationManager::Annotation</base>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>a51bd05eb33c81c7a6a03a8965ee126f1</anchor>
      <arglist>(std::list&lt; Coord &gt; coords, std::string color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Polygon</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>a1dcfe7a88b256284643b9077fec50934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; Coord &gt;</type>
      <name>coords</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>a8dd7c8dc28082148a4e6a6d34395fdae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>color</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>ad3797331970cc20e828cf6974ff51b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AnnotationManager</name>
      <anchorfile>class_veins_1_1_annotation_manager_1_1_polygon.html</anchorfile>
      <anchor>aaedce5ff10318ebddfdb8d1acede6d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Veins::AnnotationManagerAccess</name>
    <filename>class_veins_1_1_annotation_manager_access.html</filename>
    <member kind="function">
      <type>AnnotationManager *</type>
      <name>getIfExists</name>
      <anchorfile>class_veins_1_1_annotation_manager_access.html</anchorfile>
      <anchor>a2c602699c6a6878cfaccfc2553ff839f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>analogueModel</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/analogueModel/</path>
    <filename>dir_0d46300540d929f53d209d16cf1d3533.html</filename>
    <file>BreakpointPathlossModel.cc</file>
    <file>BreakpointPathlossModel.h</file>
    <file>JakesFading.cc</file>
    <file>JakesFading.h</file>
    <file>LogNormalShadowing.cc</file>
    <file>LogNormalShadowing.h</file>
    <file>PERModel.cc</file>
    <file>PERModel.h</file>
    <file>SimpleObstacleShadowing.cc</file>
    <file>SimpleObstacleShadowing.h</file>
    <file>SimplePathlossModel.cc</file>
    <file>SimplePathlossModel.h</file>
    <file>TwoRayInterferenceModel.cc</file>
    <file>TwoRayInterferenceModel.h</file>
  </compound>
  <compound kind="dir">
    <name>annotations</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/world/annotations/</path>
    <filename>dir_312a6d1f788ed77138c351403e49328e.html</filename>
    <file>AnnotationDummy.cc</file>
    <file>AnnotationDummy.h</file>
    <file>AnnotationManager.cc</file>
    <file>AnnotationManager.h</file>
  </compound>
  <compound kind="dir">
    <name>application</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/</path>
    <filename>dir_5f41347d155178977248ca65e5afda3b.html</filename>
    <dir>default_veins_TraCI</dir>
    <dir>epidemic</dir>
    <dir>ieee80211p</dir>
    <dir>mfcv</dir>
    <dir>minicurso_UFPI_TraCI</dir>
    <dir>osdp</dir>
    <dir>service_discovery</dir>
    <dir>test1</dir>
  </compound>
  <compound kind="dir">
    <name>base</name>
    <path>/media/sda4/prog/veins-3.0/src/base/</path>
    <filename>dir_53edc44be62f46c3ccdcff9f028f0160.html</filename>
    <dir>connectionManager</dir>
    <dir>messages</dir>
    <dir>modules</dir>
    <dir>phyLayer</dir>
    <dir>utils</dir>
  </compound>
  <compound kind="dir">
    <name>connectionManager</name>
    <path>/media/sda4/prog/veins-3.0/src/base/connectionManager/</path>
    <filename>dir_5017b6aa5e28238e5168dd7b39315c8d.html</filename>
    <file>BaseConnectionManager.cc</file>
    <file>BaseConnectionManager.h</file>
    <file>ChannelAccess.cc</file>
    <file>ChannelAccess.h</file>
    <file>ConnectionManager.cc</file>
    <file>ConnectionManager.h</file>
    <file>NicEntry.h</file>
    <file>NicEntryDebug.cc</file>
    <file>NicEntryDebug.h</file>
    <file>NicEntryDirect.cc</file>
    <file>NicEntryDirect.h</file>
  </compound>
  <compound kind="dir">
    <name>default_veins_TraCI</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/default_veins_TraCI/</path>
    <filename>dir_f4419b32b94c0112d11154c400f4284d.html</filename>
    <file>default_veins_TraCI.cc</file>
    <file>default_veins_TraCI.h</file>
    <file>default_veins_TraCI_RSU.cc</file>
    <file>default_veins_TraCI_RSU.h</file>
    <file>default_veins_TraCI_TestApp.cc</file>
    <file>default_veins_TraCI_TestApp.h</file>
  </compound>
  <compound kind="dir">
    <name>epidemic</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/epidemic/</path>
    <filename>dir_7f9e25eb1b3bf5c0b6c865dc7d2263fb.html</filename>
    <file>epidemic.cc</file>
    <file>epidemic.h</file>
    <file>epidemic_app.cc</file>
    <file>epidemic_app.h</file>
    <file>epidemic_rsu.cc</file>
    <file>epidemic_rsu.h</file>
  </compound>
  <compound kind="dir">
    <name>ieee80211p</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mac/ieee80211p/</path>
    <filename>dir_931d1bf19ecf4f47412978befdd6f520.html</filename>
    <file>Mac1609_4.cc</file>
    <file>Mac1609_4.h</file>
    <file>Mac80211pToPhy11pInterface.h</file>
    <file>WaveAppToMac1609_4Interface.h</file>
  </compound>
  <compound kind="dir">
    <name>ieee80211p</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/ieee80211p/</path>
    <filename>dir_b94066bf8809621da1c75e6f9936e2ea.html</filename>
    <file>BaseWaveApplLayer.cc</file>
    <file>BaseWaveApplLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>inet</name>
    <path>/media/sda4/prog/veins-3.0/src/inet/</path>
    <filename>dir_3f5cdfb3da1ce0119e748a6a315cd0bf.html</filename>
    <file>Coord.cc</file>
    <file>Coord.h</file>
    <file>FWMath.h</file>
  </compound>
  <compound kind="dir">
    <name>mac</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mac/</path>
    <filename>dir_c6966c0d310ff015deca16c28cf05b13.html</filename>
    <dir>ieee80211p</dir>
  </compound>
  <compound kind="dir">
    <name>messages</name>
    <path>/media/sda4/prog/veins-3.0/src/base/messages/</path>
    <filename>dir_f0dba5b8635a686817659563df9fbe7a.html</filename>
    <file>AirFrame_m.h</file>
    <file>BorderMsg_m.h</file>
    <file>ChannelSenseRequest_m.h</file>
    <file>MacPkt_m.h</file>
  </compound>
  <compound kind="dir">
    <name>messages</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/messages/</path>
    <filename>dir_c05d61783657548656d111f16d249e1a.html</filename>
    <file>AirFrame11p_m.h</file>
    <file>Mac80211Pkt_m.h</file>
    <file>WaveShortMessage_m.h</file>
  </compound>
  <compound kind="dir">
    <name>mfcv</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/mfcv/</path>
    <filename>dir_537183e1992d99258bf96e409b6d318f.html</filename>
    <file>mfcv.cc</file>
    <file>mfcv.h</file>
    <file>mfcv_rsu.cc</file>
    <file>mfcv_rsu.h</file>
  </compound>
  <compound kind="dir">
    <name>minicurso_UFPI_TraCI</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/minicurso_UFPI_TraCI/</path>
    <filename>dir_1d3df923f0951d1532967d8da8f7572f.html</filename>
    <file>minicurso_UFPI_TraCI.cc</file>
    <file>minicurso_UFPI_TraCI.h</file>
    <file>minicurso_UFPI_TraCI_RSU.cc</file>
    <file>minicurso_UFPI_TraCI_RSU.h</file>
    <file>minicurso_UFPI_TraCI_TestApp.cc</file>
    <file>minicurso_UFPI_TraCI_TestApp.h</file>
  </compound>
  <compound kind="dir">
    <name>mobility</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/</path>
    <filename>dir_f11bed40a792acfa78e7b5a183f8926d.html</filename>
    <dir>traci</dir>
  </compound>
  <compound kind="dir">
    <name>modules</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/</path>
    <filename>dir_3d824dc946d061b2d9ef472e40e4c571.html</filename>
    <dir>analogueModel</dir>
    <dir>application</dir>
    <dir>mac</dir>
    <dir>messages</dir>
    <dir>mobility</dir>
    <dir>obstacle</dir>
    <dir>phy</dir>
    <dir>utility</dir>
    <dir>world</dir>
  </compound>
  <compound kind="dir">
    <name>modules</name>
    <path>/media/sda4/prog/veins-3.0/src/base/modules/</path>
    <filename>dir_3e1b1397dbd05e861dfd2bccee558520.html</filename>
    <file>AddressingInterface.h</file>
    <file>BaseApplLayer.cc</file>
    <file>BaseApplLayer.h</file>
    <file>BaseBattery.cc</file>
    <file>BaseBattery.h</file>
    <file>BaseLayer.cc</file>
    <file>BaseLayer.h</file>
    <file>BaseMacLayer.cc</file>
    <file>BaseMacLayer.h</file>
    <file>BaseMobility.cc</file>
    <file>BaseMobility.h</file>
    <file>BaseModule.cc</file>
    <file>BaseModule.h</file>
    <file>BaseWorldUtility.cc</file>
    <file>BaseWorldUtility.h</file>
    <file>BatteryAccess.cc</file>
    <file>BatteryAccess.h</file>
  </compound>
  <compound kind="dir">
    <name>obstacle</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/obstacle/</path>
    <filename>dir_18df5c85841b255a9973e980571f8bf3.html</filename>
    <file>Obstacle.cc</file>
    <file>Obstacle.h</file>
    <file>ObstacleControl.cc</file>
    <file>ObstacleControl.h</file>
  </compound>
  <compound kind="dir">
    <name>osdp</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/osdp/</path>
    <filename>dir_9026a4dee664311b24d2c7e475be76ef.html</filename>
    <file>osdp.cc</file>
    <file>osdp.h</file>
    <file>osdp_RSU.cc</file>
    <file>osdp_RSU.h</file>
  </compound>
  <compound kind="dir">
    <name>phy</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/phy/</path>
    <filename>dir_c31e37e1c8dbce364017bb45a5c9eabe.html</filename>
    <file>Decider80211p.cc</file>
    <file>Decider80211p.h</file>
    <file>Decider80211pToPhy80211pInterface.h</file>
    <file>DeciderResult80211.h</file>
    <file>PhyLayer80211p.cc</file>
    <file>PhyLayer80211p.h</file>
    <file>SNRThresholdDecider.cc</file>
    <file>SNRThresholdDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>phyLayer</name>
    <path>/media/sda4/prog/veins-3.0/src/base/phyLayer/</path>
    <filename>dir_71bb5c506745506bc6c3dd054250970a.html</filename>
    <file>AnalogueModel.h</file>
    <file>BaseDecider.cc</file>
    <file>BaseDecider.h</file>
    <file>BasePhyLayer.cc</file>
    <file>BasePhyLayer.h</file>
    <file>ChannelInfo.cc</file>
    <file>ChannelInfo.h</file>
    <file>ChannelState.cc</file>
    <file>ChannelState.h</file>
    <file>Decider.cc</file>
    <file>Decider.h</file>
    <file>DeciderToPhyInterface.h</file>
    <file>Interpolation.h</file>
    <file>MacToPhyControlInfo.h</file>
    <file>MacToPhyInterface.h</file>
    <file>Mapping.h</file>
    <file>MappingBase.cc</file>
    <file>MappingBase.h</file>
    <file>MappingUtils.cc</file>
    <file>MappingUtils.h</file>
    <file>PhyToMacControlInfo.h</file>
    <file>PhyUtils.cc</file>
    <file>PhyUtils.h</file>
    <file>Signal.cc</file>
    <file>Signal_.h</file>
  </compound>
  <compound kind="dir">
    <name>scripts</name>
    <path>/media/sda4/prog/veins-3.0/src/scripts/</path>
    <filename>dir_3d16b53d092ed4bad48a44379895eca4.html</filename>
    <file>debug.in.py</file>
    <file>memcheck.in.py</file>
    <file>run.in.py</file>
  </compound>
  <compound kind="dir">
    <name>service_discovery</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/service_discovery/</path>
    <filename>dir_48c837b75847484f128a06364a75d9ef.html</filename>
    <file>service_discovery.cc</file>
    <file>service_discovery.h</file>
    <file>service_discovery_RSU.cc</file>
    <file>service_discovery_RSU.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/media/sda4/prog/veins-3.0/src/</path>
    <filename>dir_5a20c8b7d63e253cd89291d686c68a5c.html</filename>
    <dir>base</dir>
    <dir>inet</dir>
    <dir>modules</dir>
    <dir>scripts</dir>
    <file>index.h</file>
  </compound>
  <compound kind="dir">
    <name>test1</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/application/test1/</path>
    <filename>dir_ec9b4d2a2e45335b311ae85aaf77b590.html</filename>
    <file>test1.cc</file>
    <file>test1.h</file>
    <file>test1_rsu.cc</file>
    <file>test1_rsu.h</file>
  </compound>
  <compound kind="dir">
    <name>traci</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/mobility/traci/</path>
    <filename>dir_66e5bfd192af787812e18d272c51b203.html</filename>
    <file>TraCIBuffer.cc</file>
    <file>TraCIBuffer.h</file>
    <file>TraCIColor.cc</file>
    <file>TraCIColor.h</file>
    <file>TraCICommandInterface.cc</file>
    <file>TraCICommandInterface.h</file>
    <file>TraCIConnection.cc</file>
    <file>TraCIConnection.h</file>
    <file>TraCIConstants.h</file>
    <file>TraCICoord.h</file>
    <file>TraCIMobility.cc</file>
    <file>TraCIMobility.h</file>
    <file>TraCIScenarioManager.cc</file>
    <file>TraCIScenarioManager.h</file>
    <file>TraCIScenarioManagerInet.cc</file>
    <file>TraCIScenarioManagerInet.h</file>
    <file>TraCIScenarioManagerLaunchd.cc</file>
    <file>TraCIScenarioManagerLaunchd.h</file>
  </compound>
  <compound kind="dir">
    <name>utility</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/utility/</path>
    <filename>dir_e412ca9a21145fbb923005221ebba538.html</filename>
    <file>Consts80211p.h</file>
  </compound>
  <compound kind="dir">
    <name>utils</name>
    <path>/media/sda4/prog/veins-3.0/src/base/utils/</path>
    <filename>dir_8927b9995051dda3adb2bd9e363669f9.html</filename>
    <file>asserts.cc</file>
    <file>asserts.h</file>
    <file>FindModule.h</file>
    <file>HostState.h</file>
    <file>MacToNetwControlInfo.h</file>
    <file>MiXiMDefs.h</file>
    <file>miximkerneldefs.h</file>
    <file>Move.h</file>
    <file>NetwToMacControlInfo.cc</file>
    <file>NetwToMacControlInfo.h</file>
    <file>PassedMessage.h</file>
    <file>SimpleAddress.cc</file>
    <file>SimpleAddress.h</file>
    <file>winsupport.cc</file>
    <file>winsupport.h</file>
  </compound>
  <compound kind="dir">
    <name>world</name>
    <path>/media/sda4/prog/veins-3.0/src/modules/world/</path>
    <filename>dir_67edc11ae45311a1d82fcea6f4091c99.html</filename>
    <dir>annotations</dir>
  </compound>
</tagfile>
